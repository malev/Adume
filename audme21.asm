;  ASM code generated by mikroVirtualMachine for dsPIC - V. 3.0.0.0
;  Date/Time: 11/03/2009 22:28:52
;  Info: http://www.mikroelektronika.co.yu


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$04235A			GOTO	_main
$0002	$000000			NOPR
$0004	$FFFFFF			NOPR
$0006	$FFFFFF			NOPR
$0008	$FFFFFF			NOPR
$000A	$FFFFFF			NOPR
$000C	$FFFFFF			NOPR
$000E	$FFFFFF			NOPR
$0010	$FFFFFF			NOPR
$0012	$FFFFFF			NOPR
$0014	$FFFFFF			NOPR
$0016	$FFFFFF			NOPR
$0018	$FFFFFF			NOPR
$001A	$FFFFFF			NOPR
$001C	$FFFFFF			NOPR
$001E	$FFFFFF			NOPR
$0020	$FFFFFF			NOPR
$0022	$FFFFFF			NOPR
$0024	$FFFFFF			NOPR
$0026	$FFFFFF			NOPR
$0028	$FFFFFF			NOPR
$002A	$FFFFFF			NOPR
$002C	$FFFFFF			NOPR
$002E	$FFFFFF			NOPR
$0030	$FFFFFF			NOPR
$0032	$FFFFFF			NOPR
$0034	$FFFFFF			NOPR
$0036	$FFFFFF			NOPR
$0038	$FFFFFF			NOPR
$003A	$FFFFFF			NOPR
$003C	$FFFFFF			NOPR
$003E	$FFFFFF			NOPR
$0040	$FFFFFF			NOPR
$0042	$FFFFFF			NOPR
$0044	$FFFFFF			NOPR
$0046	$FFFFFF			NOPR
$0048	$FFFFFF			NOPR
$004A	$FFFFFF			NOPR
$004C	$FFFFFF			NOPR
$004E	$FFFFFF			NOPR
$0050	$FFFFFF			NOPR
$0052	$FFFFFF			NOPR
$0054	$FFFFFF			NOPR
$0056	$FFFFFF			NOPR
$0058	$FFFFFF			NOPR
$005A	$FFFFFF			NOPR
$005C	$FFFFFF			NOPR
$005E	$FFFFFF			NOPR
$0060	$FFFFFF			NOPR
$0062	$FFFFFF			NOPR
$0064	$FFFFFF			NOPR
$0066	$FFFFFF			NOPR
$0068	$FFFFFF			NOPR
$006A	$FFFFFF			NOPR
$006C	$FFFFFF			NOPR
$006E	$FFFFFF			NOPR
$0070	$FFFFFF			NOPR
$0072	$FFFFFF			NOPR
$0074	$FFFFFF			NOPR
$0076	$FFFFFF			NOPR
$0078	$FFFFFF			NOPR
$007A	$FFFFFF			NOPR
$007C	$FFFFFF			NOPR
$007E	$FFFFFF			NOPR
$0080	$FFFFFF			NOPR
$0082	$FFFFFF			NOPR
$0084	$FFFFFF			NOPR
$0086	$FFFFFF			NOPR
$0088	$FFFFFF			NOPR
$008A	$FFFFFF			NOPR
$008C	$FFFFFF			NOPR
$008E	$FFFFFF			NOPR
$0090	$FFFFFF			NOPR
$0092	$FFFFFF			NOPR
$0094	$FFFFFF			NOPR
$0096	$FFFFFF			NOPR
$0098	$FFFFFF			NOPR
$009A	$FFFFFF			NOPR
$009C	$FFFFFF			NOPR
$009E	$FFFFFF			NOPR
$00A0	$FFFFFF			NOPR
$00A2	$FFFFFF			NOPR
$00A4	$FFFFFF			NOPR
$00A6	$FFFFFF			NOPR
$00A8	$FFFFFF			NOPR
$00AA	$FFFFFF			NOPR
$00AC	$FFFFFF			NOPR
$00AE	$FFFFFF			NOPR
$00B0	$FFFFFF			NOPR
$00B2	$FFFFFF			NOPR
$00B4	$FFFFFF			NOPR
$00B6	$FFFFFF			NOPR
$00B8	$FFFFFF			NOPR
$00BA	$FFFFFF			NOPR
$00BC	$FFFFFF			NOPR
$00BE	$FFFFFF			NOPR
$00C0	$FFFFFF			NOPR
$00C2	$FFFFFF			NOPR
$00C4	$FFFFFF			NOPR
$00C6	$FFFFFF			NOPR
$00C8	$FFFFFF			NOPR
$00CA	$FFFFFF			NOPR
$00CC	$FFFFFF			NOPR
$00CE	$FFFFFF			NOPR
$00D0	$FFFFFF			NOPR
$00D2	$FFFFFF			NOPR
$00D4	$FFFFFF			NOPR
$00D6	$FFFFFF			NOPR
$00D8	$FFFFFF			NOPR
$00DA	$FFFFFF			NOPR
$00DC	$FFFFFF			NOPR
$00DE	$FFFFFF			NOPR
$00E0	$FFFFFF			NOPR
$00E2	$FFFFFF			NOPR
$00E4	$FFFFFF			NOPR
$00E6	$FFFFFF			NOPR
$00E8	$FFFFFF			NOPR
$00EA	$FFFFFF			NOPR
$00EC	$FFFFFF			NOPR
$00EE	$FFFFFF			NOPR
$00F0	$FFFFFF			NOPR
$00F2	$FFFFFF			NOPR
$00F4	$FFFFFF			NOPR
$00F6	$FFFFFF			NOPR
$00F8	$FFFFFF			NOPR
$00FA	$FFFFFF			NOPR
$00FC	$FFFFFF			NOPR
$00FE	$FFFFFF			NOPR
$0100	$	_InitAdc:
;audme21.c,657 :: 		void InitAdc() {
;audme21.c,658 :: 		ADPCFG = 0xFFFE;    // Selecciona al RB2 como entrada analógica
$0100	$2FFFE0			MOV	#65534, W0
$0102	$881540			MOV	W0, ADPCFG
;audme21.c,659 :: 		ADCSSL = 0;         // Selecciona el canal a ser explorado NO SCAN
$0104	$200000			MOV	#0, W0
$0106	$881550			MOV	W0, ADCSSL
;audme21.c,660 :: 		ADCHS =  2;
$0108	$200020			MOV	#2, W0
$010A	$881530			MOV	W0, ADCHS
;audme21.c,661 :: 		ADCON2.F15 = 1;
$010C	$280001			MOV	#32768, W1
$010E	$202A20			MOV	#@ADCON2, W0
$0110	$708810			IOR	W1, [W0], [W0]
;audme21.c,662 :: 		ADCON3 = 0x1F3F;    // sample time = 31 Tad.
$0112	$21F3F0			MOV	#7999, W0
$0114	$881520			MOV	W0, ADCON3
;audme21.c,663 :: 		TRISB.F2 = 1;       // RB2 o AN2 es una entrada!
$0116	$200041			MOV	#4, W1
$0118	$202C60			MOV	#@TRISB, W0
$011A	$708810			IOR	W1, [W0], [W0]
;audme21.c,664 :: 		ADCON1 = 0x80E0; // turn ADC ON, unsigned Integer resoult. Internal Conuter
$011C	$280E00			MOV	#32992, W0
$011E	$881500			MOV	W0, ADCON1
;audme21.c,666 :: 		}//~
$0120	$	L_end__InitAdc:
$0120	$060000			RETURN
$0122	$	_Delay_8ms:
;Delays.c,376 :: 		void Delay_8ms()
;Delays.c,378 :: 		Delay_ms(8);
$0122	$21C2E0			MOV	#7214, W0
$0124	$781F80			PUSH	W0
$0126	$200020			MOV	#2, W0
$0128	$781F80			PUSH	W0
$012A	$07110A			RCALL	_Delay_Cyc, 0-10101
$012C	$B1004F			SUB	#4, W15
;Delays.c,379 :: 		}
$012E	$	L_end__Delay_8ms:
$012E	$060000			RETURN
$0130	$	_Lcd_Custom_Config:
$0130	$FA0000			LNK	#0
;__Lib_LcdCustom.c,267 :: 		
;__Lib_LcdCustom.c,269 :: 		
$0132	$07FFF7			RCALL	_Delay_8ms, 0-1
$0134	$07FFF6			RCALL	_Delay_8ms, 0-1
;__Lib_LcdCustom.c,271 :: 		
$0136	$57006A			SUB	W14, #10, W0
$0138	$784090			MOV.B	[W0], W1
$013A	$FB8081			ZE	W1, W1
$013C	$200010			MOV	#1, W0
$013E	$DD0301			SL	W0, W1, W6
$0140	$887006			MOV	W6, __Lib_LcdCustom____mDB7
;__Lib_LcdCustom.c,272 :: 		
$0142	$57006C			SUB	W14, #12, W0
$0144	$784090			MOV.B	[W0], W1
$0146	$FB8081			ZE	W1, W1
$0148	$200010			MOV	#1, W0
$014A	$DD0281			SL	W0, W1, W5
$014C	$887015			MOV	W5, __Lib_LcdCustom____mDB6
;__Lib_LcdCustom.c,273 :: 		
$014E	$57006E			SUB	W14, #14, W0
$0150	$784090			MOV.B	[W0], W1
$0152	$FB8081			ZE	W1, W1
$0154	$200010			MOV	#1, W0
$0156	$DD0201			SL	W0, W1, W4
$0158	$887024			MOV	W4, __Lib_LcdCustom____mDB5
;__Lib_LcdCustom.c,274 :: 		
$015A	$570070			SUB	W14, #16, W0
$015C	$784090			MOV.B	[W0], W1
$015E	$FB8081			ZE	W1, W1
$0160	$200010			MOV	#1, W0
$0162	$DD0181			SL	W0, W1, W3
$0164	$887033			MOV	W3, __Lib_LcdCustom____mDB4
;__Lib_LcdCustom.c,275 :: 		
$0166	$570074			SUB	W14, #20, W0
$0168	$784110			MOV.B	[W0], W2
$016A	$FB8102			ZE	W2, W2
$016C	$200011			MOV	#1, W1
$016E	$DD0802			SL	W1, W2, W0
$0170	$887040			MOV	W0, __Lib_LcdCustom____mRS
;__Lib_LcdCustom.c,276 :: 		
$0172	$570076			SUB	W14, #22, W0
$0174	$784110			MOV.B	[W0], W2
$0176	$FB8102			ZE	W2, W2
$0178	$200011			MOV	#1, W1
$017A	$DD0802			SL	W1, W2, W0
$017C	$887050			MOV	W0, __Lib_LcdCustom____mRW
;__Lib_LcdCustom.c,277 :: 		
$017E	$570078			SUB	W14, #24, W0
$0180	$784110			MOV.B	[W0], W2
$0182	$FB8102			ZE	W2, W2
$0184	$200011			MOV	#1, W1
$0186	$DD0802			SL	W1, W2, W0
$0188	$887060			MOV	W0, __Lib_LcdCustom____mENABLE
;__Lib_LcdCustom.c,279 :: 		
$018A	$570068			SUB	W14, #8, W0
$018C	$780010			MOV	[W0], W0
$018E	$887070			MOV	W0, __Lib_LcdCustom_dataPort
;__Lib_LcdCustom.c,280 :: 		
$0190	$570072			SUB	W14, #18, W0
$0192	$780010			MOV	[W0], W0
$0194	$887080			MOV	W0, __Lib_LcdCustom_ctrlPort
;__Lib_LcdCustom.c,282 :: 		
$0196	$730005			IOR	W6, W5, W0
$0198	$700004			IOR	W0, W4, W0
$019A	$700003			IOR	W0, W3, W0
$019C	$EA8080			COM	W0, W1
$019E	$97B84E			MOV	[W14+-8], W0
$01A0	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,283 :: 		
$01A2	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$01A4	$500162			SUB	W0, #2, W2
$01A6	$807001			MOV	__Lib_LcdCustom____mDB7, W1
$01A8	$20E020			MOV	#@__Lib_LcdCustom____mDB6, W0
$01AA	$708090			IOR	W1, [W0], W1
$01AC	$20E040			MOV	#@__Lib_LcdCustom____mDB5, W0
$01AE	$708010			IOR	W1, [W0], W0
$01B0	$20E065			MOV	#@__Lib_LcdCustom____mDB4, W5
$01B2	$700015			IOR	W0, [W5], W0
$01B4	$EA8000			COM	W0, W0
$01B6	$600912			AND	W0, [W2], [W2]
;__Lib_LcdCustom.c,285 :: 		
$01B8	$807040			MOV	__Lib_LcdCustom____mRS, W0
$01BA	$20E0A4			MOV	#@__Lib_LcdCustom____mRW, W4
$01BC	$700014			IOR	W0, [W4], W0
$01BE	$20E0C3			MOV	#@__Lib_LcdCustom____mENABLE, W3
$01C0	$700013			IOR	W0, [W3], W0
$01C2	$EA8080			COM	W0, W1
$01C4	$807080			MOV	__Lib_LcdCustom_ctrlPort, W0
$01C6	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,286 :: 		
$01C8	$807080			MOV	__Lib_LcdCustom_ctrlPort, W0
$01CA	$500162			SUB	W0, #2, W2
$01CC	$807041			MOV	__Lib_LcdCustom____mRS, W1
$01CE	$780004			MOV	W4, W0
$01D0	$708090			IOR	W1, [W0], W1
$01D2	$780003			MOV	W3, W0
$01D4	$708010			IOR	W1, [W0], W0
$01D6	$EA8000			COM	W0, W0
$01D8	$600912			AND	W0, [W2], [W2]
;__Lib_LcdCustom.c,289 :: 		
$01DA	$807021			MOV	__Lib_LcdCustom____mDB5, W1
$01DC	$780005			MOV	W5, W0
$01DE	$708090			IOR	W1, [W0], W1
$01E0	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$01E2	$708810			IOR	W1, [W0], [W0]
;__Lib_LcdCustom.c,290 :: 		
$01E4	$070E17			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,292 :: 		
$01E6	$070E20			RCALL	_Delay_5500us, 0-1
;__Lib_LcdCustom.c,296 :: 		
$01E8	$070E15			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,298 :: 		
$01EA	$070E1E			RCALL	_Delay_5500us, 0-1
;__Lib_LcdCustom.c,302 :: 		
$01EC	$070E13			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,304 :: 		
$01EE	$070E1C			RCALL	_Delay_5500us, 0-1
;__Lib_LcdCustom.c,307 :: 		
$01F0	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$01F2	$807020			MOV	__Lib_LcdCustom____mDB5, W0
$01F4	$700891			IOR	W0, [W1], [W1]
;__Lib_LcdCustom.c,308 :: 		
$01F6	$807030			MOV	__Lib_LcdCustom____mDB4, W0
$01F8	$EA8080			COM	W0, W1
$01FA	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$01FC	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,309 :: 		
$01FE	$070E0A			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,311 :: 		
$0200	$070E13			RCALL	_Delay_5500us, 0-1
;__Lib_LcdCustom.c,315 :: 		
$0202	$070E08			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,316 :: 		
$0204	$807020			MOV	__Lib_LcdCustom____mDB5, W0
$0206	$EA8080			COM	W0, W1
$0208	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$020A	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,317 :: 		
$020C	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$020E	$807000			MOV	__Lib_LcdCustom____mDB7, W0
$0210	$700891			IOR	W0, [W1], [W1]
;__Lib_LcdCustom.c,318 :: 		
$0212	$070E00			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,320 :: 		
$0214	$070E09			RCALL	_Delay_5500us, 0-1
;__Lib_LcdCustom.c,323 :: 		
$0216	$807000			MOV	__Lib_LcdCustom____mDB7, W0
$0218	$EA8080			COM	W0, W1
$021A	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$021C	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,324 :: 		
$021E	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$0220	$807030			MOV	__Lib_LcdCustom____mDB4, W0
$0222	$700891			IOR	W0, [W1], [W1]
;__Lib_LcdCustom.c,325 :: 		
$0224	$070DF7			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,326 :: 		
$0226	$807030			MOV	__Lib_LcdCustom____mDB4, W0
$0228	$EA8080			COM	W0, W1
$022A	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$022C	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,327 :: 		
$022E	$070DF2			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,329 :: 		
$0230	$070DFB			RCALL	_Delay_5500us, 0-1
;__Lib_LcdCustom.c,333 :: 		
$0232	$070DF0			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,334 :: 		
$0234	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$0236	$807030			MOV	__Lib_LcdCustom____mDB4, W0
$0238	$700891			IOR	W0, [W1], [W1]
;__Lib_LcdCustom.c,335 :: 		
$023A	$070DEC			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,337 :: 		
$023C	$070DF5			RCALL	_Delay_5500us, 0-1
;__Lib_LcdCustom.c,340 :: 		
$023E	$807030			MOV	__Lib_LcdCustom____mDB4, W0
$0240	$EA8080			COM	W0, W1
$0242	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$0244	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,341 :: 		
$0246	$070DE6			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,342 :: 		
$0248	$807031			MOV	__Lib_LcdCustom____mDB4, W1
$024A	$20E040			MOV	#@__Lib_LcdCustom____mDB5, W0
$024C	$708090			IOR	W1, [W0], W1
$024E	$20E020			MOV	#@__Lib_LcdCustom____mDB6, W0
$0250	$708090			IOR	W1, [W0], W1
$0252	$20E000			MOV	#@__Lib_LcdCustom____mDB7, W0
$0254	$708090			IOR	W1, [W0], W1
$0256	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$0258	$708810			IOR	W1, [W0], [W0]
;__Lib_LcdCustom.c,343 :: 		
$025A	$070DDC			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,345 :: 		
$025C	$070DE5			RCALL	_Delay_5500us, 0-1
;__Lib_LcdCustom.c,347 :: 		
$025E	$200010			MOV	#1, W0
$0260	$887090			MOV	W0, __Lib_LcdCustom_lcdCmdStatus
;__Lib_LcdCustom.c,348 :: 		
$0262	$	L_end__Lcd_Custom_Config:
$0262	$FA8000			ULNK
$0264	$060000			RETURN
$0266	$	_InitLCD:
;audme21.c,668 :: 		void InitLCD(){
;audme21.c,669 :: 		Lcd_Custom_Config(&PORTB, 5,4,3,2, &PORTD, 9, 3, 2);
$0266	$200020			MOV.B	#2, W0
$0268	$781F80			PUSH	W0
$026A	$200030			MOV.B	#3, W0
$026C	$781F80			PUSH	W0
$026E	$200090			MOV.B	#9, W0
$0270	$781F80			PUSH	W0
$0272	$202D40			MOV	#@PORTD+0, W0
$0274	$781F80			PUSH	W0
$0276	$200020			MOV.B	#2, W0
$0278	$781F80			PUSH	W0
$027A	$200030			MOV.B	#3, W0
$027C	$781F80			PUSH	W0
$027E	$200040			MOV.B	#4, W0
$0280	$781F80			PUSH	W0
$0282	$200050			MOV.B	#5, W0
$0284	$781F80			PUSH	W0
$0286	$202C80			MOV	#@PORTB+0, W0
$0288	$781F80			PUSH	W0
$028A	$07FF52			RCALL	_Lcd_Custom_Config, 0-101500000000015000000
$028C	$B1012F			SUB	#18, W15
;audme21.c,670 :: 		Lcd_Custom_Cmd(LCD_CURSOR_OFF);
$028E	$2000C0			MOV.B	#12, W0
$0290	$781F80			PUSH	W0
$0292	$070DD8			RCALL	_Lcd_Custom_Cmd, 0-100
$0294	$B1002F			SUB	#2, W15
;audme21.c,671 :: 		Lcd_Custom_Cmd(LCD_CLEAR);
$0296	$200010			MOV.B	#1, W0
$0298	$781F80			PUSH	W0
$029A	$070DD4			RCALL	_Lcd_Custom_Cmd, 0-100
$029C	$B1002F			SUB	#2, W15
;audme21.c,672 :: 		}//~
$029E	$	L_end__InitLCD:
$029E	$060000			RETURN
$02A0	$	_Uart2_Enable:
;__Lib_Uart2_p30.c,28 :: 		
;__Lib_Uart2_p30.c,29 :: 		
$02A0	$280001			MOV	#32768, W1
$02A2	$202160			MOV	#@U2MODEbits+0, W0
$02A4	$708810			IOR	W1, [W0], [W0]
;__Lib_Uart2_p30.c,30 :: 		
$02A6	$204001			MOV	#1024, W1
$02A8	$202180			MOV	#@U2STAbits+0, W0
$02AA	$708810			IOR	W1, [W0], [W0]
;__Lib_Uart2_p30.c,31 :: 		
$02AC	$	L_end__Uart2_Enable:
$02AC	$060000			RETURN
$02AE	$	_Uart2_Write_Char:
$02AE	$FA0000			LNK	#0
;__Lib_Uart2_p30.c,38 :: 		
;__Lib_Uart2_p30.c,39 :: 		
$02B0	$	L_Uart2_Write_Char_0:
$02B0	$8010C1			MOV	U2STAbits+0, W1
$02B2	$201000			MOV	#256, W0
$02B4	$608000			AND	W1, W0, W0
$02B6	$DE00C8			LSR	W0, #8, W1
$02B8	$E00001			CP0	W1
$02BA	$3A0002			BRA NZ	L_Uart2_Write_Char_1, L_Uart2_Write_Char_1
$02BC	$0402B0			GOTO	L_Uart2_Write_Char_0
$02C0	$	L_Uart2_Write_Char_1:
;__Lib_Uart2_p30.c,40 :: 		
$02C0	$570068			SUB	W14, #8, W0
$02C2	$784010			MOV.B	[W0], W0
$02C4	$FB8000			ZE	W0, W0
$02C6	$8810D0			MOV	W0, U2TXREG
;__Lib_Uart2_p30.c,41 :: 		
$02C8	$	L_end__Uart2_Write_Char:
$02C8	$FA8000			ULNK
$02CA	$060000			RETURN
$02CC	$	_Uart2_Read_Char:
;__Lib_Uart2_p30.c,48 :: 		
;__Lib_Uart2_p30.c,49 :: 		
$02CC	$000000			NOP
;__Lib_Uart2_p30.c,50 :: 		
$02CE	$000000			NOP
;__Lib_Uart2_p30.c,51 :: 		
$02D0	$8010E0			MOV	U2RXREG, W0
;__Lib_Uart2_p30.c,52 :: 		
$02D2	$	L_end__Uart2_Read_Char:
$02D2	$060000			RETURN
$02D4	$	_Uart2_Data_Ready:
;__Lib_Uart2_p30.c,43 :: 		
;__Lib_Uart2_p30.c,44 :: 		
$02D4	$8010C0			MOV	U2STA, W0
$02D6	$600061			AND	W0, #1, W0
;__Lib_Uart2_p30.c,46 :: 		
$02D8	$	L_end__Uart2_Data_Ready:
$02D8	$060000			RETURN
$02DA	$	_Uart2_Wait_Tx:
;__Lib_Uart2_p30.c,54 :: 		
;__Lib_Uart2_p30.c,56 :: 		
$02DA	$	L_Uart2_Wait_Tx_2:
$02DA	$8010C1			MOV	U2STAbits+0, W1
$02DC	$201000			MOV	#256, W0
$02DE	$608000			AND	W1, W0, W0
$02E0	$DE00C8			LSR	W0, #8, W1
$02E2	$E00001			CP0	W1
$02E4	$3A0003			BRA NZ	L_Uart2_Wait_Tx_3, L_Uart2_Wait_Tx_3
;__Lib_Uart2_p30.c,57 :: 		
$02E6	$000000			NOP
$02E8	$0402DA			GOTO	L_Uart2_Wait_Tx_2
$02EC	$	L_Uart2_Wait_Tx_3:
;__Lib_Uart2_p30.c,58 :: 		
$02EC	$	L_end__Uart2_Wait_Tx:
$02EC	$060000			RETURN
$02EE	$	_Uart2_Disable:
;__Lib_Uart2_p30.c,33 :: 		
;__Lib_Uart2_p30.c,34 :: 		
$02EE	$27FFF1			MOV	#32767, W1
$02F0	$202160			MOV	#@U2MODEbits+0, W0
$02F2	$608810			AND	W1, [W0], [W0]
;__Lib_Uart2_p30.c,35 :: 		
$02F4	$2FBFF1			MOV	#64511, W1
$02F6	$202180			MOV	#@U2STAbits+0, W0
$02F8	$608810			AND	W1, [W0], [W0]
;__Lib_Uart2_p30.c,36 :: 		
$02FA	$	L_end__Uart2_Disable:
$02FA	$060000			RETURN
$02FC	$	_Uart1_Disable:
;__Lib_Uart1_p30.c,33 :: 		
;__Lib_Uart1_p30.c,34 :: 		
$02FC	$27FFF1			MOV	#32767, W1
$02FE	$2020C0			MOV	#@U1MODEbits+0, W0
$0300	$608810			AND	W1, [W0], [W0]
;__Lib_Uart1_p30.c,35 :: 		
$0302	$2FBFF1			MOV	#64511, W1
$0304	$2020E0			MOV	#@U1STAbits+0, W0
$0306	$608810			AND	W1, [W0], [W0]
;__Lib_Uart1_p30.c,36 :: 		
$0308	$	L_end__Uart1_Disable:
$0308	$060000			RETURN
$030A	$	__Modulus_32x32:
;math.c,150 :: 		
;math.c,152 :: 		
$030A	$	Modulus_32x32___testsus:
;math.c,153 :: 		
$030A	$E00004			CP0	w4
;math.c,154 :: 		
$030C	$3A0002			BRA NZ	NZ, Modulus_32x32___modsi3
;math.c,155 :: 		
;math.c,156 :: 		
$030E	$070010			RCALL	Modulus_32x32___umodsi3
;math.c,157 :: 		
$0310	$060000			RETURN
;math.c,158 :: 		
;math.c,159 :: 		
$0312	$	Modulus_32x32___modsi3:
;math.c,160 :: 		
$0312	$781F81			MOV	w1, [w15++]
;math.c,161 :: 		
$0314	$E00001			CP0	w1
;math.c,162 :: 		
$0316	$3D0002			BRA GE	GE, Modulus_32x32_modtestb
;math.c,163 :: 		
$0318	$100060			SUBR	w0, #0, w0
;math.c,164 :: 		
$031A	$1880E0			SUBBR	w1, #0, w1
;math.c,165 :: 		
$031C	$	Modulus_32x32_modtestb:
;math.c,166 :: 		
$031C	$E00003			CP0	w3
;math.c,167 :: 		
$031E	$3D0002			BRA GE	ge, Modulus_32x32_calcrem
;math.c,168 :: 		
$0320	$110160			SUBR	w2, #0, w2
;math.c,169 :: 		
$0322	$1981E0			SUBBR	w3, #0, w3
;math.c,170 :: 		
$0324	$	Modulus_32x32_calcrem:
;math.c,171 :: 		
$0324	$070005			RCALL	Modulus_32x32___umodsi3
;math.c,172 :: 		
$0326	$E0004F			CP0	[--w15]
;math.c,173 :: 		
$0328	$3B0002			BRA NN	NN, Modulus_32x32_exitr
;math.c,174 :: 		
$032A	$100060			SUBR	w0, #0, w0
;math.c,175 :: 		
$032C	$1880E0			SUBBR	w1, #0, w1
;math.c,176 :: 		
$032E	$	Modulus_32x32_exitr:
;math.c,177 :: 		
$032E	$060000			RETURN
;math.c,178 :: 		
$0330	$	Modulus_32x32___umodsi3:
;math.c,179 :: 		
$0330	$070002			RCALL	Modulus_32x32___udivsi3
;math.c,180 :: 		
$0332	$BE0004			MOV.D	w4, w0
;math.c,181 :: 		
$0334	$060000			RETURN
;math.c,182 :: 		
$0336	$	Modulus_32x32___udivsi3:
;math.c,183 :: 		
$0336	$B82260			MUL.UU	w4, #0, w4
;math.c,184 :: 		
$0338	$200206			MOV	#0x20, w6
;math.c,185 :: 		
$033A	$	Modulus_32x32_nextbit:
;math.c,186 :: 		
$033A	$D00000			SL	w0, w0
;math.c,187 :: 		
$033C	$D28081			RLC	w1, w1
;math.c,188 :: 		
$033E	$D28204			RLC	w4, w4
;math.c,189 :: 		
$0340	$D28285			RLC	w5, w5
;math.c,190 :: 		
$0342	$A00000			BSET	w0, #0
;math.c,191 :: 		
$0344	$520202			SUB	w4, w2, w4
;math.c,192 :: 		
$0346	$5A8283			SUBB	w5, w3, w5
;math.c,193 :: 		
$0348	$3B0003			BRA NN	NN, Modulus_32x32_iterate
;math.c,194 :: 		
$034A	$420202			ADD	w4, w2, w4
;math.c,195 :: 		
$034C	$4A8283			ADDC	w5, w3, w5
;math.c,196 :: 		
$034E	$A10000			BCLR	w0, #0
;math.c,197 :: 		
$0350	$	Modulus_32x32_iterate:
;math.c,198 :: 		
$0350	$E90306			DEC	w6, w6
;math.c,199 :: 		
$0352	$3AFFF3			BRA NZ	NZ, Modulus_32x32_nextbit
;math.c,200 :: 		
$0354	$060000			RETURN
;math.c,202 :: 		
$0356	$	L_end___Modulus_32x32:
$0356	$060000			RETURN
$0358	$	_Uart2_Init:
$0358	$FA000C			LNK	#12
;__Lib_Uart2_p30.c,60 :: 		
;__Lib_Uart2_p30.c,63 :: 		
$035A	$202AE0			MOV	#@_Uart2_Write_Char+0, W0
$035C	$8870A0			MOV	W0, _Uart_Wr_Ptr
;__Lib_Uart2_p30.c,64 :: 		
$035E	$202CC0			MOV	#@_Uart2_Read_Char+0, W0
$0360	$8870B0			MOV	W0, _Uart_Rd_Ptr
;__Lib_Uart2_p30.c,65 :: 		
$0362	$202D40			MOV	#@_Uart2_Data_Ready+0, W0
$0364	$8870C0			MOV	W0, _Uart_Rdy_Ptr
;__Lib_Uart2_p30.c,66 :: 		
$0366	$202DA0			MOV	#@_Uart2_Wait_Tx+0, W0
$0368	$8870D0			MOV	W0, _Uart_Wt_Tx_Ptr
;__Lib_Uart2_p30.c,67 :: 		
$036A	$202A00			MOV	#@_Uart2_Enable+0, W0
$036C	$8870E0			MOV	W0, _Uart_En_Ptr
;__Lib_Uart2_p30.c,68 :: 		
$036E	$202EE0			MOV	#@_Uart2_Disable+0, W0
$0370	$8870F0			MOV	W0, _Uart_Dis_Ptr
;__Lib_Uart2_p30.c,70 :: 		
$0372	$200000			MOV	#0, W0
$0374	$8810B0			MOV	W0, U2MODE
;__Lib_Uart2_p30.c,71 :: 		
$0376	$280000			MOV	#32768, W0
$0378	$8810C0			MOV	W0, U2STA
;__Lib_Uart2_p30.c,72 :: 		
$037A	$070048			RCALL	_Get_Fosc_kHz, 02
$037C	$780F00			MOV	W0, [W14]
$037E	$980711			MOV	W0+2, [W14+2]
;__Lib_Uart2_p30.c,75 :: 		
$0380	$203E82			MOV	#1000, W2
$0382	$DE91CF			ASR	W2, #15, W2+2
$0384	$07004D			RCALL	__multiply_32x32
$0386	$980720			MOV	W0, [W14+4]
$0388	$980731			MOV	W0+2, [W14+6]
$038A	$780F00			MOV	W0, [W14]
$038C	$980711			MOV	W0+2, [W14+2]
;__Lib_Uart2_p30.c,76 :: 		
$038E	$200066			MOV	#6, W6
$0390	$DEB3CF			ASR	W6, #15, W6+2
$0392	$57026A			SUB	W14, #10, W4
$0394	$780134			MOV	[W4++], W2
$0396	$7801A4			MOV	[W4--], W2+2
$0398	$	L_Uart2_Init_10:
$0398	$E90306			DEC	W6, W6
$039A	$350003			BRA LT	L_Uart2_Init_11, L_Uart2_Init_11
$039C	$D00102			SL	W2, W2
$039E	$D28183			RLC	W2+2, W2+2
$03A0	$37FFFB			BRA	L_Uart2_Init_10, L_Uart2_Init_10
$03A2	$	L_Uart2_Init_11:
$03A2	$980742			MOV	W2, [W14+8]
$03A4	$980753			MOV	W2+2, [W14+10]
;__Lib_Uart2_p30.c,78 :: 		
$03A6	$EB0200			CLR	W4
$03A8	$07FFB0			RCALL	__modulus_32x32
;__Lib_Uart2_p30.c,79 :: 		
$03AA	$90022E			MOV	[W14+4], W4
$03AC	$9002BE			MOV	[W14+6], W4+2
$03AE	$90014E			MOV	[W14+8], W2
$03B0	$9001DE			MOV	[W14+10], W2+2
;__Lib_Uart2_p30.c,78 :: 		
$03B2	$980720			MOV	W0, [W14+4]
$03B4	$980731			MOV	W0+2, [W14+6]
;__Lib_Uart2_p30.c,79 :: 		
$03B6	$780004			MOV	W4, W0
$03B8	$780085			MOV	W4+2, W0+2
$03BA	$EB0200			CLR	W4
$03BC	$070038			RCALL	__divide_32x32
$03BE	$780F00			MOV	W0, [W14]
$03C0	$980711			MOV	W0+2, [W14+2]
;__Lib_Uart2_p30.c,81 :: 		
$03C2	$200012			MOV	#1, W2
$03C4	$DE91CF			ASR	W2, #15, W2+2
$03C6	$90004E			MOV	[W14+8], W0
$03C8	$9000DE			MOV	[W14+10], W0+2
$03CA	$780200			MOV	W0, W4
$03CC	$780281			MOV	W0+2, W4+2
$03CE	$	L_Uart2_Init_13:
$03CE	$E90102			DEC	W2, W2
$03D0	$350003			BRA LT	L_Uart2_Init_14, L_Uart2_Init_14
$03D2	$D10285			LSR	W4+2, W4+2
$03D4	$D38204			RRC	W4, W4
$03D6	$37FFFB			BRA	L_Uart2_Init_13, L_Uart2_Init_13
$03D8	$	L_Uart2_Init_14:
$03D8	$90012E			MOV	[W14+4], W2
$03DA	$9001BE			MOV	[W14+6], W2+2
$03DC	$510004			SUB	W2, W4, W0
$03DE	$598005			SUBB	W2+2, W4+2, W0
$03E0	$360005			BRA LEU	L_Uart2_Init_4, L_Uart2_Init_4
;__Lib_Uart2_p30.c,82 :: 		
$03E2	$200012			MOV	#1, W2
$03E4	$DE91CF			ASR	W2, #15, W2+2
$03E6	$470060			ADD	W14, #0, W0
$03E8	$411810			ADD	W2, [W0], [W0++]
$03EA	$499010			ADDC	W2+2, [W0], [W0--]
$03EC	$	L_Uart2_Init_4:
;__Lib_Uart2_p30.c,86 :: 		
$03EC	$470160			ADD	W14, #0, W2
$03EE	$780032			MOV	[W2++], W0
$03F0	$7800A2			MOV	[W2--], W0+2
$03F2	$500061			SUB	W0, #1, W0
$03F4	$5880E0			SUBB	W0+2, #0, W0+2
$03F6	$780F00			MOV	W0, [W14]
$03F8	$980711			MOV	W0+2, [W14+2]
$03FA	$8810F0			MOV	W0, U2BRG
;__Lib_Uart2_p30.c,87 :: 		
$03FC	$2FFFD2			MOV	#65533, W2
$03FE	$202180			MOV	#@U2STAbits+0, W0
$0400	$610810			AND	W2, [W0], [W0]
;__Lib_Uart2_p30.c,88 :: 		
$0402	$07FF4E			RCALL	_Uart2_Enable, 0-1
;__Lib_Uart2_p30.c,89 :: 		
$0404	$070006			RCALL	_Delay_100ms, 0-1
$0406	$070005			RCALL	_Delay_100ms, 0-1
;__Lib_Uart2_p30.c,99 :: 		
$0408	$	L_Uart2_Init_5:
;__Lib_Uart2_p30.c,100 :: 		
$0408	$	L_end__Uart2_Init:
$0408	$FA8000			ULNK
$040A	$060000			RETURN
$040C	$	_Get_Fosc_kHz:
;Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;Delays.c,39 :: 		return Clock_kHz();
$040C	$24E200			MOV	#20000, W0
$040E	$DE80CF			ASR	W0, #15, W0+2
;Delays.c,40 :: 		}//~
$0410	$	L_end__Get_Fosc_kHz:
$0410	$060000			RETURN
$0412	$	_Delay_100ms:
;Delays.c,428 :: 		void Delay_100ms()
;Delays.c,430 :: 		Delay_ms(100);
$0412	$2210E0			MOV	#8462, W0
$0414	$781F80			PUSH	W0
$0416	$2001E0			MOV	#30, W0
$0418	$781F80			PUSH	W0
$041A	$070F92			RCALL	_Delay_Cyc, 0-10101
$041C	$B1004F			SUB	#4, W15
;Delays.c,431 :: 		}
$041E	$	L_end__Delay_100ms:
$041E	$060000			RETURN
$0420	$	__Multiply_32x32:
;math.c,43 :: 		
;math.c,46 :: 		
$0420	$B80A02			MUL.UU	w1, w2, w4
;math.c,47 :: 		
$0422	$780280			MOV	w0, w5
;math.c,48 :: 		
$0424	$B80002			MUL.UU	w0, w2, w0
;math.c,49 :: 		
$0426	$420081			ADD	w4, w1, w1
;math.c,50 :: 		
$0428	$B82A03			MUL.UU	w5, w3, w4
;math.c,51 :: 		
$042A	$420081			ADD	w4, w1, w1
;math.c,54 :: 		
$042C	$	L_end___Multiply_32x32:
$042C	$060000			RETURN
$042E	$	__Divide_32x32:
;math.c,78 :: 		
;math.c,80 :: 		
$042E	$	Divide_32x32___testsus:
;math.c,81 :: 		
$042E	$E00004			CP0	w4
;math.c,82 :: 		
$0430	$3A0002			BRA NZ	NZ, Divide_32x32___divsi3
;math.c,83 :: 		
;math.c,84 :: 		
$0432	$070010			RCALL	Divide_32x32___udivsi3
;math.c,85 :: 		
$0434	$060000			RETURN
;math.c,86 :: 		
;math.c,87 :: 		
$0436	$	Divide_32x32___divsi3:
;math.c,88 :: 		
$0436	$689F83			XOR	w1, w3, [w15++]
;math.c,89 :: 		
$0438	$E00001			CP0	w1
;math.c,90 :: 		
$043A	$3D0002			BRA GE	GE, Divide_32x32_divtestb
;math.c,91 :: 		
$043C	$100060			SUBR	w0, #0, w0
;math.c,92 :: 		
$043E	$1880E0			SUBBR	w1, #0, w1
;math.c,93 :: 		
$0440	$	Divide_32x32_divtestb:
;math.c,94 :: 		
$0440	$E00003			CP0	w3
;math.c,95 :: 		
$0442	$3D0002			BRA GE	GE, Divide_32x32_calcquot
;math.c,96 :: 		
$0444	$110160			SUBR	w2, #0, w2
;math.c,97 :: 		
$0446	$1981E0			SUBBR	w3, #0, w3
;math.c,98 :: 		
$0448	$	Divide_32x32_calcquot:
;math.c,99 :: 		
$0448	$070005			RCALL	Divide_32x32___udivsi3
;math.c,100 :: 		
$044A	$E0004F			CP0	[--w15]
;math.c,101 :: 		
$044C	$3B0002			BRA NN	NN, Divide_32x32_returnq
;math.c,102 :: 		
$044E	$100060			SUBR	w0, #0, w0
;math.c,103 :: 		
$0450	$1880E0			SUBBR	w1, #0, w1
;math.c,104 :: 		
$0452	$	Divide_32x32_returnq:
;math.c,105 :: 		
$0452	$060000			RETURN
;math.c,106 :: 		
$0454	$	Divide_32x32___udivsi3:
;math.c,107 :: 		
$0454	$B82260			MUL.UU	w4, #0, w4
;math.c,108 :: 		
$0456	$200206			MOV	#0x20, w6
;math.c,109 :: 		
$0458	$	Divide_32x32_nextbit:
;math.c,110 :: 		
$0458	$D00000			SL	w0, w0
;math.c,111 :: 		
$045A	$D28081			RLC	w1, w1
;math.c,112 :: 		
$045C	$D28204			RLC	w4, w4
;math.c,113 :: 		
$045E	$D28285			RLC	w5, w5
;math.c,114 :: 		
$0460	$A00000			BSET	w0, #0
;math.c,115 :: 		
$0462	$520202			SUB	w4, w2, w4
;math.c,116 :: 		
$0464	$5A8283			SUBB	w5, w3, w5
;math.c,117 :: 		
$0466	$3B0003			BRA NN	NN, Divide_32x32_iterate
;math.c,118 :: 		
$0468	$420202			ADD	w4, w2, w4
;math.c,119 :: 		
$046A	$4A8283			ADDC	w5, w3, w5
;math.c,120 :: 		
$046C	$A10000			BCLR	w0, #0
;math.c,121 :: 		
$046E	$	Divide_32x32_iterate:
;math.c,122 :: 		
$046E	$E90306			DEC	w6, w6
;math.c,123 :: 		
$0470	$3AFFF3			BRA NZ	NZ, Divide_32x32_nextbit
;math.c,124 :: 		
$0472	$060000			RETURN
;math.c,126 :: 		
$0474	$	L_end___Divide_32x32:
$0474	$060000			RETURN
$0476	$	_I2c_Init:
$0476	$FA0004			LNK	#4
;__Lib_I2c_p30.c,35 :: 		
;__Lib_I2c_p30.c,38 :: 		
$0478	$07FFC9			RCALL	_Get_Fosc_kHz, 02
$047A	$200FA2			MOV	#250, W2
$047C	$EB0180			CLR	W2+2
$047E	$07FFD0			RCALL	__multiply_32x32
$0480	$780F00			MOV	W0, [W14]
$0482	$980711			MOV	W0+2, [W14+2]
;__Lib_I2c_p30.c,39 :: 		
$0484	$97B93E			MOV	[W14+-10], W2
$0486	$97B9CE			MOV	[W14+-8], W2+2
$0488	$78001E			MOV	[W14], W0
$048A	$90009E			MOV	[W14+2], W0+2
$048C	$EB0200			CLR	W4
$048E	$07FFCF			RCALL	__divide_32x32
$0490	$780F00			MOV	W0, [W14]
$0492	$980711			MOV	W0+2, [W14+2]
$0494	$470160			ADD	W14, #0, W2
$0496	$780032			MOV	[W2++], W0
$0498	$7800A2			MOV	[W2--], W0+2
$049A	$500061			SUB	W0, #1, W0
$049C	$5880E0			SUBB	W0+2, #0, W0+2
$049E	$780F00			MOV	W0, [W14]
$04A0	$980711			MOV	W0+2, [W14+2]
;__Lib_I2c_p30.c,41 :: 		
$04A2	$470060			ADD	W14, #0, W0
$04A4	$780010			MOV	[W0], W0
$04A6	$881020			MOV	W0, I2CBRG
;__Lib_I2c_p30.c,42 :: 		
$04A8	$280002			MOV	#32768, W2
$04AA	$202060			MOV	#@I2CCONbits+0, W0
$04AC	$710810			IOR	W2, [W0], [W0]
;__Lib_I2c_p30.c,43 :: 		
$04AE	$07FFB1			RCALL	_Delay_100ms, 0-1
;__Lib_I2c_p30.c,44 :: 		
$04B0	$200000			MOV	#0, W0
$04B2	$881040			MOV	W0, I2CSTAT
;__Lib_I2c_p30.c,46 :: 		
$04B4	$070B87			RCALL	_I2c_Wait_For_Idle, 0-1
;__Lib_I2c_p30.c,48 :: 		
$04B6	$070CAB			RCALL	_Delay_1us, 0-1
;__Lib_I2c_p30.c,49 :: 		
$04B8	$	L_end__I2c_Init:
$04B8	$FA8000			ULNK
$04BA	$060000			RETURN
$04BC	$	_Twiddle_Factors_Init:
;__Lib_TwiddleFactors.c,166 :: 		
$04BC	$	L_end__Twiddle_Factors_Init:
$04BC	$060000			RETURN
$04BE	$	_InitConfig:
;audme21.c,674 :: 		void InitConfig(){
;audme21.c,675 :: 		TRISB = 0x01FF;    // TRIS -> 0: Salida
$04BE	$201FF0			MOV	#511, W0
$04C0	$881630			MOV	W0, TRISB
;audme21.c,679 :: 		TRISD = 0x0003;    // RD0 y RD1 son pulsadores de entrada
$04C2	$200030			MOV	#3, W0
$04C4	$881690			MOV	W0, TRISD
;audme21.c,680 :: 		InitAdc();
$04C6	$07FE1C			RCALL	_InitAdc, 0-1
;audme21.c,681 :: 		InitLCD();
$04C8	$07FECE			RCALL	_InitLCD, 0-1
;audme21.c,682 :: 		Uart2_Init(9600);
$04CA	$225800			MOV	#9600, W0
$04CC	$DE80CF			ASR	W0, #15, W0+2
$04CE	$781F80			PUSH	W0
$04D0	$781F81			PUSH	W0+2
$04D2	$07FF42			RCALL	_Uart2_Init, 0-102
$04D4	$B1004F			SUB	#4, W15
;audme21.c,683 :: 		I2C_Init(10000);
$04D6	$227100			MOV	#10000, W0
$04D8	$DE80CF			ASR	W0, #15, W0+2
$04DA	$781F80			PUSH	W0
$04DC	$781F81			PUSH	W0+2
$04DE	$07FFCB			RCALL	_I2c_Init, 0-102
$04E0	$B1004F			SUB	#4, W15
;audme21.c,684 :: 		Twiddle_Factors_Init();
$04E2	$07FFEC			RCALL	_Twiddle_Factors_Init, 0-1
;audme21.c,685 :: 		}//~
$04E4	$	L_end__InitConfig:
$04E4	$060000			RETURN
$04E6	$	_Delay_500us:
;Delays.c,324 :: 		void Delay_500us()
;Delays.c,326 :: 		Delay_us(498);
$04E6	$209A80			MOV	#2472, W0
$04E8	$781F80			PUSH	W0
$04EA	$200000			MOV	#0, W0
$04EC	$781F80			PUSH	W0
$04EE	$070F28			RCALL	_Delay_Cyc, 0-10101
$04F0	$B1004F			SUB	#4, W15
;Delays.c,327 :: 		}
$04F2	$	L_end__Delay_500us:
$04F2	$060000			RETURN
$04F4	$	_Button:
$04F4	$FA0004			LNK	#4
;__Lib_Button.c,5 :: 		
;__Lib_Button.c,6 :: 		
$04F6	$200000			MOV	#0, W0
$04F8	$780F00			MOV	W0, [W14]
;__Lib_Button.c,7 :: 		
$04FA	$200014			MOV	#1, W4
$04FC	$57006A			SUB	W14, #10, W0
$04FE	$780110			MOV	[W0], W2
$0500	$DD2182			SL	W4, W2, W3
$0502	$980713			MOV	W3, [W14+2]
;__Lib_Button.c,9 :: 		
$0504	$97B84E			MOV	[W14+-8], W0
$0506	$618010			AND	W3, [W0], W0
$0508	$E00000			CP0	W0
$050A	$320002			BRA Z	L_Button_4, L_Button_4
$050C	$200003			MOV	#0, W3
$050E	$370001			BRA	L_Button_5, L_Button_5
$0510	$	L_Button_4:
$0510	$200013			MOV	#1, W3
$0512	$	L_Button_5:
$0512	$57006E			SUB	W14, #14, W0
$0514	$698190			XOR	W3, [W0], W3
$0516	$320019			BRA Z	L_Button_0, L_Button_0
;__Lib_Button.c,10 :: 		
$0518	$	L_Button_1:
$0518	$57006C			SUB	W14, #12, W0
$051A	$780190			MOV	[W0], W3
$051C	$518060			SUB	W3, #0, W0
$051E	$360007			BRA LEU	L_Button_2, L_Button_2
;__Lib_Button.c,11 :: 		
$0520	$07FFE2			RCALL	_Delay_500us, 0-1
;__Lib_Button.c,12 :: 		
$0522	$07FFE1			RCALL	_Delay_500us, 0-1
;__Lib_Button.c,13 :: 		
$0524	$200013			MOV	#1, W3
$0526	$57006C			SUB	W14, #12, W0
$0528	$118810			SUBR	W3, [W0], [W0]
;__Lib_Button.c,14 :: 		
$052A	$040518			GOTO	L_Button_1
$052E	$	L_Button_2:
;__Lib_Button.c,15 :: 		
$052E	$97B84E			MOV	[W14+-8], W0
$0530	$780190			MOV	[W0], W3
$0532	$470062			ADD	W14, #2, W0
$0534	$618010			AND	W3, [W0], W0
$0536	$E00000			CP0	W0
$0538	$320002			BRA Z	L_Button_6, L_Button_6
$053A	$200003			MOV	#0, W3
$053C	$370001			BRA	L_Button_7, L_Button_7
$053E	$	L_Button_6:
$053E	$200013			MOV	#1, W3
$0540	$	L_Button_7:
$0540	$57006E			SUB	W14, #14, W0
$0542	$698190			XOR	W3, [W0], W3
$0544	$320002			BRA Z	L_Button_3, L_Button_3
;__Lib_Button.c,16 :: 		
$0546	$200FF0			MOV	#255, W0
$0548	$780F00			MOV	W0, [W14]
$054A	$	L_Button_3:
;__Lib_Button.c,17 :: 		
$054A	$	L_Button_0:
;__Lib_Button.c,18 :: 		
$054A	$78001E			MOV	[W14], W0
;__Lib_Button.c,19 :: 		
$054C	$	L_end__Button:
$054C	$FA8000			ULNK
$054E	$060000			RETURN
$0550	$	_Formatear:
$0550	$FA0054			LNK	#84
$0552	$470060			ADD	W14, #0, W0
$0554	$2A93C1			MOV	#@?ICSlstr30_audme21, W1
$0556	$09000C			REPEAT	#12
$0558	$785831			MOV.B	[W1++], [W0++]
$055A	$47006D			ADD	W14, #13, W0
$055C	$2A9491			MOV	#@?ICSlstr31_audme21, W1
$055E	$09000D			REPEAT	#13
$0560	$785831			MOV.B	[W1++], [W0++]
$0562	$47007B			ADD	W14, #27, W0
$0564	$2A9571			MOV	#@?ICSlstr32_audme21, W1
$0566	$09000D			REPEAT	#13
$0568	$785831			MOV.B	[W1++], [W0++]
$056A	$200290			MOV	#41, W0
$056C	$470000			ADD	W14, W0, W0
$056E	$2A9651			MOV	#@?ICSlstr33_audme21, W1
$0570	$09000B			REPEAT	#11
$0572	$785831			MOV.B	[W1++], [W0++]
$0574	$200350			MOV	#53, W0
$0576	$470000			ADD	W14, W0, W0
$0578	$2A9711			MOV	#@?ICSlstr34_audme21, W1
$057A	$09000E			REPEAT	#14
$057C	$785831			MOV.B	[W1++], [W0++]
$057E	$200440			MOV	#68, W0
$0580	$470000			ADD	W14, W0, W0
$0582	$2A9801			MOV	#@?ICSlstr35_audme21, W1
$0584	$09000E			REPEAT	#14
$0586	$785831			MOV.B	[W1++], [W0++]
;audme21.c,498 :: 		void Formatear (void){
;audme21.c,500 :: 		LCD_Custom_Out(2,1,"Confirma?   ");
$0588	$470060			ADD	W14, #0, W0
$058A	$781F80			PUSH	W0
$058C	$200010			MOV.B	#1, W0
$058E	$781F80			PUSH	W0
$0590	$200020			MOV.B	#2, W0
$0592	$781F80			PUSH	W0
$0594	$070D0F			RCALL	_Lcd_Custom_Out, 0-10000015
$0596	$B1006F			SUB	#6, W15
;audme21.c,501 :: 		while(1){
$0598	$	L_Formatear_114:
;audme21.c,502 :: 		if(Button(&PORTD, 0, 100, 0)){
$0598	$200000			MOV	#0, W0
$059A	$781F80			PUSH	W0
$059C	$200640			MOV	#100, W0
$059E	$781F80			PUSH	W0
$05A0	$200000			MOV	#0, W0
$05A2	$781F80			PUSH	W0
$05A4	$202D40			MOV	#@PORTD+0, W0
$05A6	$781F80			PUSH	W0
$05A8	$07FFA5			RCALL	_Button, 01015010101
$05AA	$B1008F			SUB	#8, W15
$05AC	$E00000			CP0	W0
$05AE	$320041			BRA Z	L_Formatear_116, L_Formatear_116
;audme21.c,503 :: 		Lcd_Custom_Cmd(LCD_CLEAR);
$05B0	$200010			MOV.B	#1, W0
$05B2	$781F80			PUSH	W0
$05B4	$070C47			RCALL	_Lcd_Custom_Cmd, 0-100
$05B6	$B1002F			SUB	#2, W15
;audme21.c,504 :: 		Lcd_Custom_Out(1,1,"Formateando..");
$05B8	$47006D			ADD	W14, #13, W0
$05BA	$781F80			PUSH	W0
$05BC	$200010			MOV.B	#1, W0
$05BE	$781F80			PUSH	W0
$05C0	$200010			MOV.B	#1, W0
$05C2	$781F80			PUSH	W0
$05C4	$070CF7			RCALL	_Lcd_Custom_Out, 0-10000015
$05C6	$B1006F			SUB	#6, W15
;audme21.c,510 :: 		for(i=0;i<50;i++) Samples2[i] = 0x0000;
$05C8	$200531			MOV	#83, W1
$05CA	$470081			ADD	W14, W1, W1
$05CC	$200000			MOV.B	#0, W0
$05CE	$784880			MOV.B	W0, [W1]
$05D0	$	L_Formatear_117:
$05D0	$200530			MOV	#83, W0
$05D2	$470000			ADD	W14, W0, W0
$05D4	$784110			MOV.B	[W0], W2
$05D6	$200321			MOV	#50, W1
$05D8	$514001			SUB.B	W2, W1, W0
$05DA	$3D000F			BRA GE	L_Formatear_118, L_Formatear_118
$05DC	$200530			MOV	#83, W0
$05DE	$470000			ADD	W14, W0, W0
$05E0	$784010			MOV.B	[W0], W0
$05E2	$FB0000			SE	W0, W0
$05E4	$DD00C1			SL	W0, #1, W1
$05E6	$20E200			MOV	#@_Samples2+0, W0
$05E8	$400081			ADD	W0, W1, W1
$05EA	$200000			MOV	#0, W0
$05EC	$780880			MOV	W0, [W1]
$05EE	$	L_Formatear_119:
$05EE	$200011			MOV.B	#1, W1
$05F0	$200530			MOV	#83, W0
$05F2	$470000			ADD	W14, W0, W0
$05F4	$40C810			ADD.B	W1, [W0], [W0]
$05F6	$0405D0			GOTO	L_Formatear_117
$05FA	$	L_Formatear_118:
;audme21.c,511 :: 		WEeprom(0x00, 0x00);
$05FA	$200000			MOV.B	#0, W0
$05FC	$781F80			PUSH	W0
$05FE	$200000			MOV.B	#0, W0
$0600	$781F80			PUSH	W0
$0602	$0704A2			RCALL	_WEeprom, 0-10000
$0604	$B1004F			SUB	#4, W15
;audme21.c,512 :: 		delay_ms(2000);
$0606	$2166E0			MOV	#5742, W0
$0608	$781F80			PUSH	W0
$060A	$202620			MOV	#610, W0
$060C	$781F80			PUSH	W0
$060E	$070E98			RCALL	_Delay_Cyc, 0-10101
$0610	$B1004F			SUB	#4, W15
;audme21.c,513 :: 		Lcd_Custom_Out(2,1,"Finalizado   ");
$0612	$47007B			ADD	W14, #27, W0
$0614	$781F80			PUSH	W0
$0616	$200010			MOV.B	#1, W0
$0618	$781F80			PUSH	W0
$061A	$200020			MOV.B	#2, W0
$061C	$781F80			PUSH	W0
$061E	$070CCA			RCALL	_Lcd_Custom_Out, 0-10000015
$0620	$B1006F			SUB	#6, W15
;audme21.c,514 :: 		Delay_ms(2000);
$0622	$2166E0			MOV	#5742, W0
$0624	$781F80			PUSH	W0
$0626	$202620			MOV	#610, W0
$0628	$781F80			PUSH	W0
$062A	$070E8A			RCALL	_Delay_Cyc, 0-10101
$062C	$B1004F			SUB	#4, W15
;audme21.c,515 :: 		break;
$062E	$040670			GOTO	L_Formatear_115
;audme21.c,516 :: 		}else if (Button(&PORTD, 1, 100,0)){
$0632	$	L_Formatear_116:
$0632	$200000			MOV	#0, W0
$0634	$781F80			PUSH	W0
$0636	$200640			MOV	#100, W0
$0638	$781F80			PUSH	W0
$063A	$200010			MOV	#1, W0
$063C	$781F80			PUSH	W0
$063E	$202D40			MOV	#@PORTD+0, W0
$0640	$781F80			PUSH	W0
$0642	$07FF58			RCALL	_Button, 01015010101
$0644	$B1008F			SUB	#8, W15
$0646	$E00000			CP0	W0
$0648	$320011			BRA Z	L_Formatear_121, L_Formatear_121
;audme21.c,517 :: 		Lcd_Custom_Out(1,1,"Cancelado  ");
$064A	$200290			MOV	#41, W0
$064C	$470000			ADD	W14, W0, W0
$064E	$781F80			PUSH	W0
$0650	$200010			MOV.B	#1, W0
$0652	$781F80			PUSH	W0
$0654	$200010			MOV.B	#1, W0
$0656	$781F80			PUSH	W0
$0658	$070CAD			RCALL	_Lcd_Custom_Out, 0-10000015
$065A	$B1006F			SUB	#6, W15
;audme21.c,518 :: 		Delay_ms(2000);
$065C	$2166E0			MOV	#5742, W0
$065E	$781F80			PUSH	W0
$0660	$202620			MOV	#610, W0
$0662	$781F80			PUSH	W0
$0664	$070E6D			RCALL	_Delay_Cyc, 0-10101
$0666	$B1004F			SUB	#4, W15
;audme21.c,519 :: 		break;
$0668	$040670			GOTO	L_Formatear_115
;audme21.c,520 :: 		}
$066C	$	L_Formatear_121:
$066C	$	L_Formatear_120:
;audme21.c,521 :: 		}
$066C	$040598			GOTO	L_Formatear_114
$0670	$	L_Formatear_115:
;audme21.c,522 :: 		LCD_Custom_Cmd(LCD_CLEAR);
$0670	$200010			MOV.B	#1, W0
$0672	$781F80			PUSH	W0
$0674	$070BE7			RCALL	_Lcd_Custom_Cmd, 0-100
$0676	$B1002F			SUB	#2, W15
;audme21.c,523 :: 		LCD_Custom_Out(1,1,"Formatear     ");
$0678	$200350			MOV	#53, W0
$067A	$470000			ADD	W14, W0, W0
$067C	$781F80			PUSH	W0
$067E	$200010			MOV.B	#1, W0
$0680	$781F80			PUSH	W0
$0682	$200010			MOV.B	#1, W0
$0684	$781F80			PUSH	W0
$0686	$070C96			RCALL	_Lcd_Custom_Out, 0-10000015
$0688	$B1006F			SUB	#6, W15
;audme21.c,524 :: 		LCD_Custom_Out(2,1,"Presione Enter");
$068A	$200440			MOV	#68, W0
$068C	$470000			ADD	W14, W0, W0
$068E	$781F80			PUSH	W0
$0690	$200010			MOV.B	#1, W0
$0692	$781F80			PUSH	W0
$0694	$200020			MOV.B	#2, W0
$0696	$781F80			PUSH	W0
$0698	$070C8D			RCALL	_Lcd_Custom_Out, 0-10000015
$069A	$B1006F			SUB	#6, W15
;audme21.c,525 :: 		}//~
$069C	$	L_end__Formatear:
$069C	$FA8000			ULNK
$069E	$060000			RETURN
$06A0	$	_REeprom:
$06A0	$FA0004			LNK	#4
;audme21.c,540 :: 		void REeprom(char Adrr1, char Adrr0){
;audme21.c,543 :: 		I2c_Start();
$06A2	$070AB2			RCALL	_I2c_Start, 0-1
;audme21.c,544 :: 		I2c_Write(0xA2);               // send byte via I2C  (device address + W)
$06A4	$200A20			MOV.B	#162, W0
$06A6	$781F80			PUSH	W0
$06A8	$070AB5			RCALL	_I2c_Write, 0100
$06AA	$B1002F			SUB	#2, W15
;audme21.c,546 :: 		I2c_Write(Adrr1);               // send byte (data address)
$06AC	$570068			SUB	W14, #8, W0
$06AE	$784010			MOV.B	[W0], W0
$06B0	$FB8000			ZE	W0, W0
$06B2	$781F80			PUSH	W0
$06B4	$070AAF			RCALL	_I2c_Write, 0100
$06B6	$B1002F			SUB	#2, W15
;audme21.c,547 :: 		I2c_Write(Adrr0);
$06B8	$57006A			SUB	W14, #10, W0
$06BA	$784010			MOV.B	[W0], W0
$06BC	$FB8000			ZE	W0, W0
$06BE	$781F80			PUSH	W0
$06C0	$070AA9			RCALL	_I2c_Write, 0100
$06C2	$B1002F			SUB	#2, W15
;audme21.c,549 :: 		I2c_Restart();                 // issue I2C signal repeated start
$06C4	$0703D0			RCALL	_I2c_Restart, 0-1
;audme21.c,551 :: 		I2c_Write(0xA3);               // send byte (device address + R)
$06C6	$200A30			MOV.B	#163, W0
$06C8	$781F80			PUSH	W0
$06CA	$070AA4			RCALL	_I2c_Write, 0100
$06CC	$B1002F			SUB	#2, W15
;audme21.c,553 :: 		for(i=0;i<49;i++) Samples2[i] = I2c_Read(0);
$06CE	$4700E0			ADD	W14, #0, W1
$06D0	$200000			MOV.B	#0, W0
$06D2	$784880			MOV.B	W0, [W1]
$06D4	$	L_REeprom_125:
$06D4	$470060			ADD	W14, #0, W0
$06D6	$784110			MOV.B	[W0], W2
$06D8	$200311			MOV	#49, W1
$06DA	$514001			SUB.B	W2, W1, W0
$06DC	$310014			BRA GEU	L_REeprom_126, L_REeprom_126
$06DE	$470060			ADD	W14, #0, W0
$06E0	$784010			MOV.B	[W0], W0
$06E2	$FB8000			ZE	W0, W0
$06E4	$DD00C1			SL	W0, #1, W1
$06E6	$20E200			MOV	#@_Samples2+0, W0
$06E8	$400001			ADD	W0, W1, W0
$06EA	$980710			MOV	W0, [W14+2]
$06EC	$200000			MOV	#0, W0
$06EE	$781F80			PUSH	W0
$06F0	$0703C4			RCALL	_I2c_Read, 0001
$06F2	$B1002F			SUB	#2, W15
$06F4	$FB8000			ZE	W0, W0
$06F6	$780080			MOV	W0, W1
$06F8	$90001E			MOV	[W14+2], W0
$06FA	$780801			MOV	W1, [W0]
$06FC	$	L_REeprom_127:
$06FC	$200011			MOV.B	#1, W1
$06FE	$470060			ADD	W14, #0, W0
$0700	$40C810			ADD.B	W1, [W0], [W0]
$0702	$0406D4			GOTO	L_REeprom_125
$0706	$	L_REeprom_126:
;audme21.c,554 :: 		Samples2[49] = I2c_Read(1);
$0706	$200010			MOV	#1, W0
$0708	$781F80			PUSH	W0
$070A	$0703B7			RCALL	_I2c_Read, 0001
$070C	$B1002F			SUB	#2, W15
$070E	$FB8000			ZE	W0, W0
$0710	$887410			MOV	W0, _Samples2+98
;audme21.c,555 :: 		I2c_Stop();
$0712	$070A9C			RCALL	_I2c_Stop, 0-1
;audme21.c,556 :: 		}//~
$0714	$	L_end__REeprom:
$0714	$FA8000			ULNK
$0716	$060000			RETURN
$0718	$	_EnviarBloque:
$0718	$FA0010			LNK	#16
$071A	$470060			ADD	W14, #0, W0
$071C	$2A98F1			MOV	#@?ICSlstr36_audme21, W1
$071E	$090004			REPEAT	#4
$0720	$785831			MOV.B	[W1++], [W0++]
$0722	$470065			ADD	W14, #5, W0
$0724	$2A9941			MOV	#@?ICSlstr37_audme21, W1
$0726	$090004			REPEAT	#4
$0728	$785831			MOV.B	[W1++], [W0++]
;audme21.c,614 :: 		void EnviarBloque(char *m){
;audme21.c,618 :: 		TextToUart(m);
$072A	$570068			SUB	W14, #8, W0
$072C	$781F90			PUSH	[W0]
$072E	$070ACA			RCALL	_TextToUart, 0-1015
$0730	$B1002F			SUB	#2, W15
;audme21.c,619 :: 		NewLine();
$0732	$070AB0			RCALL	_NewLine, 0-1
;audme21.c,620 :: 		TextToUart("----");
$0734	$470060			ADD	W14, #0, W0
$0736	$781F80			PUSH	W0
$0738	$070AC5			RCALL	_TextToUart, 0-1015
$073A	$B1002F			SUB	#2, W15
;audme21.c,621 :: 		NewLine();
$073C	$070AAB			RCALL	_NewLine, 0-1
;audme21.c,622 :: 		for(i=0;i<50;i++){
$073E	$200000			MOV	#0, W0
$0740	$980750			MOV	W0, [W14+10]
$0742	$	L_EnviarBloque_134:
$0742	$200322			MOV	#50, W2
$0744	$4700EA			ADD	W14, #10, W1
$0746	$110011			SUBR	W2, [W1], W0
$0748	$310015			BRA GEU	L_EnviarBloque_135, L_EnviarBloque_135
;audme21.c,623 :: 		ByteToStr(Samples2[i], txt3);
$074A	$47006C			ADD	W14, #12, W0
$074C	$781F80			PUSH	W0
$074E	$47006A			ADD	W14, #10, W0
$0750	$780010			MOV	[W0], W0
$0752	$DD00C1			SL	W0, #1, W1
$0754	$20E200			MOV	#@_Samples2+0, W0
$0756	$400081			ADD	W0, W1, W1
$0758	$784011			MOV.B	[W1], W0
$075A	$781F80			PUSH	W0
$075C	$070C6B			RCALL	_ByteToStr, 0-100015
$075E	$B1004F			SUB	#4, W15
;audme21.c,624 :: 		TextToUart(txt3);
$0760	$47006C			ADD	W14, #12, W0
$0762	$781F80			PUSH	W0
$0764	$070AAF			RCALL	_TextToUart, 0-1015
$0766	$B1002F			SUB	#2, W15
;audme21.c,625 :: 		NewLine();
$0768	$070A95			RCALL	_NewLine, 0-1
;audme21.c,626 :: 		}
$076A	$	L_EnviarBloque_136:
;audme21.c,622 :: 		for(i=0;i<50;i++){
$076A	$200011			MOV	#1, W1
$076C	$47006A			ADD	W14, #10, W0
$076E	$408810			ADD	W1, [W0], [W0]
;audme21.c,626 :: 		}
$0770	$040742			GOTO	L_EnviarBloque_134
$0774	$	L_EnviarBloque_135:
;audme21.c,627 :: 		TextToUart("----");
$0774	$470065			ADD	W14, #5, W0
$0776	$781F80			PUSH	W0
$0778	$070AA5			RCALL	_TextToUart, 0-1015
$077A	$B1002F			SUB	#2, W15
;audme21.c,628 :: 		NewLine();
$077C	$070A8B			RCALL	_NewLine, 0-1
;audme21.c,629 :: 		}//~
$077E	$	L_end__EnviarBloque:
$077E	$FA8000			ULNK
$0780	$060000			RETURN
$0782	$	_EnviarDatos:
$0782	$FA0032			LNK	#50
$0784	$470060			ADD	W14, #0, W0
$0786	$2A9991			MOV	#@?ICSlstr38_audme21, W1
$0788	$09000E			REPEAT	#14
$078A	$785831			MOV.B	[W1++], [W0++]
$078C	$47006F			ADD	W14, #15, W0
$078E	$2A9A81			MOV	#@?ICSlstr39_audme21, W1
$0790	$090004			REPEAT	#4
$0792	$785831			MOV.B	[W1++], [W0++]
$0794	$470074			ADD	W14, #20, W0
$0796	$2A9AD1			MOV	#@?ICSlstr40_audme21, W1
$0798	$090004			REPEAT	#4
$079A	$785831			MOV.B	[W1++], [W0++]
$079C	$470079			ADD	W14, #25, W0
$079E	$2A9B21			MOV	#@?ICSlstr41_audme21, W1
$07A0	$090004			REPEAT	#4
$07A2	$785831			MOV.B	[W1++], [W0++]
$07A4	$47007E			ADD	W14, #30, W0
$07A6	$2A9B71			MOV	#@?ICSlstr42_audme21, W1
$07A8	$090004			REPEAT	#4
$07AA	$785831			MOV.B	[W1++], [W0++]
$07AC	$200230			MOV	#35, W0
$07AE	$470000			ADD	W14, W0, W0
$07B0	$2A9BC1			MOV	#@?ICSlstr43_audme21, W1
$07B2	$090004			REPEAT	#4
$07B4	$785831			MOV.B	[W1++], [W0++]
$07B6	$200280			MOV	#40, W0
$07B8	$470000			ADD	W14, W0, W0
$07BA	$2A9C11			MOV	#@?ICSlstr44_audme21, W1
$07BC	$090005			REPEAT	#5
$07BE	$785831			MOV.B	[W1++], [W0++]
;audme21.c,631 :: 		void EnviarDatos(void){
;audme21.c,633 :: 		LCD_Custom_Out(1,1,"Enviando datos");
$07C0	$470060			ADD	W14, #0, W0
$07C2	$781F80			PUSH	W0
$07C4	$200010			MOV.B	#1, W0
$07C6	$781F80			PUSH	W0
$07C8	$200010			MOV.B	#1, W0
$07CA	$781F80			PUSH	W0
$07CC	$070BF3			RCALL	_Lcd_Custom_Out, 0-10000015
$07CE	$B1006F			SUB	#6, W15
;audme21.c,634 :: 		Addr = LeerByte(0x00, 0x00);
$07D0	$200000			MOV.B	#0, W0
$07D2	$781F80			PUSH	W0
$07D4	$200000			MOV.B	#0, W0
$07D6	$781F80			PUSH	W0
$07D8	$070372			RCALL	_LeerByte, 000000
$07DA	$B1004F			SUB	#4, W15
$07DC	$FB8000			ZE	W0, W0
$07DE	$981770			MOV	W0, [W14+46]
;audme21.c,635 :: 		for(i=1;i<=Addr;i++){
$07E0	$200010			MOV	#1, W0
$07E2	$981F00			MOV	W0, [W14+48]
$07E4	$	L_EnviarDatos_137:
$07E4	$200300			MOV	#48, W0
$07E6	$470000			ADD	W14, W0, W0
$07E8	$780110			MOV	[W0], W2
$07EA	$2002E1			MOV	#46, W1
$07EC	$470081			ADD	W14, W1, W1
$07EE	$510011			SUB	W2, [W1], W0
$07F0	$3E0061			BRA GTU	L_EnviarDatos_138, L_EnviarDatos_138
;audme21.c,636 :: 		REeprom(i, 0x00);
$07F2	$200000			MOV.B	#0, W0
$07F4	$781F80			PUSH	W0
$07F6	$200300			MOV	#48, W0
$07F8	$470000			ADD	W14, W0, W0
$07FA	$780010			MOV	[W0], W0
$07FC	$781F80			PUSH	W0
$07FE	$07FF50			RCALL	_REeprom, 0-10000
$0800	$B1004F			SUB	#4, W15
;audme21.c,637 :: 		delay_ms(100);
$0802	$2210E0			MOV	#8462, W0
$0804	$781F80			PUSH	W0
$0806	$2001E0			MOV	#30, W0
$0808	$781F80			PUSH	W0
$080A	$070D9A			RCALL	_Delay_Cyc, 0-10101
$080C	$B1004F			SUB	#4, W15
;audme21.c,638 :: 		EnviarBloque("0x00");
$080E	$47006F			ADD	W14, #15, W0
$0810	$781F80			PUSH	W0
$0812	$07FF82			RCALL	_EnviarBloque, 0-1015
$0814	$B1002F			SUB	#2, W15
;audme21.c,639 :: 		REeprom(i, 0x32);
$0816	$200320			MOV.B	#50, W0
$0818	$781F80			PUSH	W0
$081A	$200300			MOV	#48, W0
$081C	$470000			ADD	W14, W0, W0
$081E	$780010			MOV	[W0], W0
$0820	$781F80			PUSH	W0
$0822	$07FF3E			RCALL	_REeprom, 0-10000
$0824	$B1004F			SUB	#4, W15
;audme21.c,640 :: 		delay_ms(100);
$0826	$2210E0			MOV	#8462, W0
$0828	$781F80			PUSH	W0
$082A	$2001E0			MOV	#30, W0
$082C	$781F80			PUSH	W0
$082E	$070D88			RCALL	_Delay_Cyc, 0-10101
$0830	$B1004F			SUB	#4, W15
;audme21.c,641 :: 		EnviarBloque("0x32");
$0832	$470074			ADD	W14, #20, W0
$0834	$781F80			PUSH	W0
$0836	$07FF70			RCALL	_EnviarBloque, 0-1015
$0838	$B1002F			SUB	#2, W15
;audme21.c,642 :: 		REeprom(i, 0x64);
$083A	$200640			MOV.B	#100, W0
$083C	$781F80			PUSH	W0
$083E	$200300			MOV	#48, W0
$0840	$470000			ADD	W14, W0, W0
$0842	$780010			MOV	[W0], W0
$0844	$781F80			PUSH	W0
$0846	$07FF2C			RCALL	_REeprom, 0-10000
$0848	$B1004F			SUB	#4, W15
;audme21.c,643 :: 		delay_ms(100);
$084A	$2210E0			MOV	#8462, W0
$084C	$781F80			PUSH	W0
$084E	$2001E0			MOV	#30, W0
$0850	$781F80			PUSH	W0
$0852	$070D76			RCALL	_Delay_Cyc, 0-10101
$0854	$B1004F			SUB	#4, W15
;audme21.c,644 :: 		EnviarBloque("0x64");
$0856	$470079			ADD	W14, #25, W0
$0858	$781F80			PUSH	W0
$085A	$07FF5E			RCALL	_EnviarBloque, 0-1015
$085C	$B1002F			SUB	#2, W15
;audme21.c,645 :: 		REeprom(i, 0x96);
$085E	$200960			MOV.B	#150, W0
$0860	$781F80			PUSH	W0
$0862	$200300			MOV	#48, W0
$0864	$470000			ADD	W14, W0, W0
$0866	$780010			MOV	[W0], W0
$0868	$781F80			PUSH	W0
$086A	$07FF1A			RCALL	_REeprom, 0-10000
$086C	$B1004F			SUB	#4, W15
;audme21.c,646 :: 		delay_ms(100);
$086E	$2210E0			MOV	#8462, W0
$0870	$781F80			PUSH	W0
$0872	$2001E0			MOV	#30, W0
$0874	$781F80			PUSH	W0
$0876	$070D64			RCALL	_Delay_Cyc, 0-10101
$0878	$B1004F			SUB	#4, W15
;audme21.c,647 :: 		EnviarBloque("0x96");
$087A	$47007E			ADD	W14, #30, W0
$087C	$781F80			PUSH	W0
$087E	$07FF4C			RCALL	_EnviarBloque, 0-1015
$0880	$B1002F			SUB	#2, W15
;audme21.c,648 :: 		REeprom(i, 0xC8);
$0882	$200C80			MOV.B	#200, W0
$0884	$781F80			PUSH	W0
$0886	$200300			MOV	#48, W0
$0888	$470000			ADD	W14, W0, W0
$088A	$780010			MOV	[W0], W0
$088C	$781F80			PUSH	W0
$088E	$07FF08			RCALL	_REeprom, 0-10000
$0890	$B1004F			SUB	#4, W15
;audme21.c,649 :: 		delay_ms(100);
$0892	$2210E0			MOV	#8462, W0
$0894	$781F80			PUSH	W0
$0896	$2001E0			MOV	#30, W0
$0898	$781F80			PUSH	W0
$089A	$070D52			RCALL	_Delay_Cyc, 0-10101
$089C	$B1004F			SUB	#4, W15
;audme21.c,650 :: 		EnviarBloque("0xC8");
$089E	$200230			MOV	#35, W0
$08A0	$470000			ADD	W14, W0, W0
$08A2	$781F80			PUSH	W0
$08A4	$07FF39			RCALL	_EnviarBloque, 0-1015
$08A6	$B1002F			SUB	#2, W15
;audme21.c,651 :: 		}
$08A8	$	L_EnviarDatos_139:
;audme21.c,635 :: 		for(i=1;i<=Addr;i++){
$08A8	$200011			MOV	#1, W1
$08AA	$200300			MOV	#48, W0
$08AC	$470000			ADD	W14, W0, W0
$08AE	$408810			ADD	W1, [W0], [W0]
;audme21.c,651 :: 		}
$08B0	$0407E4			GOTO	L_EnviarDatos_137
$08B4	$	L_EnviarDatos_138:
;audme21.c,652 :: 		LCD_Custom_Out(1,1,"Done.");
$08B4	$200280			MOV	#40, W0
$08B6	$470000			ADD	W14, W0, W0
$08B8	$781F80			PUSH	W0
$08BA	$200010			MOV.B	#1, W0
$08BC	$781F80			PUSH	W0
$08BE	$200010			MOV.B	#1, W0
$08C0	$781F80			PUSH	W0
$08C2	$070B78			RCALL	_Lcd_Custom_Out, 0-10000015
$08C4	$B1006F			SUB	#6, W15
;audme21.c,653 :: 		delay_ms(1000);
$08C6	$20B2E0			MOV	#2862, W0
$08C8	$781F80			PUSH	W0
$08CA	$201310			MOV	#305, W0
$08CC	$781F80			PUSH	W0
$08CE	$070D38			RCALL	_Delay_Cyc, 0-10101
$08D0	$B1004F			SUB	#4, W15
;audme21.c,654 :: 		LCD_Custom_Cmd(LCD_Clear);
$08D2	$200010			MOV.B	#1, W0
$08D4	$781F80			PUSH	W0
$08D6	$070AB6			RCALL	_Lcd_Custom_Cmd, 0-100
$08D8	$B1002F			SUB	#2, W15
;audme21.c,655 :: 		}
$08DA	$	L_end__EnviarDatos:
$08DA	$FA8000			ULNK
$08DC	$060000			RETURN
$08DE	$	_sinE3:
$08DE	$FA0004			LNK	#4
;__Lib_Trigon.c,12 :: 		
;__Lib_Trigon.c,16 :: 		
$08E0	$570068			SUB	W14, #8, W0
$08E2	$780190			MOV	[W0], W3
$08E4	$201682			MOV	#360, W2
$08E6	$090011			REPEAT	#17
$08E8	$D88182			DIV.U	W3, W2
$08EA	$780001			MOV	W1, W0
$08EC	$9FBF40			MOV	W0, [W14+-8]
;__Lib_Trigon.c,17 :: 		
$08EE	$200B44			MOV	#180, W4
$08F0	$500184			SUB	W0, W4, W3
$08F2	$360008			BRA LEU	L_sinE3_0, L_sinE3_0
;__Lib_Trigon.c,18 :: 		
$08F4	$4701E0			ADD	W14, #0, W3
$08F6	$200010			MOV.B	#1, W0
$08F8	$784980			MOV.B	W0, [W3]
;__Lib_Trigon.c,19 :: 		
$08FA	$200B43			MOV	#180, W3
$08FC	$570068			SUB	W14, #8, W0
$08FE	$118810			SUBR	W3, [W0], [W0]
;__Lib_Trigon.c,20 :: 		
$0900	$04090A			GOTO	L_sinE3_1
$0904	$	L_sinE3_0:
;__Lib_Trigon.c,22 :: 		
$0904	$4701E0			ADD	W14, #0, W3
$0906	$200000			MOV.B	#0, W0
$0908	$784980			MOV.B	W0, [W3]
$090A	$	L_sinE3_1:
;__Lib_Trigon.c,24 :: 		
$090A	$2005A4			MOV	#90, W4
$090C	$5701E8			SUB	W14, #8, W3
$090E	$120013			SUBR	W4, [W3], W0
$0910	$360003			BRA LEU	L_sinE3_2, L_sinE3_2
;__Lib_Trigon.c,25 :: 		
$0912	$200B43			MOV	#180, W3
$0914	$570068			SUB	W14, #8, W0
$0916	$518810			SUB	W3, [W0], [W0]
$0918	$	L_sinE3_2:
;__Lib_Trigon.c,26 :: 		
$0918	$570268			SUB	W14, #8, W4
$091A	$780194			MOV	[W4], W3
$091C	$2FFFE0			MOV	#65534, W0
$091E	$618000			AND	W3, W0, W0
$0920	$FB8000			ZE	W0, W0
$0922	$DE01C1			LSR	W0, #1, W3
$0924	$470061			ADD	W14, #1, W0
$0926	$784803			MOV.B	W3, [W0]
;__Lib_Trigon.c,28 :: 		
$0928	$200000			MOV	#0, W0
$092A	$980710			MOV	W0, [W14+2]
;__Lib_Trigon.c,29 :: 		
$092C	$780004			MOV	W4, W0
$092E	$780010			MOV	[W0], W0
$0930	$6001E1			AND	W0, #1, W3
$0932	$320016			BRA Z	L_sinE3_3, L_sinE3_3
;__Lib_Trigon.c,30 :: 		
$0934	$4702E1			ADD	W14, #1, W5
$0936	$784015			MOV.B	[W5], W0
$0938	$FB8000			ZE	W0, W0
$093A	$DD01C1			SL	W0, #1, W3
$093C	$2A9C80			MOV	#@_SIN_DEG+0, W0
$093E	$400003			ADD	W0, W3, W0
$0940	$780210			MOV	[W0], W4
$0942	$980714			MOV	W4, [W14+2]
$0944	$780005			MOV	W5, W0
$0946	$784010			MOV.B	[W0], W0
$0948	$404061			ADD.B	W0, #1, W0
$094A	$784A80			MOV.B	W0, [W5]
;__Lib_Trigon.c,31 :: 		
$094C	$FB8000			ZE	W0, W0
$094E	$DD01C1			SL	W0, #1, W3
$0950	$2A9C80			MOV	#@_SIN_DEG+0, W0
$0952	$400003			ADD	W0, W3, W0
$0954	$420010			ADD	W4, [W0], W0
$0956	$980710			MOV	W0, [W14+2]
;__Lib_Trigon.c,32 :: 		
$0958	$DE8041			ASR	W0, #1, W0
$095A	$980710			MOV	W0, [W14+2]
;__Lib_Trigon.c,33 :: 		
$095C	$040970			GOTO	L_sinE3_4
$0960	$	L_sinE3_3:
;__Lib_Trigon.c,35 :: 		
$0960	$470061			ADD	W14, #1, W0
$0962	$784010			MOV.B	[W0], W0
$0964	$FB8000			ZE	W0, W0
$0966	$DD01C1			SL	W0, #1, W3
$0968	$2A9C80			MOV	#@_SIN_DEG+0, W0
$096A	$400183			ADD	W0, W3, W3
$096C	$780013			MOV	[W3], W0
$096E	$980710			MOV	W0, [W14+2]
$0970	$	L_sinE3_4:
;__Lib_Trigon.c,38 :: 		
$0970	$78401E			MOV.B	[W14], W0
$0972	$E00400			CP0.B	W0
$0974	$320004			BRA Z	L_sinE3_5, L_sinE3_5
$0976	$470062			ADD	W14, #2, W0
$0978	$780010			MOV	[W0], W0
$097A	$100060			SUBR	W0, #0, W0
$097C	$370001			BRA	L_end__sinE3
$097E	$	L_sinE3_5:
;__Lib_Trigon.c,39 :: 		
$097E	$90001E			MOV	[W14+2], W0
;__Lib_Trigon.c,40 :: 		
$0980	$	L_end__sinE3:
$0980	$FA8000			ULNK
$0982	$060000			RETURN
$0984	$	_Generar_Senal:
$0984	$FA000A			LNK	#10
;audme21.c,59 :: 		void Generar_Senal(short modo){
;audme21.c,60 :: 		unsigned i=0;
$0986	$200000			MOV	#0, W0
$0988	$780F00			MOV	W0, [W14]
;audme21.c,64 :: 		while(i<256){
$098A	$	L_Generar_Senal_0:
$098A	$470060			ADD	W14, #0, W0
$098C	$780210			MOV	[W0], W4
$098E	$201002			MOV	#256, W2
$0990	$520002			SUB	W4, W2, W0
$0992	$310099			BRA GEU	L_Generar_Senal_1, L_Generar_Senal_1
;audme21.c,65 :: 		arg = 360 * 0.02 * i;
$0994	$78001E			MOV	[W14], W0
$0996	$EB0080			CLR	W0+2
$0998	$EB0100			CLR	W2
$099A	$0706B7			RCALL	__long2float
$099C	$266662			MOV	#26214, W2
$099E	$240E63			MOV	#16614, W2+2
$09A0	$07071B			RCALL	__mul_fp
$09A2	$070838			RCALL	__float2longint
$09A4	$980710			MOV	W0, [W14+2]
;audme21.c,66 :: 		temp = 1.1 * SinE3(1.5 * arg) + 0.95 * SinE3(3 * arg) + 0.2 * SinE3(4.5 * arg);
$09A6	$EB0080			CLR	W0+2
$09A8	$EB0100			CLR	W2
$09AA	$0706AF			RCALL	__long2float
$09AC	$200002			MOV	#0, W2
$09AE	$23FC03			MOV	#16320, W2+2
$09B0	$070713			RCALL	__mul_fp
$09B2	$070830			RCALL	__float2longint
$09B4	$781F80			PUSH	W0
$09B6	$07FF93			RCALL	_sinE3, 0401
$09B8	$B1002F			SUB	#2, W15
$09BA	$DE80CF			ASR	W0, #15, W0+2
$09BC	$EB8100			SETM	W2
$09BE	$0706A5			RCALL	__long2float
$09C0	$2CCCD2			MOV	#52429, W2
$09C2	$23F8C3			MOV	#16268, W2+2
$09C4	$070709			RCALL	__mul_fp
$09C6	$980730			MOV	W0, [W14+6]
$09C8	$980741			MOV	W0+2, [W14+8]
$09CA	$200032			MOV	#3, W2
$09CC	$470062			ADD	W14, #2, W0
$09CE	$B81010			MUL.UU	W2, [W0], W0
$09D0	$781F80			PUSH	W0
$09D2	$07FF85			RCALL	_sinE3, 0401
$09D4	$B1002F			SUB	#2, W15
$09D6	$DE80CF			ASR	W0, #15, W0+2
$09D8	$EB8100			SETM	W2
$09DA	$070697			RCALL	__long2float
$09DC	$233332			MOV	#13107, W2
$09DE	$23F733			MOV	#16243, W2+2
$09E0	$0706FB			RCALL	__mul_fp
$09E2	$90013E			MOV	[W14+6], W2
$09E4	$9001CE			MOV	[W14+8], W2+2
$09E6	$0703B1			RCALL	__addsub_fp
$09E8	$980730			MOV	W0, [W14+6]
$09EA	$980741			MOV	W0+2, [W14+8]
$09EC	$90001E			MOV	[W14+2], W0
$09EE	$EB0080			CLR	W0+2
$09F0	$EB0100			CLR	W2
$09F2	$07068B			RCALL	__long2float
$09F4	$200002			MOV	#0, W2
$09F6	$240903			MOV	#16528, W2+2
$09F8	$0706EF			RCALL	__mul_fp
$09FA	$07080C			RCALL	__float2longint
$09FC	$781F80			PUSH	W0
$09FE	$07FF6F			RCALL	_sinE3, 0401
$0A00	$B1002F			SUB	#2, W15
$0A02	$DE80CF			ASR	W0, #15, W0+2
$0A04	$EB8100			SETM	W2
$0A06	$070681			RCALL	__long2float
$0A08	$2CCCD2			MOV	#52429, W2
$0A0A	$23E4C3			MOV	#15948, W2+2
$0A0C	$0706E5			RCALL	__mul_fp
$0A0E	$90013E			MOV	[W14+6], W2
$0A10	$9001CE			MOV	[W14+8], W2+2
$0A12	$07039B			RCALL	__addsub_fp
$0A14	$0707FF			RCALL	__float2longint
$0A16	$980720			MOV	W0, [W14+4]
;audme21.c,67 :: 		if (modo == 2) temp = 1.1 * SinE3(1.9 * arg) + 0.95 * SinE3(3 * arg) + 0.2 * SinE3(4.5 * arg);
$0A18	$570068			SUB	W14, #8, W0
$0A1A	$784110			MOV.B	[W0], W2
$0A1C	$514062			SUB.B	W2, #2, W0
$0A1E	$3A003A			BRA NZ	L_Generar_Senal_2, L_Generar_Senal_2
$0A20	$90001E			MOV	[W14+2], W0
$0A22	$EB0080			CLR	W0+2
$0A24	$EB0100			CLR	W2
$0A26	$070671			RCALL	__long2float
$0A28	$233332			MOV	#13107, W2
$0A2A	$23FF33			MOV	#16371, W2+2
$0A2C	$0706D5			RCALL	__mul_fp
$0A2E	$0707F2			RCALL	__float2longint
$0A30	$781F80			PUSH	W0
$0A32	$07FF55			RCALL	_sinE3, 0401
$0A34	$B1002F			SUB	#2, W15
$0A36	$DE80CF			ASR	W0, #15, W0+2
$0A38	$EB8100			SETM	W2
$0A3A	$070667			RCALL	__long2float
$0A3C	$2CCCD2			MOV	#52429, W2
$0A3E	$23F8C3			MOV	#16268, W2+2
$0A40	$0706CB			RCALL	__mul_fp
$0A42	$980730			MOV	W0, [W14+6]
$0A44	$980741			MOV	W0+2, [W14+8]
$0A46	$200032			MOV	#3, W2
$0A48	$470062			ADD	W14, #2, W0
$0A4A	$B81010			MUL.UU	W2, [W0], W0
$0A4C	$781F80			PUSH	W0
$0A4E	$07FF47			RCALL	_sinE3, 0401
$0A50	$B1002F			SUB	#2, W15
$0A52	$DE80CF			ASR	W0, #15, W0+2
$0A54	$EB8100			SETM	W2
$0A56	$070659			RCALL	__long2float
$0A58	$233332			MOV	#13107, W2
$0A5A	$23F733			MOV	#16243, W2+2
$0A5C	$0706BD			RCALL	__mul_fp
$0A5E	$90013E			MOV	[W14+6], W2
$0A60	$9001CE			MOV	[W14+8], W2+2
$0A62	$070373			RCALL	__addsub_fp
$0A64	$980730			MOV	W0, [W14+6]
$0A66	$980741			MOV	W0+2, [W14+8]
$0A68	$90001E			MOV	[W14+2], W0
$0A6A	$EB0080			CLR	W0+2
$0A6C	$EB0100			CLR	W2
$0A6E	$07064D			RCALL	__long2float
$0A70	$200002			MOV	#0, W2
$0A72	$240903			MOV	#16528, W2+2
$0A74	$0706B1			RCALL	__mul_fp
$0A76	$0707CE			RCALL	__float2longint
$0A78	$781F80			PUSH	W0
$0A7A	$07FF31			RCALL	_sinE3, 0401
$0A7C	$B1002F			SUB	#2, W15
$0A7E	$DE80CF			ASR	W0, #15, W0+2
$0A80	$EB8100			SETM	W2
$0A82	$070643			RCALL	__long2float
$0A84	$2CCCD2			MOV	#52429, W2
$0A86	$23E4C3			MOV	#15948, W2+2
$0A88	$0706A7			RCALL	__mul_fp
$0A8A	$90013E			MOV	[W14+6], W2
$0A8C	$9001CE			MOV	[W14+8], W2+2
$0A8E	$07035D			RCALL	__addsub_fp
$0A90	$0707C1			RCALL	__float2longint
$0A92	$980720			MOV	W0, [W14+4]
$0A94	$	L_Generar_Senal_2:
;audme21.c,68 :: 		Samples[i++] = temp;  //Parte real
$0A94	$470260			ADD	W14, #0, W4
$0A96	$780014			MOV	[W4], W0
$0A98	$DD0141			SL	W0, #1, W2
$0A9A	$20C000			MOV	#@_Samples+0, W0
$0A9C	$400102			ADD	W0, W2, W2
$0A9E	$470064			ADD	W14, #4, W0
$0AA0	$780010			MOV	[W0], W0
$0AA2	$780900			MOV	W0, [W2]
$0AA4	$200010			MOV	#1, W0
$0AA6	$400A14			ADD	W0, [W4], [W4]
;audme21.c,69 :: 		if (modo == 0) Samples[i++] = 0;             //Parte imaginaria
$0AA8	$570068			SUB	W14, #8, W0
$0AAA	$784110			MOV.B	[W0], W2
$0AAC	$514060			SUB.B	W2, #0, W0
$0AAE	$3A0009			BRA NZ	L_Generar_Senal_3, L_Generar_Senal_3
$0AB0	$470260			ADD	W14, #0, W4
$0AB2	$780014			MOV	[W4], W0
$0AB4	$DD0141			SL	W0, #1, W2
$0AB6	$20C000			MOV	#@_Samples+0, W0
$0AB8	$400102			ADD	W0, W2, W2
$0ABA	$200000			MOV	#0, W0
$0ABC	$780900			MOV	W0, [W2]
$0ABE	$200010			MOV	#1, W0
$0AC0	$400A14			ADD	W0, [W4], [W4]
$0AC2	$	L_Generar_Senal_3:
;audme21.c,70 :: 		}
$0AC2	$04098A			GOTO	L_Generar_Senal_0
$0AC6	$	L_Generar_Senal_1:
;audme21.c,71 :: 		}//~
$0AC6	$	L_end__Generar_Senal:
$0AC6	$FA8000			ULNK
$0AC8	$060000			RETURN
$0ACA	$	_CargarDatos:
$0ACA	$FA0000			LNK	#0
;audme21.c,276 :: 		void CargarDatos(short f){
;audme21.c,279 :: 		Generar_Senal(f);
$0ACC	$570068			SUB	W14, #8, W0
$0ACE	$784010			MOV.B	[W0], W0
$0AD0	$FB0000			SE	W0, W0
$0AD2	$781F80			PUSH	W0
$0AD4	$07FF57			RCALL	_Generar_Senal, 0-103
$0AD6	$B1002F			SUB	#2, W15
;audme21.c,286 :: 		}//~
$0AD8	$	L_end__CargarDatos:
$0AD8	$FA8000			ULNK
$0ADA	$060000			RETURN
$0ADC	$	_Fft:
$0ADC	$FA0002			LNK	#2
;__Lib_FFT.c,78 :: 		
;__Lib_FFT.c,84 :: 		
$0ADE	$57006A			SUB	W14, #10, W0
$0AE0	$780010			MOV	[W0], W0
$0AE2	$780F00			MOV	W0, [W14]
;__Lib_FFT.c,85 :: 		
$0AE4	$F80044			PUSH	CORCON
;__Lib_FFT.c,90 :: 		
$0AE6	$200F40			MOV	#244, W0
$0AE8	$880220			MOV	W0, CORCON
;__Lib_FFT.c,92 :: 		
$0AEA	$	_FFT_L01:
;__Lib_FFT.c,94 :: 		
;__Lib_FFT.c,95 :: 		
$0AEA	$97B84E			MOV	[w14-8], w0
;__Lib_FFT.c,96 :: 		
$0AEC	$97B8AE			MOV	[w14-12], w1
;__Lib_FFT.c,97 :: 		
$0AEE	$97B93E			MOV	[w14-10], w2
;__Lib_FFT.c,100 :: 		
$0AF0	$781F81			PUSH	w1
;__Lib_FFT.c,103 :: 		
$0AF2	$200019			MOV	#0x1, w9
;__Lib_FFT.c,104 :: 		
$0AF4	$DD4C80			SL	w9, w0, w9
;__Lib_FFT.c,105 :: 		
$0AF6	$200013			MOV	#0x1, w3
;__Lib_FFT.c,107 :: 		
$0AF8	$780402			MOV	w2, w8
;__Lib_FFT.c,112 :: 		
$0AFA	$780680			MOV	w0, w13
;__Lib_FFT.c,114 :: 		
$0AFC	$	_FFT_L02:
;__Lib_FFT.c,119 :: 		
$0AFC	$D10489			LSR	w9, w9
;__Lib_FFT.c,120 :: 		
$0AFE	$DD4E42			SL	w9, #2, w12
;__Lib_FFT.c,125 :: 		
$0B00	$780501			MOV	w1, w10
;__Lib_FFT.c,128 :: 		
$0B02	$E90203			DEC	w3, w4
;__Lib_FFT.c,129 :: 		
$0B04	$088004			DO	w4, _FFT_L04
;__Lib_FFT.c,132 :: 		
$0B08	$46058A			ADD	w12, w10, w11
;__Lib_FFT.c,135 :: 		
$0B0A	$DD1842			SL	w3, #2, w0
;__Lib_FFT.c,139 :: 		
$0B0C	$E90209			DEC	w9, w4
;__Lib_FFT.c,140 :: 		
$0B0E	$088004			DO	w4, _FFT_L03
;__Lib_FFT.c,143 :: 		
$0B12	$C32046			CLR	a, [w8]+=2, w6, [w10]+=2,w4
;__Lib_FFT.c,148 :: 		
$0B14	$52023B			SUB	w4, [w11++], w4
;__Lib_FFT.c,150 :: 		
$0B16	$C135DF			MPY	w4*w6, a, [w8]-=2, w7,[w10]-=2,w5
;__Lib_FFT.c,156 :: 		
$0B18	$400408			ADD	w0, w8, w8
;__Lib_FFT.c,158 :: 		
$0B1A	$C28113			MPY	w4*w7, b
;__Lib_FFT.c,159 :: 		
$0B1C	$5282AB			SUB	w5, [w11--], w5
;__Lib_FFT.c,161 :: 		
$0B1E	$C54D26			MSC	w5*w7, a, [w11]+=2, w7
;__Lib_FFT.c,165 :: 		
$0B20	$C4853E			MAC	w5*w6, b, [w11]-=2, w5
;__Lib_FFT.c,169 :: 		
$0B22	$CD00BB			SAC	a, #1, [w11++]
;__Lib_FFT.c,171 :: 		
$0B24	$CD80BB			SAC	b, #1, [w11++]
;__Lib_FFT.c,173 :: 		
$0B26	$CA003A			LAC	[w10++], a
;__Lib_FFT.c,175 :: 		
$0B28	$CA802A			LAC	[w10--], b
;__Lib_FFT.c,177 :: 		
$0B2A	$C90007			ADD	w7, a
;__Lib_FFT.c,178 :: 		
$0B2C	$C98005			ADD	w5, b
;__Lib_FFT.c,179 :: 		
$0B2E	$CD00BA			SAC	a, #1, [w10++]
;__Lib_FFT.c,181 :: 		
$0B30	$	_FFT_L03:
;__Lib_FFT.c,182 :: 		
$0B30	$CD80BA			SAC	b, #1, [w10++]
;__Lib_FFT.c,186 :: 		
$0B32	$46050A			ADD	w12, w10, w10
;__Lib_FFT.c,187 :: 		
$0B34	$	_FFT_L04:
;__Lib_FFT.c,188 :: 		
$0B34	$780402			MOV	w2, w8
;__Lib_FFT.c,191 :: 		
$0B36	$D00183			SL	w3, w3
;__Lib_FFT.c,194 :: 		
$0B38	$E9068D			DEC	w13, w13
;__Lib_FFT.c,195 :: 		
$0B3A	$3CFFE0			BRA GT	gt, _FFT_L02
;__Lib_FFT.c,196 :: 		
$0B3C	$	_FFT_L05:
;__Lib_FFT.c,200 :: 		
$0B3C	$78004F			POP	w0
;__Lib_FFT.c,205 :: 		
;__Lib_FFT.c,206 :: 		
$0B3E	$F90044			POP	CORCON
;__Lib_FFT.c,209 :: 		
$0B40	$	L_end__Fft:
$0B40	$FA8000			ULNK
$0B42	$060000			RETURN
$0B44	$	_BitReverseComplex:
$0B44	$FA0000			LNK	#0
;__Lib_Bitreversecomplex.c,48 :: 		
;__Lib_Bitreversecomplex.c,50 :: 		
;__Lib_Bitreversecomplex.c,51 :: 		
;__Lib_Bitreversecomplex.c,53 :: 		
;__Lib_Bitreversecomplex.c,55 :: 		
;__Lib_Bitreversecomplex.c,56 :: 		
;__Lib_Bitreversecomplex.c,57 :: 		
;__Lib_Bitreversecomplex.c,59 :: 		
$0B46	$97B84E			MOV	[w14-8], w0
;__Lib_Bitreversecomplex.c,60 :: 		
$0B48	$97B8BE			MOV	[w14-10], w1
;__Lib_Bitreversecomplex.c,61 :: 		
;__Lib_Bitreversecomplex.c,63 :: 		
;__Lib_Bitreversecomplex.c,64 :: 		
$0B4A	$F80046			PUSH	MODCON
;__Lib_Bitreversecomplex.c,65 :: 		
$0B4C	$F80050			PUSH	XBREV
;__Lib_Bitreversecomplex.c,66 :: 		
$0B4E	$202002			MOV	#0x0200, w2
;__Lib_Bitreversecomplex.c,67 :: 		
$0B50	$880232			MOV	w2, MODCON
;__Lib_Bitreversecomplex.c,68 :: 		
$0B52	$280002			MOV	#0x8000, w2
;__Lib_Bitreversecomplex.c,69 :: 		
$0B54	$200013			MOV	#0x1, w3
;__Lib_Bitreversecomplex.c,70 :: 		
$0B56	$DD1980			SL	w3, w0, w3
;__Lib_Bitreversecomplex.c,71 :: 		
$0B58	$718102			IOR	w3, w2, w2
;__Lib_Bitreversecomplex.c,72 :: 		
$0B5A	$880282			MOV	w2, XBREV
;__Lib_Bitreversecomplex.c,73 :: 		
;__Lib_Bitreversecomplex.c,74 :: 		
;__Lib_Bitreversecomplex.c,76 :: 		
$0B5C	$780001			MOV	w1, w0
;__Lib_Bitreversecomplex.c,77 :: 		
;__Lib_Bitreversecomplex.c,79 :: 		
;__Lib_Bitreversecomplex.c,80 :: 		
$0B5E	$780101			MOV	w1, w2
;__Lib_Bitreversecomplex.c,81 :: 		
;__Lib_Bitreversecomplex.c,82 :: 		
$0B60	$200026			MOV	#2, w6
;__Lib_Bitreversecomplex.c,83 :: 		
$0B62	$200047			MOV	#4, w7
;__Lib_Bitreversecomplex.c,85 :: 		
$0B64	$E90183			DEC	w3, w3
;__Lib_Bitreversecomplex.c,86 :: 		
$0B66	$088003			DO	w3, _BRC_L03
;__Lib_Bitreversecomplex.c,87 :: 		
$0B6A	$E11001			CP	w2, w1
;__Lib_Bitreversecomplex.c,88 :: 		
$0B6C	$340004			BRA LE	le, _BRC_L02
;__Lib_Bitreversecomplex.c,89 :: 		
;__Lib_Bitreversecomplex.c,90 :: 		
;__Lib_Bitreversecomplex.c,91 :: 		
$0B6E	$BE0211			MOV.D	[w1], w4
;__Lib_Bitreversecomplex.c,92 :: 		
$0B70	$780892			MOV	[w2], [w1]
;__Lib_Bitreversecomplex.c,93 :: 		
$0B72	$7B30E2			MOV	[w2+w6], [w1+w6]
;__Lib_Bitreversecomplex.c,94 :: 		
$0B74	$BE8904			MOV.D	w4, [w2]
;__Lib_Bitreversecomplex.c,95 :: 		
;__Lib_Bitreversecomplex.c,96 :: 		
$0B76	$	_BRC_L02:
;__Lib_Bitreversecomplex.c,97 :: 		
$0B76	$408087			ADD	w1, w7, w1
;__Lib_Bitreversecomplex.c,98 :: 		
;__Lib_Bitreversecomplex.c,99 :: 		
$0B78	$	_BRC_L03:
;__Lib_Bitreversecomplex.c,100 :: 		
$0B78	$781912			MOV	[w2], [w2++]
;__Lib_Bitreversecomplex.c,101 :: 		
;__Lib_Bitreversecomplex.c,102 :: 		
;__Lib_Bitreversecomplex.c,104 :: 		
;__Lib_Bitreversecomplex.c,105 :: 		
$0B7A	$F90050			POP	XBREV
;__Lib_Bitreversecomplex.c,106 :: 		
$0B7C	$F90046			POP	MODCON
;__Lib_Bitreversecomplex.c,109 :: 		
$0B7E	$	L_end__BitReverseComplex:
$0B7E	$FA8000			ULNK
$0B80	$060000			RETURN
$0B82	$	_frexp:
$0B82	$FA0004			LNK	#4
;__Lib_Math.c,81 :: 		
;__Lib_Math.c,85 :: 		
$0B84	$470260			ADD	W14, #0, W4
$0B86	$57016A			SUB	W14, #10, W2
$0B88	$780032			MOV	[W2++], W0
$0B8A	$7800A2			MOV	[W2--], W0+2
$0B8C	$781A00			MOV	W0, [W4++]
$0B8E	$781201			MOV	W0+2, [W4--]
;__Lib_Math.c,86 :: 		
$0B90	$420062			ADD	W4, #2, W0
$0B92	$780110			MOV	[W0], W2
$0B94	$27F800			MOV	#32640, W0
$0B96	$610000			AND	W2, W0, W0
$0B98	$DE01C7			LSR	W0, #7, W3
$0B9A	$2007E2			MOV	#126, W2
$0B9C	$97B82E			MOV	[W14+-12], W0
$0B9E	$518802			SUB	W3, W2, [W0]
;__Lib_Math.c,87 :: 		
;__Lib_Math.c,88 :: 		
$0BA0	$4201E2			ADD	W4, #2, W3
$0BA2	$23F000			MOV	#16128, W0
$0BA4	$680113			XOR	W0, [W3], W2
$0BA6	$27F800			MOV	#32640, W0
$0BA8	$610000			AND	W2, W0, W0
$0BAA	$680993			XOR	W0, [W3], [W3]
;__Lib_Math.c,89 :: 		
$0BAC	$780034			MOV	[W4++], W0
$0BAE	$7800A4			MOV	[W4--], W0+2
;__Lib_Math.c,98 :: 		
$0BB0	$	L_end__frexp:
$0BB0	$FA8000			ULNK
$0BB2	$060000			RETURN
$0BB4	$	_ldexp:
$0BB4	$FA0004			LNK	#4
;__Lib_Math.c,101 :: 		
;__Lib_Math.c,104 :: 		
$0BB6	$4701E0			ADD	W14, #0, W3
$0BB8	$57016A			SUB	W14, #10, W2
$0BBA	$780032			MOV	[W2++], W0
$0BBC	$7800A2			MOV	[W2--], W0+2
$0BBE	$781980			MOV	W0, [W3++]
$0BC0	$781181			MOV	W0+2, [W3--]
;__Lib_Math.c,105 :: 		
$0BC2	$418062			ADD	W3, #2, W0
$0BC4	$780110			MOV	[W0], W2
$0BC6	$27F800			MOV	#32640, W0
$0BC8	$610000			AND	W2, W0, W0
$0BCA	$DE0147			LSR	W0, #7, W2
$0BCC	$57006C			SUB	W14, #12, W0
$0BCE	$410110			ADD	W2, [W0], W2
$0BD0	$9FBF22			MOV	W2, [W14+-12]
;__Lib_Math.c,106 :: 		
$0BD2	$510060			SUB	W2, #0, W0
$0BD4	$3D0003			BRA GE	L_ldexp_11, L_ldexp_11
;__Lib_Math.c,107 :: 		
$0BD6	$200000			MOV	#0, W0
$0BD8	$200001			MOV	#0, W0+2
$0BDA	$370023			BRA	L_end__ldexp
$0BDC	$	L_ldexp_11:
;__Lib_Math.c,109 :: 		
$0BDC	$200FF3			MOV	#255, W3
$0BDE	$57016C			SUB	W14, #12, W2
$0BE0	$118012			SUBR	W3, [W2], W0
$0BE2	$340013			BRA LE	L_ldexp_13, L_ldexp_13
;__Lib_Math.c,110 :: 		
$0BE4	$57016A			SUB	W14, #10, W2
$0BE6	$780032			MOV	[W2++], W0
$0BE8	$7800A2			MOV	[W2--], W0+2
$0BEA	$200002			MOV	#0, W2
$0BEC	$200003			MOV	#0, W2+2
$0BEE	$0702AA			RCALL	__compare_le_fp
$0BF0	$E00000			CP0	W0
$0BF2	$350002			BRA LT	L_ldexp_80, L_ldexp_80
$0BF4	$200000			MOV	#0, W0
$0BF6	$370001			BRA	L_ldexp_81, L_ldexp_81
$0BF8	$	L_ldexp_80:
$0BF8	$200010			MOV	#1, W0
$0BFA	$	L_ldexp_81:
$0BFA	$E00000			CP0	W0
$0BFC	$320003			BRA Z	L_ldexp_14, L_ldexp_14
;__Lib_Math.c,111 :: 		
$0BFE	$2FFFF0			MOV	#65535, W0
$0C00	$2FF7F1			MOV	#65407, W0+2
$0C02	$37000F			BRA	L_end__ldexp
$0C04	$	L_ldexp_14:
;__Lib_Math.c,113 :: 		
$0C04	$2FFFF0			MOV	#65535, W0
$0C06	$27F7F1			MOV	#32639, W0+2
$0C08	$37000C			BRA	L_end__ldexp
$0C0A	$	L_ldexp_13:
;__Lib_Math.c,115 :: 		
$0C0A	$470060			ADD	W14, #0, W0
$0C0C	$4001E2			ADD	W0, #2, W3
$0C0E	$57006C			SUB	W14, #12, W0
$0C10	$780010			MOV	[W0], W0
$0C12	$DD0047			SL	W0, #7, W0
$0C14	$680113			XOR	W0, [W3], W2
$0C16	$27F800			MOV	#32640, W0
$0C18	$610000			AND	W2, W0, W0
$0C1A	$680993			XOR	W0, [W3], [W3]
$0C1C	$	L_ldexp_16:
$0C1C	$	L_ldexp_12:
;__Lib_Math.c,116 :: 		
$0C1C	$470160			ADD	W14, #0, W2
$0C1E	$780032			MOV	[W2++], W0
$0C20	$7800A2			MOV	[W2--], W0+2
;__Lib_Math.c,134 :: 		
$0C22	$	L_end__ldexp:
$0C22	$FA8000			ULNK
$0C24	$060000			RETURN
$0C26	$	_sqrt:
$0C26	$FA000E			LNK	#14
;__Lib_Math.c,148 :: 		
;__Lib_Math.c,153 :: 		
$0C28	$57016A			SUB	W14, #10, W2
$0C2A	$780032			MOV	[W2++], W0
$0C2C	$7800A2			MOV	[W2--], W0+2
$0C2E	$200002			MOV	#0, W2
$0C30	$200003			MOV	#0, W2+2
$0C32	$070288			RCALL	__compare_le_fp
$0C34	$E00000			CP0	W0
$0C36	$340002			BRA LE	L_sqrt_82, L_sqrt_82
$0C38	$200000			MOV	#0, W0
$0C3A	$370001			BRA	L_sqrt_83, L_sqrt_83
$0C3C	$	L_sqrt_82:
$0C3C	$200010			MOV	#1, W0
$0C3E	$	L_sqrt_83:
$0C3E	$E00000			CP0	W0
$0C40	$320003			BRA Z	L_sqrt_19, L_sqrt_19
;__Lib_Math.c,154 :: 		
$0C42	$200000			MOV	#0, W0
$0C44	$200001			MOV	#0, W0+2
$0C46	$37006F			BRA	L_end__sqrt
$0C48	$	L_sqrt_19:
;__Lib_Math.c,155 :: 		
$0C48	$57016A			SUB	W14, #10, W2
$0C4A	$780032			MOV	[W2++], W0
$0C4C	$7800A2			MOV	[W2--], W0+2
$0C4E	$780F00			MOV	W0, [W14]
$0C50	$980711			MOV	W0+2, [W14+2]
;__Lib_Math.c,156 :: 		
$0C52	$780002			MOV	W2, W0
$0C54	$780130			MOV	[W0++], W2
$0C56	$7801A0			MOV	[W0--], W2+2
$0C58	$200000			MOV	#0, W0
$0C5A	$23F801			MOV	#16256, W0+2
$0C5C	$07035E			RCALL	__compare_ge_fp
$0C5E	$E00000			CP0	W0
$0C60	$3C0002			BRA GT	L_sqrt_84, L_sqrt_84
$0C62	$200000			MOV	#0, W0
$0C64	$370001			BRA	L_sqrt_85, L_sqrt_85
$0C66	$	L_sqrt_84:
$0C66	$200010			MOV	#1, W0
$0C68	$	L_sqrt_85:
$0C68	$E00000			CP0	W0
$0C6A	$320007			BRA Z	L_sqrt_20, L_sqrt_20
;__Lib_Math.c,157 :: 		
$0C6C	$78011E			MOV	[W14], W2
$0C6E	$90019E			MOV	[W14+2], W2+2
$0C70	$200000			MOV	#0, W0
$0C72	$23F801			MOV	#16256, W0+2
$0C74	$070639			RCALL	__div_fp
$0C76	$780F00			MOV	W0, [W14]
$0C78	$980711			MOV	W0+2, [W14+2]
$0C7A	$	L_sqrt_20:
;__Lib_Math.c,158 :: 		
$0C7A	$47006A			ADD	W14, #10, W0
$0C7C	$781F80			PUSH	W0
$0C7E	$470060			ADD	W14, #0, W0
$0C80	$781FB0			PUSH	[W0++]
$0C82	$781FA0			PUSH	[W0--]
$0C84	$07FF7E			RCALL	_frexp, 0707015
$0C86	$B1006F			SUB	#6, W15
$0C88	$780F00			MOV	W0, [W14]
$0C8A	$980711			MOV	W0+2, [W14+2]
;__Lib_Math.c,159 :: 		
$0C8C	$47016A			ADD	W14, #10, W2
$0C8E	$780112			MOV	[W2], W2
$0C90	$DE9141			ASR	W2, #1, W2
$0C92	$781F82			PUSH	W2
$0C94	$781F80			PUSH	W0
$0C96	$781F81			PUSH	W0+2
$0C98	$07FF8D			RCALL	_ldexp, 070704
$0C9A	$B1006F			SUB	#6, W15
$0C9C	$780F00			MOV	W0, [W14]
$0C9E	$980711			MOV	W0+2, [W14+2]
;__Lib_Math.c,160 :: 		
$0CA0	$57006A			SUB	W14, #10, W0
$0CA2	$780130			MOV	[W0++], W2
$0CA4	$7801A0			MOV	[W0--], W2+2
$0CA6	$200000			MOV	#0, W0
$0CA8	$23F801			MOV	#16256, W0+2
$0CAA	$070337			RCALL	__compare_ge_fp
$0CAC	$E00000			CP0	W0
$0CAE	$3C0002			BRA GT	L_sqrt_86, L_sqrt_86
$0CB0	$200000			MOV	#0, W0
$0CB2	$370001			BRA	L_sqrt_87, L_sqrt_87
$0CB4	$	L_sqrt_86:
$0CB4	$200010			MOV	#1, W0
$0CB6	$	L_sqrt_87:
$0CB6	$E00000			CP0	W0
$0CB8	$320007			BRA Z	L_sqrt_21, L_sqrt_21
;__Lib_Math.c,161 :: 		
$0CBA	$78011E			MOV	[W14], W2
$0CBC	$90019E			MOV	[W14+2], W2+2
$0CBE	$200000			MOV	#0, W0
$0CC0	$23F801			MOV	#16256, W0+2
$0CC2	$070612			RCALL	__div_fp
$0CC4	$780F00			MOV	W0, [W14]
$0CC6	$980711			MOV	W0+2, [W14+2]
$0CC8	$	L_sqrt_21:
;__Lib_Math.c,162 :: 		
$0CC8	$200140			MOV	#20, W0
$0CCA	$980740			MOV	W0, [W14+8]
;__Lib_Math.c,163 :: 		
$0CCC	$	L_sqrt_22:
;__Lib_Math.c,164 :: 		
$0CCC	$78011E			MOV	[W14], W2
$0CCE	$90019E			MOV	[W14+2], W2+2
$0CD0	$97B83E			MOV	[W14+-10], W0
$0CD2	$97B8CE			MOV	[W14+-8], W0+2
$0CD4	$070609			RCALL	__div_fp
$0CD6	$470260			ADD	W14, #0, W4
$0CD8	$980764			MOV	W4, [W14+12]
$0CDA	$780134			MOV	[W4++], W2
$0CDC	$7801A4			MOV	[W4--], W2+2
$0CDE	$070235			RCALL	__addsub_fp
$0CE0	$200002			MOV	#0, W2
$0CE2	$240003			MOV	#16384, W2+2
$0CE4	$070601			RCALL	__div_fp
$0CE6	$980720			MOV	W0, [W14+4]
$0CE8	$980731			MOV	W0+2, [W14+6]
;__Lib_Math.c,165 :: 		
$0CEA	$780200			MOV	W0, W4
$0CEC	$780281			MOV	W0+2, W4+2
$0CEE	$90006E			MOV	[W14+12], W0
$0CF0	$780100			MOV	W0, W2
$0CF2	$780032			MOV	[W2++], W0
$0CF4	$7800A2			MOV	[W2--], W0+2
$0CF6	$780104			MOV	W4, W2
$0CF8	$780185			MOV	W4+2, W2+2
$0CFA	$070224			RCALL	__compare_le_fp
$0CFC	$E00000			CP0	W0
$0CFE	$320002			BRA Z	L_sqrt_88, L_sqrt_88
$0D00	$200000			MOV	#0, W0
$0D02	$370001			BRA	L_sqrt_89, L_sqrt_89
$0D04	$	L_sqrt_88:
$0D04	$200010			MOV	#1, W0
$0D06	$	L_sqrt_89:
$0D06	$E00000			CP0	W0
$0D08	$320002			BRA Z	L_sqrt_24, L_sqrt_24
;__Lib_Math.c,166 :: 		
$0D0A	$040D22			GOTO	L_sqrt_23
$0D0E	$	L_sqrt_24:
;__Lib_Math.c,167 :: 		
$0D0E	$470164			ADD	W14, #4, W2
$0D10	$780032			MOV	[W2++], W0
$0D12	$7800A2			MOV	[W2--], W0+2
$0D14	$780F00			MOV	W0, [W14]
$0D16	$980711			MOV	W0+2, [W14+2]
;__Lib_Math.c,168 :: 		
$0D18	$470068			ADD	W14, #8, W0
$0D1A	$780010			MOV	[W0], W0
$0D1C	$500161			SUB	W0, #1, W2
$0D1E	$980742			MOV	W2, [W14+8]
$0D20	$3AFFD5			BRA NZ	L_sqrt_22, L_sqrt_22
$0D22	$	L_sqrt_23:
;__Lib_Math.c,170 :: 		
$0D22	$78001E			MOV	[W14], W0
$0D24	$90009E			MOV	[W14+2], W0+2
;__Lib_Math.c,171 :: 		
$0D26	$	L_end__sqrt:
$0D26	$FA8000			ULNK
$0D28	$060000			RETURN
$0D2A	$	_EncontrarFc:
$0D2A	$FA0012			LNK	#18
;audme21.c,288 :: 		short EncontrarFc(){
;audme21.c,291 :: 		char index = 0;
$0D2C	$470164			ADD	W14, #4, W2
$0D2E	$200000			MOV.B	#0, W0
$0D30	$784900			MOV.B	W0, [W2]
;audme21.c,294 :: 		FFT(7, TwiddleCoeff_128, Samples);
$0D32	$20C000			MOV	#@_Samples+0, W0
$0D34	$781F80			PUSH	W0
$0D36	$2AA240			MOV	#@_TwiddleCoeff_128, W0
$0D38	$781F80			PUSH	W0
$0D3A	$200070			MOV	#7, W0
$0D3C	$781F80			PUSH	W0
$0D3E	$07FECE			RCALL	_Fft, 0-101015015
$0D40	$B1006F			SUB	#6, W15
;audme21.c,295 :: 		BitReverseComplex(7, Samples);
$0D42	$20C000			MOV	#@_Samples+0, W0
$0D44	$781F80			PUSH	W0
$0D46	$200070			MOV	#7, W0
$0D48	$781F80			PUSH	W0
$0D4A	$07FEFC			RCALL	_BitReverseComplex, 0-101015
$0D4C	$B1004F			SUB	#4, W15
;audme21.c,297 :: 		j = 0;
$0D4E	$200000			MOV	#0, W0
$0D50	$980740			MOV	W0, [W14+8]
;audme21.c,298 :: 		for (i=0;i<256;i++){
$0D52	$200000			MOV	#0, W0
$0D54	$980730			MOV	W0, [W14+6]
$0D56	$	L_EncontrarFc_48:
$0D56	$470066			ADD	W14, #6, W0
$0D58	$780210			MOV	[W0], W4
$0D5A	$201002			MOV	#256, W2
$0D5C	$520002			SUB	W4, W2, W0
$0D5E	$31003E			BRA GEU	L_EncontrarFc_49, L_EncontrarFc_49
;audme21.c,299 :: 		Rer = Fract2Float(Samples[i]);
$0D60	$470066			ADD	W14, #6, W0
$0D62	$780010			MOV	[W0], W0
$0D64	$DD0141			SL	W0, #1, W2
$0D66	$20C000			MOV	#@_Samples+0, W0
$0D68	$400002			ADD	W0, W2, W0
$0D6A	$781F90			PUSH	[W0]
$0D6C	$070524			RCALL	_Fract2Float, 0704
$0D6E	$B1002F			SUB	#2, W15
$0D70	$780F00			MOV	W0, [W14]
$0D72	$980711			MOV	W0+2, [W14+2]
;audme21.c,300 :: 		Imr = Fract2Float(Samples[++i]);
$0D74	$470066			ADD	W14, #6, W0
$0D76	$780010			MOV	[W0], W0
$0D78	$400061			ADD	W0, #1, W0
$0D7A	$980730			MOV	W0, [W14+6]
$0D7C	$DD0141			SL	W0, #1, W2
$0D7E	$20C000			MOV	#@_Samples+0, W0
$0D80	$400002			ADD	W0, W2, W0
$0D82	$781F90			PUSH	[W0]
$0D84	$070518			RCALL	_Fract2Float, 0704
$0D86	$B1002F			SUB	#2, W15
$0D88	$980750			MOV	W0, [W14+10]
$0D8A	$980761			MOV	W0+2, [W14+12]
;audme21.c,301 :: 		Samples2[j++] = sqrt(Rer * Rer + Imr * Imr)*100;
$0D8C	$470068			ADD	W14, #8, W0
$0D8E	$980F00			MOV	W0, [W14+16]
$0D90	$780010			MOV	[W0], W0
$0D92	$DD0141			SL	W0, #1, W2
$0D94	$20E200			MOV	#@_Samples2+0, W0
$0D96	$400002			ADD	W0, W2, W0
$0D98	$980770			MOV	W0, [W14+14]
$0D9A	$78001E			MOV	[W14], W0
$0D9C	$90009E			MOV	[W14+2], W0+2
$0D9E	$78011E			MOV	[W14], W2
$0DA0	$90019E			MOV	[W14+2], W2+2
$0DA2	$07051A			RCALL	__mul_fp
$0DA4	$90015E			MOV	[W14+10], W2
$0DA6	$9001EE			MOV	[W14+12], W2+2
$0DA8	$980750			MOV	W0, [W14+10]
$0DAA	$980761			MOV	W0+2, [W14+12]
$0DAC	$780002			MOV	W2, W0
$0DAE	$780083			MOV	W2+2, W0+2
$0DB0	$070513			RCALL	__mul_fp
$0DB2	$90015E			MOV	[W14+10], W2
$0DB4	$9001EE			MOV	[W14+12], W2+2
$0DB6	$0701C9			RCALL	__addsub_fp
$0DB8	$781F80			PUSH	W0
$0DBA	$781F81			PUSH	W0+2
$0DBC	$07FF34			RCALL	_sqrt, 0707
$0DBE	$B1004F			SUB	#4, W15
$0DC0	$200002			MOV	#0, W2
$0DC2	$242C83			MOV	#17096, W2+2
$0DC4	$070509			RCALL	__mul_fp
$0DC6	$070626			RCALL	__float2longint
$0DC8	$90017E			MOV	[W14+14], W2
$0DCA	$780900			MOV	W0, [W2]
$0DCC	$200012			MOV	#1, W2
$0DCE	$90080E			MOV	[W14+16], W0
$0DD0	$410810			ADD	W2, [W0], [W0]
;audme21.c,302 :: 		}
$0DD2	$	L_EncontrarFc_50:
;audme21.c,298 :: 		for (i=0;i<256;i++){
$0DD2	$200012			MOV	#1, W2
$0DD4	$470066			ADD	W14, #6, W0
$0DD6	$410810			ADD	W2, [W0], [W0]
;audme21.c,302 :: 		}
$0DD8	$040D56			GOTO	L_EncontrarFc_48
$0DDC	$	L_EncontrarFc_49:
;audme21.c,303 :: 		j = Samples2[0]; //Busco la frec fundamental
$0DDC	$807100			MOV	_Samples2, W0
$0DDE	$980740			MOV	W0, [W14+8]
;audme21.c,304 :: 		for(i=1;i<128;i++){
$0DE0	$200010			MOV	#1, W0
$0DE2	$980730			MOV	W0, [W14+6]
$0DE4	$	L_EncontrarFc_51:
$0DE4	$200804			MOV	#128, W4
$0DE6	$470166			ADD	W14, #6, W2
$0DE8	$120012			SUBR	W4, [W2], W0
$0DEA	$310019			BRA GEU	L_EncontrarFc_52, L_EncontrarFc_52
;audme21.c,305 :: 		if (Samples2[i] > j){
$0DEC	$470066			ADD	W14, #6, W0
$0DEE	$780010			MOV	[W0], W0
$0DF0	$DD0141			SL	W0, #1, W2
$0DF2	$20E200			MOV	#@_Samples2+0, W0
$0DF4	$400002			ADD	W0, W2, W0
$0DF6	$780210			MOV	[W0], W4
$0DF8	$470168			ADD	W14, #8, W2
$0DFA	$520012			SUB	W4, [W2], W0
$0DFC	$36000B			BRA LEU	L_EncontrarFc_54, L_EncontrarFc_54
;audme21.c,306 :: 		j = Samples2[i];
$0DFE	$470266			ADD	W14, #6, W4
$0E00	$780014			MOV	[W4], W0
$0E02	$DD0141			SL	W0, #1, W2
$0E04	$20E200			MOV	#@_Samples2+0, W0
$0E06	$400102			ADD	W0, W2, W2
$0E08	$780012			MOV	[W2], W0
$0E0A	$980740			MOV	W0, [W14+8]
;audme21.c,307 :: 		index = i;
$0E0C	$470164			ADD	W14, #4, W2
$0E0E	$780004			MOV	W4, W0
$0E10	$784010			MOV.B	[W0], W0
$0E12	$784900			MOV.B	W0, [W2]
;audme21.c,308 :: 		}
$0E14	$	L_EncontrarFc_54:
;audme21.c,309 :: 		}
$0E14	$	L_EncontrarFc_53:
;audme21.c,304 :: 		for(i=1;i<128;i++){
$0E14	$200012			MOV	#1, W2
$0E16	$470066			ADD	W14, #6, W0
$0E18	$410810			ADD	W2, [W0], [W0]
;audme21.c,309 :: 		}
$0E1A	$040DE4			GOTO	L_EncontrarFc_51
$0E1E	$	L_EncontrarFc_52:
;audme21.c,310 :: 		index = index * 1.9;
$0E1E	$90404E			MOV.B	[W14+4], W0
$0E20	$FB8000			ZE	W0, W0
$0E22	$EB0080			CLR	W0+2
$0E24	$EB0100			CLR	W2
$0E26	$070471			RCALL	__long2float
$0E28	$233332			MOV	#13107, W2
$0E2A	$23FF33			MOV	#16371, W2+2
$0E2C	$0704D5			RCALL	__mul_fp
$0E2E	$0705F2			RCALL	__float2longint
$0E30	$470164			ADD	W14, #4, W2
$0E32	$784900			MOV.B	W0, [W2]
;audme21.c,311 :: 		return index;
;audme21.c,312 :: 		}//~
$0E34	$	L_end__EncontrarFc:
$0E34	$FA8000			ULNK
$0E36	$060000			RETURN
$0E38	$	_Segundos:
$0E38	$FA0002			LNK	#2
;audme21.c,264 :: 		void Segundos(unsigned cantidad){
;audme21.c,266 :: 		for(i=0; i < cantidad; i++) delay_ms(1000);
$0E3A	$4700E0			ADD	W14, #0, W1
$0E3C	$200000			MOV.B	#0, W0
$0E3E	$784880			MOV.B	W0, [W1]
$0E40	$	L_Segundos_43:
$0E40	$470060			ADD	W14, #0, W0
$0E42	$784110			MOV.B	[W0], W2
$0E44	$FB8102			ZE	W2, W2
$0E46	$5700E8			SUB	W14, #8, W1
$0E48	$510011			SUB	W2, [W1], W0
$0E4A	$31000B			BRA GEU	L_Segundos_44, L_Segundos_44
$0E4C	$20B2E0			MOV	#2862, W0
$0E4E	$781F80			PUSH	W0
$0E50	$201310			MOV	#305, W0
$0E52	$781F80			PUSH	W0
$0E54	$070A75			RCALL	_Delay_Cyc, 0-10101
$0E56	$B1004F			SUB	#4, W15
$0E58	$	L_Segundos_45:
$0E58	$200011			MOV.B	#1, W1
$0E5A	$470060			ADD	W14, #0, W0
$0E5C	$40C810			ADD.B	W1, [W0], [W0]
$0E5E	$040E40			GOTO	L_Segundos_43
$0E62	$	L_Segundos_44:
;audme21.c,267 :: 		}//~
$0E62	$	L_end__Segundos:
$0E62	$FA8000			ULNK
$0E64	$060000			RETURN
$0E66	$	_I2c_Restart:
;__Lib_I2c_p30.c,57 :: 		
;__Lib_I2c_p30.c,58 :: 		
$0E66	$	L_I2c_Restart_4:
$0E66	$801030			MOV	I2CCON, W0
$0E68	$6000FF			AND	W0, #31, W1
$0E6A	$320002			BRA Z	L_I2c_Restart_5, L_I2c_Restart_5
;__Lib_I2c_p30.c,59 :: 		
$0E6C	$040E66			GOTO	L_I2c_Restart_4
$0E70	$	L_I2c_Restart_5:
;__Lib_I2c_p30.c,60 :: 		
$0E70	$200021			MOV	#2, W1
$0E72	$202060			MOV	#@I2CCONbits+0, W0
$0E74	$708810			IOR	W1, [W0], [W0]
;__Lib_I2c_p30.c,62 :: 		
$0E76	$0706DE			RCALL	_I2C_Is_Finished, 0-1
;__Lib_I2c_p30.c,63 :: 		
$0E78	$	L_end__I2c_Restart:
$0E78	$060000			RETURN
$0E7A	$	_I2c_Read:
$0E7A	$FA0000			LNK	#0
;__Lib_I2c_p30.c,91 :: 		
;__Lib_I2c_p30.c,92 :: 		
$0E7C	$	L_I2c_Read_9:
$0E7C	$801030			MOV	I2CCON, W0
$0E7E	$6000FF			AND	W0, #31, W1
$0E80	$320002			BRA Z	L_I2c_Read_10, L_I2c_Read_10
;__Lib_I2c_p30.c,93 :: 		
$0E82	$040E7C			GOTO	L_I2c_Read_9
$0E86	$	L_I2c_Read_10:
;__Lib_I2c_p30.c,95 :: 		
$0E86	$200081			MOV	#8, W1
$0E88	$202060			MOV	#@I2CCONbits+0, W0
$0E8A	$708810			IOR	W1, [W0], [W0]
;__Lib_I2c_p30.c,96 :: 		
$0E8C	$0706D3			RCALL	_I2C_Is_Finished, 0-1
;__Lib_I2c_p30.c,99 :: 		
$0E8E	$	L_I2c_Read_11:
$0E8E	$801030			MOV	I2CCON, W0
$0E90	$6000FF			AND	W0, #31, W1
$0E92	$320002			BRA Z	L_I2c_Read_12, L_I2c_Read_12
;__Lib_I2c_p30.c,100 :: 		
$0E94	$040E8E			GOTO	L_I2c_Read_11
$0E98	$	L_I2c_Read_12:
;__Lib_I2c_p30.c,101 :: 		
$0E98	$97B84E			MOV	[W14+-8], W0
$0E9A	$E00000			CP0	W0
$0E9C	$320005			BRA Z	L_I2c_Read_13, L_I2c_Read_13
;__Lib_I2c_p30.c,102 :: 		
$0E9E	$200201			MOV	#32, W1
$0EA0	$202060			MOV	#@I2CCONbits+0, W0
$0EA2	$708810			IOR	W1, [W0], [W0]
;__Lib_I2c_p30.c,103 :: 		
$0EA4	$040EAE			GOTO	L_I2c_Read_14
$0EA8	$	L_I2c_Read_13:
;__Lib_I2c_p30.c,105 :: 		
$0EA8	$2FFDF1			MOV	#65503, W1
$0EAA	$202060			MOV	#@I2CCONbits+0, W0
$0EAC	$608810			AND	W1, [W0], [W0]
;__Lib_I2c_p30.c,106 :: 		
$0EAE	$	L_I2c_Read_14:
;__Lib_I2c_p30.c,107 :: 		
$0EAE	$200101			MOV	#16, W1
$0EB0	$202060			MOV	#@I2CCONbits+0, W0
$0EB2	$708810			IOR	W1, [W0], [W0]
;__Lib_I2c_p30.c,108 :: 		
$0EB4	$0706BF			RCALL	_I2C_Is_Finished, 0-1
;__Lib_I2c_p30.c,111 :: 		
$0EB6	$202000			MOV	#@I2CRCV, W0
$0EB8	$784010			MOV.B	[W0], W0
;__Lib_I2c_p30.c,112 :: 		
$0EBA	$	L_end__I2c_Read:
$0EBA	$FA8000			ULNK
$0EBC	$060000			RETURN
$0EBE	$	_LeerByte:
$0EBE	$FA0002			LNK	#2
;audme21.c,558 :: 		unsigned char LeerByte(char Adrr1, char Adrr0){
;audme21.c,560 :: 		I2c_Start();                   // issue I2C start signal
$0EC0	$0706A3			RCALL	_I2c_Start, 0-1
;audme21.c,561 :: 		I2c_Write(0xA2);               // send byte via I2C  (device address + W)
$0EC2	$200A20			MOV.B	#162, W0
$0EC4	$781F80			PUSH	W0
$0EC6	$0706A6			RCALL	_I2c_Write, 0100
$0EC8	$B1002F			SUB	#2, W15
;audme21.c,562 :: 		I2c_Write(Adrr1);               // send byte (data address)
$0ECA	$570068			SUB	W14, #8, W0
$0ECC	$784010			MOV.B	[W0], W0
$0ECE	$FB8000			ZE	W0, W0
$0ED0	$781F80			PUSH	W0
$0ED2	$0706A0			RCALL	_I2c_Write, 0100
$0ED4	$B1002F			SUB	#2, W15
;audme21.c,563 :: 		I2c_Write(Adrr0);
$0ED6	$57006A			SUB	W14, #10, W0
$0ED8	$784010			MOV.B	[W0], W0
$0EDA	$FB8000			ZE	W0, W0
$0EDC	$781F80			PUSH	W0
$0EDE	$07069A			RCALL	_I2c_Write, 0100
$0EE0	$B1002F			SUB	#2, W15
;audme21.c,564 :: 		I2c_Restart();                 // issue I2C signal repeated start
$0EE2	$07FFC1			RCALL	_I2c_Restart, 0-1
;audme21.c,565 :: 		I2c_Write(0xA3);               // send byte (device address + R)
$0EE4	$200A30			MOV.B	#163, W0
$0EE6	$781F80			PUSH	W0
$0EE8	$070695			RCALL	_I2c_Write, 0100
$0EEA	$B1002F			SUB	#2, W15
;audme21.c,566 :: 		temp1 = I2c_Read(1);           // Read the data (NO acknowledge)
$0EEC	$200010			MOV	#1, W0
$0EEE	$781F80			PUSH	W0
$0EF0	$07FFC4			RCALL	_I2c_Read, 0001
$0EF2	$B1002F			SUB	#2, W15
$0EF4	$4700E0			ADD	W14, #0, W1
$0EF6	$784880			MOV.B	W0, [W1]
;audme21.c,567 :: 		I2c_Stop();
$0EF8	$0706A9			RCALL	_I2c_Stop, 0-1
;audme21.c,568 :: 		return temp1;
$0EFA	$470060			ADD	W14, #0, W0
$0EFC	$784010			MOV.B	[W0], W0
;audme21.c,569 :: 		}//~
$0EFE	$	L_end__LeerByte:
$0EFE	$FA8000			ULNK
$0F00	$060000			RETURN
$0F02	$	_IntToShort:
$0F02	$FA0000			LNK	#0
;audme21.c,580 :: 		short IntToShort(int valor16){
;audme21.c,583 :: 		if (valor16 == 0) return 0;
$0F04	$570068			SUB	W14, #8, W0
$0F06	$780110			MOV	[W0], W2
$0F08	$510060			SUB	W2, #0, W0
$0F0A	$3A0002			BRA NZ	L_IntToShort_128, L_IntToShort_128
$0F0C	$200000			MOV.B	#0, W0
$0F0E	$37001A			BRA	L_end__IntToShort
$0F10	$	L_IntToShort_128:
;audme21.c,584 :: 		if (valor16 > 0){
$0F10	$570068			SUB	W14, #8, W0
$0F12	$780110			MOV	[W0], W2
$0F14	$510060			SUB	W2, #0, W0
$0F16	$340009			BRA LE	L_IntToShort_129, L_IntToShort_129
;audme21.c,585 :: 		fTemp = valor16 * 0.0668;
$0F18	$97B84E			MOV	[W14+-8], W0
$0F1A	$DE80CF			ASR	W0, #15, W0+2
$0F1C	$EB8100			SETM	W2
$0F1E	$0703F5			RCALL	__long2float
$0F20	$2CE702			MOV	#52848, W2
$0F22	$23D883			MOV	#15752, W2+2
$0F24	$070459			RCALL	__mul_fp
;audme21.c,586 :: 		sTemp = fTemp;
$0F26	$070576			RCALL	__float2longint
;audme21.c,587 :: 		return fTemp;
$0F28	$37000D			BRA	L_end__IntToShort
;audme21.c,588 :: 		} else if (valor16 < 0){
$0F2A	$	L_IntToShort_129:
$0F2A	$570068			SUB	W14, #8, W0
$0F2C	$780110			MOV	[W0], W2
$0F2E	$510060			SUB	W2, #0, W0
$0F30	$3D0009			BRA GE	L_IntToShort_131, L_IntToShort_131
;audme21.c,589 :: 		fTemp = valor16 * 0.06736842;
$0F32	$97B84E			MOV	[W14+-8], W0
$0F34	$DE80CF			ASR	W0, #15, W0+2
$0F36	$EB8100			SETM	W2
$0F38	$0703E8			RCALL	__long2float
$0F3A	$2F8742			MOV	#63604, W2
$0F3C	$23D893			MOV	#15753, W2+2
$0F3E	$07044C			RCALL	__mul_fp
;audme21.c,590 :: 		sTemp = fTemp;
$0F40	$070569			RCALL	__float2longint
;audme21.c,591 :: 		return fTemp;
$0F42	$370000			BRA	L_end__IntToShort
;audme21.c,592 :: 		}
$0F44	$	L_IntToShort_131:
$0F44	$	L_IntToShort_130:
;audme21.c,593 :: 		}//~
$0F44	$	L_end__IntToShort:
$0F44	$FA8000			ULNK
$0F46	$060000			RETURN
$0F48	$	_WEeprom:
$0F48	$FA0002			LNK	#2
;audme21.c,527 :: 		void WEeprom(char Adrr1, char Adrr0){
;audme21.c,530 :: 		I2c_Start();
$0F4A	$07065E			RCALL	_I2c_Start, 0-1
;audme21.c,531 :: 		I2c_Write(0xA2);            // Envia control, A2,A1,A0 (todos del chip)
$0F4C	$200A20			MOV.B	#162, W0
$0F4E	$781F80			PUSH	W0
$0F50	$070661			RCALL	_I2c_Write, 0100
$0F52	$B1002F			SUB	#2, W15
;audme21.c,533 :: 		I2c_Write(Adrr1);          // Envia la direccion donde grabar
$0F54	$570068			SUB	W14, #8, W0
$0F56	$784010			MOV.B	[W0], W0
$0F58	$FB8000			ZE	W0, W0
$0F5A	$781F80			PUSH	W0
$0F5C	$07065B			RCALL	_I2c_Write, 0100
$0F5E	$B1002F			SUB	#2, W15
;audme21.c,534 :: 		I2c_Write(Adrr0);
$0F60	$57006A			SUB	W14, #10, W0
$0F62	$784010			MOV.B	[W0], W0
$0F64	$FB8000			ZE	W0, W0
$0F66	$781F80			PUSH	W0
$0F68	$070655			RCALL	_I2c_Write, 0100
$0F6A	$B1002F			SUB	#2, W15
;audme21.c,535 :: 		for(i=0;i<48;i++) I2c_Write(Samples2[i]);
$0F6C	$4700E0			ADD	W14, #0, W1
$0F6E	$200000			MOV.B	#0, W0
$0F70	$784880			MOV.B	W0, [W1]
$0F72	$	L_WEeprom_122:
$0F72	$470060			ADD	W14, #0, W0
$0F74	$784110			MOV.B	[W0], W2
$0F76	$200301			MOV	#48, W1
$0F78	$514001			SUB.B	W2, W1, W0
$0F7A	$31000F			BRA GEU	L_WEeprom_123, L_WEeprom_123
$0F7C	$470060			ADD	W14, #0, W0
$0F7E	$784010			MOV.B	[W0], W0
$0F80	$FB8000			ZE	W0, W0
$0F82	$DD00C1			SL	W0, #1, W1
$0F84	$20E200			MOV	#@_Samples2+0, W0
$0F86	$400081			ADD	W0, W1, W1
$0F88	$784011			MOV.B	[W1], W0
$0F8A	$781F80			PUSH	W0
$0F8C	$070643			RCALL	_I2c_Write, 0100
$0F8E	$B1002F			SUB	#2, W15
$0F90	$	L_WEeprom_124:
$0F90	$200011			MOV.B	#1, W1
$0F92	$470060			ADD	W14, #0, W0
$0F94	$40C810			ADD.B	W1, [W0], [W0]
$0F96	$040F72			GOTO	L_WEeprom_122
$0F9A	$	L_WEeprom_123:
;audme21.c,536 :: 		I2c_Stop();
$0F9A	$070658			RCALL	_I2c_Stop, 0-1
;audme21.c,538 :: 		}//~
$0F9C	$	L_end__WEeprom:
$0F9C	$FA8000			ULNK
$0F9E	$060000			RETURN
$0FA0	$	_GuardarDatos:
$0FA0	$FA000E			LNK	#14
$0FA2	$470060			ADD	W14, #0, W0
$0FA4	$2AB241			MOV	#@?ICSlstr29_audme21, W1
$0FA6	$090005			REPEAT	#5
$0FA8	$785831			MOV.B	[W1++], [W0++]
;audme21.c,463 :: 		void GuardarDatos(short modo){
;audme21.c,473 :: 		if (modo == 99){
$0FAA	$570068			SUB	W14, #8, W0
$0FAC	$784190			MOV.B	[W0], W3
$0FAE	$200632			MOV	#99, W2
$0FB0	$51C002			SUB.B	W3, W2, W0
$0FB2	$3A002E			BRA NZ	L_GuardarDatos_108, L_GuardarDatos_108
;audme21.c,474 :: 		Adrr = LeerByte(0x00,0x00);
$0FB4	$200000			MOV.B	#0, W0
$0FB6	$781F80			PUSH	W0
$0FB8	$200000			MOV.B	#0, W0
$0FBA	$781F80			PUSH	W0
$0FBC	$07FF80			RCALL	_LeerByte, 000000
$0FBE	$B1004F			SUB	#4, W15
$0FC0	$FB8000			ZE	W0, W0
$0FC2	$887B50			MOV	W0, _Adrr
;audme21.c,475 :: 		Adrr = Adrr + 1;
$0FC4	$200012			MOV	#1, W2
$0FC6	$20F6A0			MOV	#@_Adrr, W0
$0FC8	$410810			ADD	W2, [W0], [W0]
;audme21.c,476 :: 		delay_ms(100);
$0FCA	$2210E0			MOV	#8462, W0
$0FCC	$781F80			PUSH	W0
$0FCE	$2001E0			MOV	#30, W0
$0FD0	$781F80			PUSH	W0
$0FD2	$0709B6			RCALL	_Delay_Cyc, 0-10101
$0FD4	$B1004F			SUB	#4, W15
;audme21.c,478 :: 		EscribirByte(0x00,0x00,Adrr);
$0FD6	$F80F6A			PUSH	_Adrr
$0FD8	$200000			MOV.B	#0, W0
$0FDA	$781F80			PUSH	W0
$0FDC	$200000			MOV.B	#0, W0
$0FDE	$781F80			PUSH	W0
$0FE0	$07063F			RCALL	_EscribirByte, 0-1000001
$0FE2	$B1006F			SUB	#6, W15
;audme21.c,479 :: 		LCD_Custom_Out(1,1,"NdR: ");
$0FE4	$470060			ADD	W14, #0, W0
$0FE6	$781F80			PUSH	W0
$0FE8	$200010			MOV.B	#1, W0
$0FEA	$781F80			PUSH	W0
$0FEC	$200010			MOV.B	#1, W0
$0FEE	$781F80			PUSH	W0
$0FF0	$0707E1			RCALL	_Lcd_Custom_Out, 0-10000015
$0FF2	$B1006F			SUB	#6, W15
;audme21.c,480 :: 		IntToStr(Adrr,txt6);
$0FF4	$470066			ADD	W14, #6, W0
$0FF6	$781F80			PUSH	W0
$0FF8	$F80F6A			PUSH	_Adrr
$0FFA	$0706C0			RCALL	_IntToStr, 0-104015
$0FFC	$B1004F			SUB	#4, W15
;audme21.c,481 :: 		LCD_Custom_Out(1,6,txt6);
$0FFE	$470066			ADD	W14, #6, W0
$1000	$781F80			PUSH	W0
$1002	$200060			MOV.B	#6, W0
$1004	$781F80			PUSH	W0
$1006	$200010			MOV.B	#1, W0
$1008	$781F80			PUSH	W0
$100A	$0707D4			RCALL	_Lcd_Custom_Out, 0-10000015
$100C	$B1006F			SUB	#6, W15
;audme21.c,482 :: 		return;
$100E	$37004F			BRA	L_end__GuardarDatos
;audme21.c,483 :: 		} else if(modo < 10){
$1010	$	L_GuardarDatos_108:
$1010	$570068			SUB	W14, #8, W0
$1012	$784110			MOV.B	[W0], W2
$1014	$51406A			SUB.B	W2, #10, W0
$1016	$3D004B			BRA GE	L_GuardarDatos_110, L_GuardarDatos_110
;audme21.c,484 :: 		delay_ms(500);
$1018	$2258E0			MOV	#9614, W0
$101A	$781F80			PUSH	W0
$101C	$200980			MOV	#152, W0
$101E	$781F80			PUSH	W0
$1020	$07098F			RCALL	_Delay_Cyc, 0-10101
$1022	$B1004F			SUB	#4, W15
;audme21.c,486 :: 		for(i=0;i<50;i++){
$1024	$200000			MOV	#0, W0
$1026	$980760			MOV	W0, [W14+12]
$1028	$	L_GuardarDatos_111:
$1028	$200323			MOV	#50, W3
$102A	$47016C			ADD	W14, #12, W2
$102C	$118012			SUBR	W3, [W2], W0
$102E	$310014			BRA GEU	L_GuardarDatos_112, L_GuardarDatos_112
;audme21.c,487 :: 		stemp = IntToShort(Samples2[i]);
$1030	$47006C			ADD	W14, #12, W0
$1032	$780010			MOV	[W0], W0
$1034	$DD0141			SL	W0, #1, W2
$1036	$20E200			MOV	#@_Samples2+0, W0
$1038	$400002			ADD	W0, W2, W0
$103A	$781F90			PUSH	[W0]
$103C	$07FF62			RCALL	_IntToShort, 0304
$103E	$B1002F			SUB	#2, W15
;audme21.c,488 :: 		samples2[i] = stemp;
$1040	$47016C			ADD	W14, #12, W2
$1042	$780112			MOV	[W2], W2
$1044	$DD11C1			SL	W2, #1, W3
$1046	$20E202			MOV	#@_Samples2+0, W2
$1048	$410103			ADD	W2, W3, W2
$104A	$FB0000			SE	W0, W0
$104C	$780900			MOV	W0, [W2]
;audme21.c,489 :: 		}
$104E	$	L_GuardarDatos_113:
;audme21.c,486 :: 		for(i=0;i<50;i++){
$104E	$200012			MOV	#1, W2
$1050	$47006C			ADD	W14, #12, W0
$1052	$410810			ADD	W2, [W0], [W0]
;audme21.c,489 :: 		}
$1054	$041028			GOTO	L_GuardarDatos_111
$1058	$	L_GuardarDatos_112:
;audme21.c,490 :: 		WEeprom(Adrr, modo * 50);
$1058	$570068			SUB	W14, #8, W0
$105A	$784110			MOV.B	[W0], W2
$105C	$FB0102			SE	W2, W2
$105E	$200320			MOV	#50, W0
$1060	$B81000			MUL.UU	W2, W0, W0
$1062	$781F80			PUSH	W0
$1064	$807B50			MOV	_Adrr, W0
$1066	$781F80			PUSH	W0
$1068	$07FF6F			RCALL	_WEeprom, 0-10000
$106A	$B1004F			SUB	#4, W15
;audme21.c,491 :: 		delay_ms(500);
$106C	$2258E0			MOV	#9614, W0
$106E	$781F80			PUSH	W0
$1070	$200980			MOV	#152, W0
$1072	$781F80			PUSH	W0
$1074	$070965			RCALL	_Delay_Cyc, 0-10101
$1076	$B1004F			SUB	#4, W15
;audme21.c,492 :: 		EscribirByte(Adrr,48,Indices[modo]);
$1078	$570068			SUB	W14, #8, W0
$107A	$784010			MOV.B	[W0], W0
$107C	$FB0000			SE	W0, W0
$107E	$DD0141			SL	W0, #1, W2
$1080	$20F200			MOV	#@_indices+0, W0
$1082	$400002			ADD	W0, W2, W0
$1084	$781F90			PUSH	[W0]
$1086	$200300			MOV.B	#48, W0
$1088	$781F80			PUSH	W0
$108A	$807B50			MOV	_Adrr, W0
$108C	$781F80			PUSH	W0
$108E	$0705E8			RCALL	_EscribirByte, 0-1000001
$1090	$B1006F			SUB	#6, W15
;audme21.c,493 :: 		EscribirByte(Adrr,49,Indices[modo + 1]);
$1092	$570068			SUB	W14, #8, W0
$1094	$784010			MOV.B	[W0], W0
$1096	$FB0000			SE	W0, W0
$1098	$400061			ADD	W0, #1, W0
$109A	$DD0141			SL	W0, #1, W2
$109C	$20F200			MOV	#@_indices+0, W0
$109E	$400002			ADD	W0, W2, W0
$10A0	$781F90			PUSH	[W0]
$10A2	$200310			MOV.B	#49, W0
$10A4	$781F80			PUSH	W0
$10A6	$807B50			MOV	_Adrr, W0
$10A8	$781F80			PUSH	W0
$10AA	$0705DA			RCALL	_EscribirByte, 0-1000001
$10AC	$B1006F			SUB	#6, W15
;audme21.c,494 :: 		}
$10AE	$	L_GuardarDatos_110:
$10AE	$	L_GuardarDatos_109:
;audme21.c,495 :: 		return;
;audme21.c,496 :: 		}//~
$10AE	$	L_end__GuardarDatos:
$10AE	$FA8000			ULNK
$10B0	$060000			RETURN
$10B2	$	_Derivando:
$10B2	$FA0008			LNK	#8
;audme21.c,323 :: 		void Derivando(void){
;audme21.c,332 :: 		unsigned j=0;
$10B4	$200000			MOV	#0, W0
$10B6	$980710			MOV	W0, [W14+2]
;audme21.c,336 :: 		for(i=0;i<25;i++) impulsos[i] = 0;
$10B8	$200000			MOV	#0, W0
$10BA	$780F00			MOV	W0, [W14]
$10BC	$	L_Derivando_56:
$10BC	$470060			ADD	W14, #0, W0
$10BE	$780090			MOV	[W0], W1
$10C0	$508079			SUB	W1, #25, W0
$10C2	$31000C			BRA GEU	L_Derivando_57, L_Derivando_57
$10C4	$470060			ADD	W14, #0, W0
$10C6	$780010			MOV	[W0], W0
$10C8	$DD00C1			SL	W0, #1, W1
$10CA	$20F340			MOV	#@_impulsos+0, W0
$10CC	$400081			ADD	W0, W1, W1
$10CE	$200000			MOV	#0, W0
$10D0	$780880			MOV	W0, [W1]
$10D2	$	L_Derivando_58:
$10D2	$200011			MOV	#1, W1
$10D4	$470060			ADD	W14, #0, W0
$10D6	$408810			ADD	W1, [W0], [W0]
$10D8	$0410BC			GOTO	L_Derivando_56
$10DC	$	L_Derivando_57:
;audme21.c,338 :: 		temp1 = samples[1] - samples[0];
$10DC	$806012			MOV	_Samples+2, W2
$10DE	$20C001			MOV	#@_Samples, W1
$10E0	$470064			ADD	W14, #4, W0
$10E2	$510811			SUB	W2, [W1], [W0]
;audme21.c,339 :: 		for(i=1;i<254;i++){   //
$10E4	$200010			MOV	#1, W0
$10E6	$780F00			MOV	W0, [W14]
$10E8	$	L_Derivando_59:
$10E8	$200FE2			MOV	#254, W2
$10EA	$4700E0			ADD	W14, #0, W1
$10EC	$110011			SUBR	W2, [W1], W0
$10EE	$310028			BRA GEU	L_Derivando_60, L_Derivando_60
;audme21.c,340 :: 		temp2 = Samples[i+1] - Samples[i];
$10F0	$4701E0			ADD	W14, #0, W3
$10F2	$780013			MOV	[W3], W0
$10F4	$400061			ADD	W0, #1, W0
$10F6	$DD00C1			SL	W0, #1, W1
$10F8	$20C000			MOV	#@_Samples+0, W0
$10FA	$400101			ADD	W0, W1, W2
$10FC	$780003			MOV	W3, W0
$10FE	$780010			MOV	[W0], W0
$1100	$DD00C1			SL	W0, #1, W1
$1102	$20C000			MOV	#@_Samples+0, W0
$1104	$400001			ADD	W0, W1, W0
$1106	$780090			MOV	[W0], W1
$1108	$470066			ADD	W14, #6, W0
$110A	$108812			SUBR	W1, [W2], [W0]
;audme21.c,341 :: 		if (temp1 < 0 && temp2 > 0) impulsos[j++] = i+1;  // habría que probar sin el  +1!!!
$110C	$470064			ADD	W14, #4, W0
$110E	$780090			MOV	[W0], W1
$1110	$508060			SUB	W1, #0, W0
$1112	$3D000E			BRA GE	L_Derivando_64, L_Derivando_64
$1114	$470066			ADD	W14, #6, W0
$1116	$780090			MOV	[W0], W1
$1118	$508060			SUB	W1, #0, W0
$111A	$34000A			BRA LE	L_Derivando_64, L_Derivando_64
$111C	$	L1001_ex_L_Derivando_64:
$111C	$470162			ADD	W14, #2, W2
$111E	$780012			MOV	[W2], W0
$1120	$DD00C1			SL	W0, #1, W1
$1122	$20F340			MOV	#@_impulsos+0, W0
$1124	$400081			ADD	W0, W1, W1
$1126	$470060			ADD	W14, #0, W0
$1128	$780010			MOV	[W0], W0
$112A	$4008E1			ADD	W0, #1, [W1]
$112C	$200010			MOV	#1, W0
$112E	$400912			ADD	W0, [W2], [W2]
$1130	$	L_Derivando_64:
;audme21.c,342 :: 		temp1 = temp2;
$1130	$470066			ADD	W14, #6, W0
$1132	$780010			MOV	[W0], W0
$1134	$980720			MOV	W0, [W14+4]
;audme21.c,343 :: 		}
$1136	$	L_Derivando_61:
;audme21.c,339 :: 		for(i=1;i<254;i++){   //
$1136	$200011			MOV	#1, W1
$1138	$470060			ADD	W14, #0, W0
$113A	$408810			ADD	W1, [W0], [W0]
;audme21.c,343 :: 		}
$113C	$0410E8			GOTO	L_Derivando_59
$1140	$	L_Derivando_60:
;audme21.c,344 :: 		}//~
$1140	$	L_end__Derivando:
$1140	$FA8000			ULNK
$1142	$060000			RETURN
$1144	$	__Compare_Le_Fp:
;math_double.c,1281 :: 		
;math_double.c,1282 :: 		
$1144	$200014			MOV	#1, w4
;math_double.c,1283 :: 		
$1146	$0700B5			RCALL	__Compare_Fp, 0-1
;math_double.c,1284 :: 		
$1148	$	L_end___Compare_Le_Fp:
$1148	$060000			RETURN
$114A	$	__AddSub_FP:
;math_double.c,544 :: 		
;math_double.c,546 :: 		
$114A	$	AddSubFP__addsf3:
;math_double.c,547 :: 		
$114A	$BE9F88			MOV.D	w8, [w15++]
;math_double.c,548 :: 		
$114C	$BE9F8A			MOV.D	w10, [w15++]
;math_double.c,549 :: 		
$114E	$781F8C			MOV	w12, [w15++]
;math_double.c,550 :: 		
$1150	$070059			RCALL	AddSubFP__funpack2
;math_double.c,551 :: 		
$1152	$330060			BRA N	N, AddSubFP__fPropagateNaN
;math_double.c,552 :: 		
$1154	$E15064			CP	w10, #4
;math_double.c,553 :: 		
$1156	$32004F			BRA Z	Z, AddSubFP_aisinfinite
;math_double.c,554 :: 		
$1158	$	AddSubFP_checkspecialb:
;math_double.c,555 :: 		
$1158	$E12064			CP	w4, #4
;math_double.c,556 :: 		
$115A	$320052			BRA Z	Z, AddSubFP_return2_3
;math_double.c,557 :: 		
$115C	$6C8203			XOR	w9, w3, w4
;math_double.c,558 :: 		
$115E	$3B0007			BRA NN	NN, AddSubFP_getsign
;math_double.c,559 :: 		
$1160	$D00509			SL	w9, w10
;math_double.c,560 :: 		
$1162	$D00603			SL	w3, w12
;math_double.c,561 :: 		
$1164	$540F82			SUB	w8, w2, [w15]
;math_double.c,562 :: 		
$1166	$5D060C			SUBB	w10, w12, w12
;math_double.c,563 :: 		
$1168	$390002			BRA NC	NC, AddSubFP_getsign
;math_double.c,564 :: 		
$116A	$320002			BRA Z	Z, AddSubFP_gotsign
;math_double.c,565 :: 		
$116C	$780189			MOV	w9, w3
;math_double.c,566 :: 		
$116E	$	AddSubFP_getsign:
;math_double.c,567 :: 		
$116E	$780603			MOV	w3, w12
;math_double.c,568 :: 		
$1170	$	AddSubFP_gotsign:
;math_double.c,569 :: 		
$1170	$558285			SUB	w11, w5, w5
;math_double.c,570 :: 		
$1172	$3D0004			BRA GE	GE, AddSubFP_expcanonical
;math_double.c,571 :: 		
$1174	$FD0300			EXCH	w0, w6
;math_double.c,572 :: 		
$1176	$FD0381			EXCH	w1, w7
;math_double.c,573 :: 		
$1178	$EA0285			NEG	w5, w5
;math_double.c,574 :: 		
$117A	$42858B			ADD	w5, w11, w11
;math_double.c,575 :: 		
$117C	$	AddSubFP_expcanonical:
;math_double.c,576 :: 		
$117C	$720F84			IOR	w4, w4, [w15]
;math_double.c,577 :: 		
$117E	$3B0002			BRA NN	NN, AddSubFP_nonegate
;math_double.c,578 :: 		
$1180	$100060			SUBR	w0, #0, w0
;math_double.c,579 :: 		
$1182	$1880E0			SUBBR	w1, #0, w1
;math_double.c,580 :: 		
$1184	$	AddSubFP_nonegate:
;math_double.c,581 :: 		
$1184	$B81160			MUL.UU	w2, #0, w2
;math_double.c,582 :: 		
$1186	$EB0500			CLR	w10
;math_double.c,583 :: 		
$1188	$E1287A			CP	w5, #26
;math_double.c,584 :: 		
$118A	$39000A			BRA NC	NC, AddSubFP_aligniter
;math_double.c,585 :: 		
$118C	$780006			MOV	w6, w0
;math_double.c,586 :: 		
$118E	$DD5DC7			SL	w11, #7, w11
;math_double.c,587 :: 		
$1190	$B207F7			AND	#0x7f, w7
;math_double.c,588 :: 		
$1192	$758087			IOR	w11, w7, w1
;math_double.c,589 :: 		
$1194	$37002D			BRA	AddSubFP_signoff
;math_double.c,590 :: 		
$1196	$	AddSubFP_align:
;math_double.c,591 :: 		
$1196	$718182			IOR	w3, w2, w3
;math_double.c,592 :: 		
$1198	$78010A			MOV	w10, w2
;math_double.c,593 :: 		
$119A	$600561			AND	w0, #1, w10
;math_double.c,594 :: 		
$119C	$D18081			ASR	w1, w1
;math_double.c,595 :: 		
$119E	$D38000			RRC	w0, w0
;math_double.c,596 :: 		
$11A0	$	AddSubFP_aligniter:
;math_double.c,597 :: 		
$11A0	$E90285			DEC	w5, w5
;math_double.c,598 :: 		
$11A2	$3BFFF9			BRA NN	NN, AddSubFP_align
;math_double.c,599 :: 		
$11A4	$	AddSubFP_aligned:
;math_double.c,600 :: 		
$11A4	$400406			ADD	w0, w6, w8
;math_double.c,601 :: 		
$11A6	$488487			ADDC	w1, w7, w9
;math_double.c,602 :: 		
$11A8	$3B0002			BRA NN	NN, AddSubFP_normalizesum
;math_double.c,603 :: 		
$11AA	$140460			SUBR	w8, #0, w8
;math_double.c,604 :: 		
$11AC	$1C84E0			SUBBR	w9, #0, w9
;math_double.c,605 :: 		
$11AE	$	AddSubFP_normalizesum:
;math_double.c,606 :: 		
$11AE	$A38809			BTST.Z	w9, #8
;math_double.c,607 :: 		
$11B0	$320007			BRA Z	Z, AddSubFP_checknormal
;math_double.c,608 :: 		
$11B2	$71818A			IOR	w3, w10, w3
;math_double.c,609 :: 		
$11B4	$718182			IOR	w3, w2, w3
;math_double.c,610 :: 		
$11B6	$640161			AND	w8, #1, w2
;math_double.c,611 :: 		
$11B8	$D10489			LSR	w9, w9
;math_double.c,612 :: 		
$11BA	$D38408			RRC	w8, w8
;math_double.c,613 :: 		
$11BC	$E8058B			INC	w11, w11
;math_double.c,614 :: 		
$11BE	$370017			BRA	AddSubFP_round
;math_double.c,615 :: 		
$11C0	$	AddSubFP_checknormal:
;math_double.c,616 :: 		
$11C0	$A37809			BTST.Z	w9, #7
;math_double.c,617 :: 		
$11C2	$3A0013			BRA NZ	NZ, AddSubFP_discardguard
;math_double.c,618 :: 		
$11C4	$	AddSubFP_underflow:
;math_double.c,619 :: 		
$11C4	$E0000B			CP0	w11
;math_double.c,620 :: 		
$11C6	$340013			BRA LE	le, AddSubFP_round
;math_double.c,621 :: 		
$11C8	$E9058B			DEC	w11, w11
;math_double.c,622 :: 		
$11CA	$440408			ADD	w8, w8, w8
;math_double.c,623 :: 		
$11CC	$4C8489			ADDC	w9, w9, w9
;math_double.c,624 :: 		
$11CE	$74440A			IOR.B	w8, w10, w8
;math_double.c,625 :: 		
$11D0	$A37809			BTST.Z	w9, #7
;math_double.c,626 :: 		
$11D2	$3A000D			BRA NZ	NZ, AddSubFP_round
;math_double.c,627 :: 		
$11D4	$	AddSubFP_normalizeloop:
;math_double.c,628 :: 		
$11D4	$E0000B			CP0	w11
;math_double.c,629 :: 		
$11D6	$340007			BRA LE	le, AddSubFP_normalizeexit
;math_double.c,630 :: 		
$11D8	$E9058B			DEC	w11, w11
;math_double.c,631 :: 		
$11DA	$440408			ADD	w8, w8, w8
;math_double.c,632 :: 		
$11DC	$4C8489			ADDC	w9, w9, w9
;math_double.c,633 :: 		
$11DE	$3A0001			BRA NZ	NZ, AddSubFP_normalizetest
;math_double.c,634 :: 		
$11E0	$20000B			MOV	#0x0, w11
;math_double.c,635 :: 		
$11E2	$	AddSubFP_normalizetest:
;math_double.c,636 :: 		
$11E2	$A37809			BTST.Z	w9, #7
;math_double.c,637 :: 		
$11E4	$32FFF7			BRA Z	Z, AddSubFP_normalizeloop
;math_double.c,638 :: 		
$11E6	$	AddSubFP_normalizeexit:
;math_double.c,639 :: 		
$11E6	$EB0100			CLR	w2
;math_double.c,640 :: 		
$11E8	$370002			BRA	AddSubFP_round
;math_double.c,641 :: 		
$11EA	$	AddSubFP_discardguard:
;math_double.c,642 :: 		
$11EA	$718182			IOR	w3, w2, w3
;math_double.c,643 :: 		
$11EC	$78010A			MOV	w10, w2
;math_double.c,644 :: 		
$11EE	$	AddSubFP_round:
;math_double.c,645 :: 		
$11EE	$070022			RCALL	AddSubFP__fpack
;math_double.c,646 :: 		
$11F0	$	AddSubFP_signoff:
;math_double.c,647 :: 		
$11F0	$A7F00C			BTSC	w12, #15
;math_double.c,648 :: 		
$11F2	$A0F001			BSET	w1, #15
;math_double.c,649 :: 		
$11F4	$370018			BRA	AddSubFP__fbopExit
;math_double.c,650 :: 		
$11F6	$	AddSubFP_aisinfinite:
;math_double.c,651 :: 		
$11F6	$E12064			CP	w4, #4
;math_double.c,652 :: 		
$11F8	$3A0002			BRA NZ	NZ, AddSubFP_return8_3
;math_double.c,653 :: 		
$11FA	$6C8F83			XOR	w9, w3, [w15]
;math_double.c,654 :: 		
$11FC	$330018			BRA N	N, AddSubFP__fbopReturnNaN
;math_double.c,655 :: 		
$11FE	$	AddSubFP_return8_3:
;math_double.c,656 :: 		
$11FE	$BE0108			MOV.D	w8, w2
;math_double.c,657 :: 		
$1200	$	AddSubFP_return2_3:
;math_double.c,658 :: 		
$1200	$BE0002			MOV.D	w2, w0
;math_double.c,659 :: 		
$1202	$370011			BRA	AddSubFP__fbopExit
;math_double.c,660 :: 		
$1204	$	AddSubFP__funpack2:
;math_double.c,661 :: 		
$1204	$BE0400			MOV.D	w0, w8
;math_double.c,662 :: 		
$1206	$07003C			RCALL	AddSubFP__funpack
;math_double.c,663 :: 		
$1208	$BE0300			MOV.D	w0, w6
;math_double.c,664 :: 		
$120A	$BE0504			MOV.D	w4, w10
;math_double.c,665 :: 		
$120C	$BE0002			MOV.D	w2, w0
;math_double.c,666 :: 		
$120E	$070038			RCALL	AddSubFP__funpack
;math_double.c,667 :: 		
$1210	$754F84			IOR.B	w10, w4, [w15]
;math_double.c,668 :: 		
$1212	$060000			RETURN
;math_double.c,669 :: 		
$1214	$	AddSubFP__fPropagateNaN:
;math_double.c,670 :: 		
$1214	$BE0002			MOV.D	w2, w0
;math_double.c,671 :: 		
$1216	$E15064			CP	w10, #4
;math_double.c,672 :: 		
$1218	$360005			BRA LEU	LEU, AddSubFP_return0_1
;math_double.c,673 :: 		
$121A	$E12064			CP	w4, #4
;math_double.c,674 :: 		
$121C	$360002			BRA LEU	LEU, AddSubFP_return8_1
;math_double.c,675 :: 		
$121E	$A36809			BTST.Z	w9, #6
;math_double.c,676 :: 		
$1220	$3A0001			BRA NZ	NZ, AddSubFP_return0_1
;math_double.c,677 :: 		
$1222	$	AddSubFP_return8_1:
;math_double.c,678 :: 		
$1222	$BE0008			MOV.D	w8, w0
;math_double.c,679 :: 		
$1224	$	AddSubFP_return0_1:
;math_double.c,680 :: 		
$1224	$A06001			BSET	w1, #6
;math_double.c,681 :: 		
$1226	$	AddSubFP__fbopExit:
;math_double.c,682 :: 		
$1226	$78064F			MOV	[--w15], w12
;math_double.c,683 :: 		
$1228	$BE054F			MOV.D	[--w15], w10
;math_double.c,684 :: 		
$122A	$BE044F			MOV.D	[--w15], w8
;math_double.c,685 :: 		
$122C	$060000			RETURN
;math_double.c,686 :: 		
$122E	$	AddSubFP__fbopReturnNaN:
;math_double.c,687 :: 		
$122E	$2FFFF0			MOV	#0xffff, w0
;math_double.c,688 :: 		
$1230	$27FFF1			MOV	#0x7fff, w1
;math_double.c,689 :: 		
$1232	$37FFF9			BRA	AddSubFP__fbopExit
;math_double.c,690 :: 		
$1234	$	AddSubFP__fpack:
;math_double.c,691 :: 		
$1234	$200081			MOV	#0x8, w1
;math_double.c,692 :: 		
$1236	$558061			SUB	w11, #1, w0
;math_double.c,693 :: 		
$1238	$3D000B			BRA GE	GE, AddSubFP_notsubnormal_1
;math_double.c,694 :: 		
$123A	$20000B			MOV	#0x0, w11
;math_double.c,695 :: 		
$123C	$2FFE61			MOV	#0xffe6, w1
;math_double.c,696 :: 		
$123E	$E10001			CP	w0, w1
;math_double.c,697 :: 		
$1240	$34001D			BRA LE	le, AddSubFP_zerosig
;math_double.c,698 :: 		
$1242	$	AddSubFP_subnormal_1:
;math_double.c,699 :: 		
$1242	$718182			IOR	w3, w2, w3
;math_double.c,700 :: 		
$1244	$640161			AND	w8, #1, w2
;math_double.c,701 :: 		
$1246	$D10489			LSR	w9, w9
;math_double.c,702 :: 		
$1248	$D38408			RRC	w8, w8
;math_double.c,703 :: 		
$124A	$E80000			INC	w0, w0
;math_double.c,704 :: 		
$124C	$3AFFFA			BRA NZ	NZ, AddSubFP_subnormal_1
;math_double.c,705 :: 		
$124E	$200071			MOV	#0x7, w1
;math_double.c,706 :: 		
$1250	$	AddSubFP_notsubnormal_1:
;math_double.c,707 :: 		
$1250	$640061			AND	w8, #1, w0
;math_double.c,708 :: 		
$1252	$700003			IOR	w0, w3, w0
;math_double.c,709 :: 		
$1254	$600002			AND	w0, w2, w0
;math_double.c,710 :: 		
$1256	$320009			BRA Z	Z, AddSubFP_packupandgo
;math_double.c,711 :: 		
$1258	$440461			ADD	w8, #1, w8
;math_double.c,712 :: 		
$125A	$4C84E0			ADDC	w9, #0, w9
;math_double.c,713 :: 		
$125C	$A58809			BTST.Z	w9, w1
;math_double.c,714 :: 		
$125E	$320005			BRA Z	Z, AddSubFP_packupandgo
;math_double.c,715 :: 		
$1260	$E8058B			INC	w11, w11
;math_double.c,716 :: 		
$1262	$E10868			CP	w1, #8
;math_double.c,717 :: 		
$1264	$3A0002			BRA NZ	NZ, AddSubFP_packupandgo
;math_double.c,718 :: 		
$1266	$D10489			LSR	w9, w9
;math_double.c,719 :: 		
$1268	$D38408			RRC	w8, w8
;math_double.c,720 :: 		
$126A	$	AddSubFP_packupandgo:
;math_double.c,721 :: 		
$126A	$200FF2			MOV	#0xff, w2
;math_double.c,722 :: 		
$126C	$E15802			CP	w11, w2
;math_double.c,723 :: 		
$126E	$3D0005			BRA GE	GE, AddSubFP_overflow
;math_double.c,724 :: 		
$1270	$DD5DC7			SL	w11, #7, w11
;math_double.c,725 :: 		
$1272	$B207F9			AND	#0x7f, w9
;math_double.c,726 :: 		
$1274	$758089			IOR	w11, w9, w1
;math_double.c,727 :: 		
$1276	$780008			MOV	w8, w0
;math_double.c,728 :: 		
$1278	$060000			RETURN
;math_double.c,729 :: 		
$127A	$	AddSubFP_overflow:
;math_double.c,730 :: 		
$127A	$27F80B			MOV	#0x7f80, w11
;math_double.c,731 :: 		
$127C	$	AddSubFP_zerosig:
;math_double.c,732 :: 		
$127C	$78008B			MOV	w11, w1
;math_double.c,733 :: 		
$127E	$050000			RETLW	#0x0, w0
;math_double.c,734 :: 		
$1280	$	AddSubFP__funpack:
;math_double.c,735 :: 		
$1280	$DE0AC7			LSR	w1, #7, w5
;math_double.c,736 :: 		
$1282	$B207F1			AND	#0x7f, w1
;math_double.c,737 :: 		
$1284	$B20FF5			AND	#0xff, w5
;math_double.c,738 :: 		
$1286	$320008			BRA Z	Z, AddSubFP_zeroorsub
;math_double.c,739 :: 		
$1288	$42CFE1			ADD.B	w5, #1, [w15]
;math_double.c,740 :: 		
$128A	$320002			BRA Z	Z, AddSubFP_nanorinf
;math_double.c,741 :: 		
$128C	$	AddSubFP_finitereturn:
;math_double.c,742 :: 		
$128C	$A07001			BSET	w1, #7
;math_double.c,743 :: 		
$128E	$050024			RETLW	#0x2, w4
;math_double.c,744 :: 		
$1290	$	AddSubFP_nanorinf:
;math_double.c,745 :: 		
$1290	$700F81			IOR	w0, w1, [w15]
;math_double.c,746 :: 		
$1292	$320001			BRA Z	Z, AddSubFP_infinite
;math_double.c,747 :: 		
$1294	$050804			RETLW	#0x80, w4
;math_double.c,748 :: 		
$1296	$	AddSubFP_infinite:
;math_double.c,749 :: 		
$1296	$050044			RETLW	#0x4, w4
;math_double.c,750 :: 		
$1298	$	AddSubFP_zeroorsub:
;math_double.c,751 :: 		
$1298	$700F81			IOR	w0, w1, [w15]
;math_double.c,752 :: 		
$129A	$3A0002			BRA NZ	NZ, AddSubFP_subnormal_2
;math_double.c,753 :: 		
$129C	$050014			RETLW	#0x1, w4
;math_double.c,754 :: 		
$129E	$	AddSubFP_normalize:
;math_double.c,755 :: 		
$129E	$E90285			DEC	w5, w5
;math_double.c,756 :: 		
$12A0	$	AddSubFP_subnormal_2:
;math_double.c,757 :: 		
$12A0	$400000			ADD	w0, w0, w0
;math_double.c,758 :: 		
$12A2	$48C081			ADDC.B	w1, w1, w1
;math_double.c,759 :: 		
$12A4	$3BFFFC			BRA NN	NN, AddSubFP_normalize
;math_double.c,760 :: 		
$12A6	$A07001			BSET	w1, #7
;math_double.c,761 :: 		
$12A8	$050024			RETLW	#0x2, w4
;math_double.c,763 :: 		
$12AA	$	L_end___AddSub_FP:
$12AA	$060000			RETURN
$12AC	$	__Sub_FP:
;math_double.c,784 :: 		
;math_double.c,785 :: 		
$12AC	$A2F003			BTG	w3, #15
;math_double.c,786 :: 		
$12AE	$07FF4D			RCALL	__AddSub_FP, 0-1
;math_double.c,787 :: 		
$12B0	$	L_end___Sub_FP:
$12B0	$060000			RETURN
$12B2	$	__Compare_Fp:
;math_double.c,1211 :: 		
;math_double.c,1213 :: 		
$12B2	$	CompareFp__fcompare:
;math_double.c,1214 :: 		
$12B2	$781F84			MOV	w4, [w15++]
;math_double.c,1215 :: 		
$12B4	$070014			RCALL	CompareFp__funpack2
;math_double.c,1216 :: 		
$12B6	$78004F			MOV	[--w15], w0
;math_double.c,1217 :: 		
$12B8	$330011			BRA N	N, CompareFp_exit
;math_double.c,1218 :: 		
$12BA	$2FFFF0			MOV	#0xffff, w0
;math_double.c,1219 :: 		
$12BC	$6C8F83			XOR	w9, w3, [w15]
;math_double.c,1220 :: 		
$12BE	$3B0006			BRA NN	NN, CompareFp_comparemag
;math_double.c,1221 :: 		
$12C0	$650504			AND	w10, w4, w10
;math_double.c,1222 :: 		
$12C2	$A7000A			BTSC	w10, #0
;math_double.c,1223 :: 		
$12C4	$370008			BRA	CompareFp_returnEqual
;math_double.c,1224 :: 		
$12C6	$A6F009			BTSS	w9, #15
;math_double.c,1225 :: 		
$12C8	$200010			MOV	#0x1, w0
;math_double.c,1226 :: 		
$12CA	$370008			BRA	CompareFp_exit
;math_double.c,1227 :: 		
$12CC	$	CompareFp_comparemag:
;math_double.c,1228 :: 		
$12CC	$540F82			SUB	w8, w2, [w15]
;math_double.c,1229 :: 		
$12CE	$5C8F83			SUBB	w9, w3, [w15]
;math_double.c,1230 :: 		
$12D0	$390003			BRA LTU	LTU, CompareFp_adjust
;math_double.c,1231 :: 		
$12D2	$200010			MOV	#0x1, w0
;math_double.c,1232 :: 		
$12D4	$3E0001			BRA GTU	GTU, CompareFp_adjust
;math_double.c,1233 :: 		
$12D6	$	CompareFp_returnEqual:
;math_double.c,1234 :: 		
$12D6	$200000			MOV	#0x0, w0
;math_double.c,1235 :: 		
$12D8	$	CompareFp_adjust:
;math_double.c,1236 :: 		
$12D8	$A7F009			BTSC	w9, #15
;math_double.c,1237 :: 		
$12DA	$EA0000			NEG	w0, w0
;math_double.c,1238 :: 		
$12DC	$	CompareFp_exit:
;math_double.c,1239 :: 		
$12DC	$060000			RETURN
;math_double.c,1240 :: 		
$12DE	$	CompareFp__funpack2:
;math_double.c,1241 :: 		
$12DE	$BE0400			MOV.D	w0, w8
;math_double.c,1242 :: 		
$12E0	$070006			RCALL	CompareFp__funpack
;math_double.c,1243 :: 		
$12E2	$BE0300			MOV.D	w0, w6
;math_double.c,1244 :: 		
$12E4	$BE0504			MOV.D	w4, w10
;math_double.c,1245 :: 		
$12E6	$BE0002			MOV.D	w2, w0
;math_double.c,1246 :: 		
$12E8	$070002			RCALL	CompareFp__funpack
;math_double.c,1247 :: 		
$12EA	$754F84			IOR.B	w10, w4, [w15]
;math_double.c,1248 :: 		
$12EC	$060000			RETURN
;math_double.c,1249 :: 		
$12EE	$	CompareFp__funpack:
;math_double.c,1250 :: 		
$12EE	$DE0AC7			LSR	w1, #7, w5
;math_double.c,1251 :: 		
$12F0	$B207F1			AND	#0x7f, w1
;math_double.c,1252 :: 		
$12F2	$B20FF5			AND	#0xff, w5
;math_double.c,1253 :: 		
$12F4	$320008			BRA Z	Z, CompareFp_zeroorsub
;math_double.c,1254 :: 		
$12F6	$42CFE1			ADD.B	w5, #1, [w15]
;math_double.c,1255 :: 		
$12F8	$320002			BRA Z	Z, CompareFp_nanorinf
;math_double.c,1256 :: 		
$12FA	$	CompareFp_finitereturn:
;math_double.c,1257 :: 		
$12FA	$A07001			BSET	w1, #7
;math_double.c,1258 :: 		
$12FC	$050024			RETLW	#0x2, w4
;math_double.c,1259 :: 		
$12FE	$	CompareFp_nanorinf:
;math_double.c,1260 :: 		
$12FE	$700F81			IOR	w0, w1, [w15]
;math_double.c,1261 :: 		
$1300	$320001			BRA Z	Z, CompareFp_infinite
;math_double.c,1262 :: 		
$1302	$050804			RETLW	#0x80, w4
;math_double.c,1263 :: 		
$1304	$	CompareFp_infinite:
;math_double.c,1264 :: 		
$1304	$050044			RETLW	#0x4, w4
;math_double.c,1265 :: 		
$1306	$	CompareFp_zeroorsub:
;math_double.c,1266 :: 		
$1306	$700F81			IOR	w0, w1, [w15]
;math_double.c,1267 :: 		
$1308	$3A0002			BRA NZ	NZ, CompareFp_subnormal
;math_double.c,1268 :: 		
$130A	$050014			RETLW	#0x1, w4
;math_double.c,1269 :: 		
$130C	$	CompareFp_normalize:
;math_double.c,1270 :: 		
$130C	$E90285			DEC	w5, w5
;math_double.c,1271 :: 		
$130E	$	CompareFp_subnormal:
;math_double.c,1272 :: 		
$130E	$400000			ADD	w0, w0, w0
;math_double.c,1273 :: 		
$1310	$48C081			ADDC.B	w1, w1, w1
;math_double.c,1274 :: 		
$1312	$3BFFFC			BRA NN	NN, CompareFp_normalize
;math_double.c,1275 :: 		
$1314	$A07001			BSET	w1, #7
;math_double.c,1276 :: 		
$1316	$050024			RETLW	#0x2, w4
;math_double.c,1278 :: 		
$1318	$	L_end___Compare_Fp:
$1318	$060000			RETURN
$131A	$	__Compare_Ge_Fp:
;math_double.c,1287 :: 		
;math_double.c,1288 :: 		
$131A	$2FFFF4			MOV	#0xffff, w4
;math_double.c,1289 :: 		
$131C	$07FFCA			RCALL	__Compare_Fp, 0-1
;math_double.c,1290 :: 		
$131E	$	L_end___Compare_Ge_Fp:
$131E	$060000			RETURN
$1320	$	_tipo:
$1320	$FA000E			LNK	#14
;audme21.c,346 :: 		int tipo(short ini, short fin, short T){
;audme21.c,359 :: 		float tol=0.15;
$1322	$2999A0			MOV	#39322, W0
$1324	$23E191			MOV	#15897, W0+2
$1326	$780F00			MOV	W0, [W14]
$1328	$980711			MOV	W0+2, [W14+2]
;audme21.c,361 :: 		dif = fin - ini;
$132A	$57006A			SUB	W14, #10, W0
$132C	$784110			MOV.B	[W0], W2
$132E	$FB0102			SE	W2, W2
$1330	$570068			SUB	W14, #8, W0
$1332	$784010			MOV.B	[W0], W0
$1334	$FB0000			SE	W0, W0
$1336	$510000			SUB	W2, W0, W0
$1338	$980750			MOV	W0, [W14+10]
$133A	$980720			MOV	W0, [W14+4]
;audme21.c,362 :: 		if (dif > 2*(T + T*tol)) return 0;
$133C	$97F04E			MOV.B	[W14+-12], W0
$133E	$FB0000			SE	W0, W0
$1340	$DE80CF			ASR	W0, #15, W0+2
$1342	$EB8100			SETM	W2
$1344	$0701E2			RCALL	__long2float
$1346	$980730			MOV	W0, [W14+6]
$1348	$980741			MOV	W0+2, [W14+8]
$134A	$2999A2			MOV	#39322, W2
$134C	$23E193			MOV	#15897, W2+2
$134E	$070244			RCALL	__mul_fp
$1350	$90013E			MOV	[W14+6], W2
$1352	$9001CE			MOV	[W14+8], W2+2
$1354	$07FEFA			RCALL	__addsub_fp
$1356	$200002			MOV	#0, W2
$1358	$240003			MOV	#16384, W2+2
$135A	$07023E			RCALL	__mul_fp
$135C	$90015E			MOV	[W14+10], W2
$135E	$980730			MOV	W0, [W14+6]
$1360	$980741			MOV	W0+2, [W14+8]
$1362	$780002			MOV	W2, W0
$1364	$EB0080			CLR	W0+2
$1366	$EB0100			CLR	W2
$1368	$0701D0			RCALL	__long2float
$136A	$780100			MOV	W0, W2
$136C	$780181			MOV	W0+2, W2+2
$136E	$90003E			MOV	[W14+6], W0
$1370	$9000CE			MOV	[W14+8], W0+2
$1372	$07FEE8			RCALL	__compare_le_fp
$1374	$E00000			CP0	W0
$1376	$350002			BRA LT	L_tipo_140, L_tipo_140
$1378	$200000			MOV	#0, W0
$137A	$370001			BRA	L_tipo_141, L_tipo_141
$137C	$	L_tipo_140:
$137C	$200010			MOV	#1, W0
$137E	$	L_tipo_141:
$137E	$E00000			CP0	W0
$1380	$320002			BRA Z	L_tipo_65, L_tipo_65
$1382	$200000			MOV	#0, W0
$1384	$370075			BRA	L_end__tipo
$1386	$	L_tipo_65:
;audme21.c,363 :: 		if(dif >= (T-T*tol)){
$1386	$97F04E			MOV.B	[W14+-12], W0
$1388	$FB0000			SE	W0, W0
$138A	$DE80CF			ASR	W0, #15, W0+2
$138C	$EB8100			SETM	W2
$138E	$0701BD			RCALL	__long2float
$1390	$980750			MOV	W0, [W14+10]
$1392	$980761			MOV	W0+2, [W14+12]
$1394	$78011E			MOV	[W14], W2
$1396	$90019E			MOV	[W14+2], W2+2
$1398	$07021F			RCALL	__mul_fp
$139A	$980730			MOV	W0, [W14+6]
$139C	$980741			MOV	W0+2, [W14+8]
$139E	$90005E			MOV	[W14+10], W0
$13A0	$9000EE			MOV	[W14+12], W0+2
$13A2	$781F82			PUSH	W2
$13A4	$781F83			PUSH	W2+2
$13A6	$90013E			MOV	[W14+6], W2
$13A8	$9001CE			MOV	[W14+8], W2+2
$13AA	$07FF80			RCALL	__sub_fp
$13AC	$BE014F			POP.D	W2
$13AE	$980730			MOV	W0, [W14+6]
$13B0	$980741			MOV	W0+2, [W14+8]
$13B2	$90002E			MOV	[W14+4], W0
$13B4	$EB0080			CLR	W0+2
$13B6	$EB0100			CLR	W2
$13B8	$0701A8			RCALL	__long2float
$13BA	$780100			MOV	W0, W2
$13BC	$780181			MOV	W0+2, W2+2
$13BE	$90003E			MOV	[W14+6], W0
$13C0	$9000CE			MOV	[W14+8], W0+2
$13C2	$07FEC0			RCALL	__compare_le_fp
$13C4	$E00000			CP0	W0
$13C6	$340002			BRA LE	L_tipo_142, L_tipo_142
$13C8	$200000			MOV	#0, W0
$13CA	$370001			BRA	L_tipo_143, L_tipo_143
$13CC	$	L_tipo_142:
$13CC	$200010			MOV	#1, W0
$13CE	$	L_tipo_143:
$13CE	$E00000			CP0	W0
$13D0	$32004E			BRA Z	L_tipo_66, L_tipo_66
;audme21.c,364 :: 		if (dif <= (T+T*tol)) return 2;
$13D2	$97F04E			MOV.B	[W14+-12], W0
$13D4	$FB0000			SE	W0, W0
$13D6	$DE80CF			ASR	W0, #15, W0+2
$13D8	$EB8100			SETM	W2
$13DA	$070197			RCALL	__long2float
$13DC	$980730			MOV	W0, [W14+6]
$13DE	$980741			MOV	W0+2, [W14+8]
$13E0	$78011E			MOV	[W14], W2
$13E2	$90019E			MOV	[W14+2], W2+2
$13E4	$0701F9			RCALL	__mul_fp
$13E6	$90013E			MOV	[W14+6], W2
$13E8	$9001CE			MOV	[W14+8], W2+2
$13EA	$07FEAF			RCALL	__addsub_fp
$13EC	$980730			MOV	W0, [W14+6]
$13EE	$980741			MOV	W0+2, [W14+8]
$13F0	$90002E			MOV	[W14+4], W0
$13F2	$EB0080			CLR	W0+2
$13F4	$EB0100			CLR	W2
$13F6	$070189			RCALL	__long2float
$13F8	$780100			MOV	W0, W2
$13FA	$780181			MOV	W0+2, W2+2
$13FC	$90003E			MOV	[W14+6], W0
$13FE	$9000CE			MOV	[W14+8], W0+2
$1400	$07FF8C			RCALL	__compare_ge_fp
$1402	$E00000			CP0	W0
$1404	$3D0002			BRA GE	L_tipo_144, L_tipo_144
$1406	$200000			MOV	#0, W0
$1408	$370001			BRA	L_tipo_145, L_tipo_145
$140A	$	L_tipo_144:
$140A	$200010			MOV	#1, W0
$140C	$	L_tipo_145:
$140C	$E00000			CP0	W0
$140E	$320002			BRA Z	L_tipo_67, L_tipo_67
$1410	$200020			MOV	#2, W0
$1412	$37002E			BRA	L_end__tipo
$1414	$	L_tipo_67:
;audme21.c,365 :: 		if (dif >= 2*(T-T*tol)) return 4;
$1414	$97F04E			MOV.B	[W14+-12], W0
$1416	$FB0000			SE	W0, W0
$1418	$DE80CF			ASR	W0, #15, W0+2
$141A	$EB8100			SETM	W2
$141C	$070176			RCALL	__long2float
$141E	$980750			MOV	W0, [W14+10]
$1420	$980761			MOV	W0+2, [W14+12]
$1422	$78011E			MOV	[W14], W2
$1424	$90019E			MOV	[W14+2], W2+2
$1426	$0701D8			RCALL	__mul_fp
$1428	$980730			MOV	W0, [W14+6]
$142A	$980741			MOV	W0+2, [W14+8]
$142C	$90005E			MOV	[W14+10], W0
$142E	$9000EE			MOV	[W14+12], W0+2
$1430	$781F82			PUSH	W2
$1432	$781F83			PUSH	W2+2
$1434	$90013E			MOV	[W14+6], W2
$1436	$9001CE			MOV	[W14+8], W2+2
$1438	$07FF39			RCALL	__sub_fp
$143A	$BE014F			POP.D	W2
$143C	$200002			MOV	#0, W2
$143E	$240003			MOV	#16384, W2+2
$1440	$0701CB			RCALL	__mul_fp
$1442	$980730			MOV	W0, [W14+6]
$1444	$980741			MOV	W0+2, [W14+8]
$1446	$90002E			MOV	[W14+4], W0
$1448	$EB0080			CLR	W0+2
$144A	$EB0100			CLR	W2
$144C	$07015E			RCALL	__long2float
$144E	$780100			MOV	W0, W2
$1450	$780181			MOV	W0+2, W2+2
$1452	$90003E			MOV	[W14+6], W0
$1454	$9000CE			MOV	[W14+8], W0+2
$1456	$07FE76			RCALL	__compare_le_fp
$1458	$E00000			CP0	W0
$145A	$340002			BRA LE	L_tipo_146, L_tipo_146
$145C	$200000			MOV	#0, W0
$145E	$370001			BRA	L_tipo_147, L_tipo_147
$1460	$	L_tipo_146:
$1460	$200010			MOV	#1, W0
$1462	$	L_tipo_147:
$1462	$E00000			CP0	W0
$1464	$320002			BRA Z	L_tipo_68, L_tipo_68
$1466	$200040			MOV	#4, W0
$1468	$370003			BRA	L_end__tipo
$146A	$	L_tipo_68:
;audme21.c,366 :: 		return 3;
$146A	$200030			MOV	#3, W0
$146C	$370001			BRA	L_end__tipo
;audme21.c,367 :: 		}
$146E	$	L_tipo_66:
;audme21.c,368 :: 		return 0;
$146E	$200000			MOV	#0, W0
;audme21.c,369 :: 		}//~
$1470	$	L_end__tipo:
$1470	$FA8000			ULNK
$1472	$060000			RETURN
$1474	$	_Promediar:
$1474	$FA0008			LNK	#8
;audme21.c,371 :: 		short Promediar(short T){
;audme21.c,383 :: 		short j=0, cant = 0;
$1476	$4701E0			ADD	W14, #0, W3
$1478	$200000			MOV.B	#0, W0
$147A	$784980			MOV.B	W0, [W3]
$147C	$4701E1			ADD	W14, #1, W3
$147E	$200000			MOV.B	#0, W0
$1480	$784980			MOV.B	W0, [W3]
;audme21.c,384 :: 		short A=0, num1;
$1482	$4701E2			ADD	W14, #2, W3
$1484	$200000			MOV.B	#0, W0
$1486	$784980			MOV.B	W0, [W3]
;audme21.c,387 :: 		for(i=0;i<128;i++) samples2[i] = 0; //inicio el latido promedio
$1488	$200000			MOV	#0, W0
$148A	$980720			MOV	W0, [W14+4]
$148C	$	L_Promediar_69:
$148C	$200804			MOV	#128, W4
$148E	$4701E4			ADD	W14, #4, W3
$1490	$120013			SUBR	W4, [W3], W0
$1492	$31000C			BRA GEU	L_Promediar_70, L_Promediar_70
$1494	$470064			ADD	W14, #4, W0
$1496	$780010			MOV	[W0], W0
$1498	$DD01C1			SL	W0, #1, W3
$149A	$20E200			MOV	#@_Samples2+0, W0
$149C	$400183			ADD	W0, W3, W3
$149E	$200000			MOV	#0, W0
$14A0	$780980			MOV	W0, [W3]
$14A2	$	L_Promediar_71:
$14A2	$200013			MOV	#1, W3
$14A4	$470064			ADD	W14, #4, W0
$14A6	$418810			ADD	W3, [W0], [W0]
$14A8	$04148C			GOTO	L_Promediar_69
$14AC	$	L_Promediar_70:
;audme21.c,389 :: 		while (impulsos[cant] != 0) cant++;
$14AC	$	L_Promediar_72:
$14AC	$470061			ADD	W14, #1, W0
$14AE	$784010			MOV.B	[W0], W0
$14B0	$FB0000			SE	W0, W0
$14B2	$DD01C1			SL	W0, #1, W3
$14B4	$20F340			MOV	#@_impulsos+0, W0
$14B6	$400003			ADD	W0, W3, W0
$14B8	$780190			MOV	[W0], W3
$14BA	$518060			SUB	W3, #0, W0
$14BC	$320005			BRA Z	L_Promediar_73, L_Promediar_73
$14BE	$200013			MOV.B	#1, W3
$14C0	$470061			ADD	W14, #1, W0
$14C2	$41C810			ADD.B	W3, [W0], [W0]
$14C4	$0414AC			GOTO	L_Promediar_72
$14C8	$	L_Promediar_73:
;audme21.c,391 :: 		i = 1;  // también podría ser i=0
$14C8	$200010			MOV	#1, W0
$14CA	$980720			MOV	W0, [W14+4]
;audme21.c,392 :: 		while(A <= 4 || i > cant - 3){
$14CC	$	L_Promediar_74:
$14CC	$470062			ADD	W14, #2, W0
$14CE	$784190			MOV.B	[W0], W3
$14D0	$51C064			SUB.B	W3, #4, W0
$14D2	$340009			BRA LE	L1166_ex_L_Promediar_75, L1166_ex_L_Promediar_75
$14D4	$470061			ADD	W14, #1, W0
$14D6	$784010			MOV.B	[W0], W0
$14D8	$FB0000			SE	W0, W0
$14DA	$500263			SUB	W0, #3, W4
$14DC	$4701E4			ADD	W14, #4, W3
$14DE	$120013			SUBR	W4, [W3], W0
$14E0	$3E0002			BRA GTU	L1166_ex_L_Promediar_75, L1166_ex_L_Promediar_75
$14E2	$041662			GOTO	L_Promediar_75
$14E6	$	L1166_ex_L_Promediar_75:
;audme21.c,393 :: 		num1 = tipo(impulsos[i], impulsos[i+2], T);
$14E6	$570068			SUB	W14, #8, W0
$14E8	$784010			MOV.B	[W0], W0
$14EA	$FB0000			SE	W0, W0
$14EC	$781F80			PUSH	W0
$14EE	$470264			ADD	W14, #4, W4
$14F0	$780014			MOV	[W4], W0
$14F2	$400062			ADD	W0, #2, W0
$14F4	$DD01C1			SL	W0, #1, W3
$14F6	$20F340			MOV	#@_impulsos+0, W0
$14F8	$400183			ADD	W0, W3, W3
$14FA	$784013			MOV.B	[W3], W0
$14FC	$781F80			PUSH	W0
$14FE	$780004			MOV	W4, W0
$1500	$780010			MOV	[W0], W0
$1502	$DD01C1			SL	W0, #1, W3
$1504	$20F340			MOV	#@_impulsos+0, W0
$1506	$400183			ADD	W0, W3, W3
$1508	$784013			MOV.B	[W3], W0
$150A	$781F80			PUSH	W0
$150C	$07FF09			RCALL	_tipo, 04030303
$150E	$B1006F			SUB	#6, W15
$1510	$4701E3			ADD	W14, #3, W3
$1512	$784980			MOV.B	W0, [W3]
;audme21.c,394 :: 		if(num1 == 2){
$1514	$784180			MOV.B	W0, W3
$1516	$51C062			SUB.B	W3, #2, W0
$1518	$3A0042			BRA NZ	L_Promediar_78, L_Promediar_78
;audme21.c,395 :: 		if(samples[impulsos[i]] > samples[impulsos[i+1]]) i++;
$151A	$470264			ADD	W14, #4, W4
$151C	$780014			MOV	[W4], W0
$151E	$DD01C1			SL	W0, #1, W3
$1520	$20F340			MOV	#@_impulsos+0, W0
$1522	$400183			ADD	W0, W3, W3
$1524	$780013			MOV	[W3], W0
$1526	$DD01C1			SL	W0, #1, W3
$1528	$20C000			MOV	#@_Samples+0, W0
$152A	$400283			ADD	W0, W3, W5
$152C	$780004			MOV	W4, W0
$152E	$780010			MOV	[W0], W0
$1530	$400061			ADD	W0, #1, W0
$1532	$DD01C1			SL	W0, #1, W3
$1534	$20F340			MOV	#@_impulsos+0, W0
$1536	$400183			ADD	W0, W3, W3
$1538	$780013			MOV	[W3], W0
$153A	$DD01C1			SL	W0, #1, W3
$153C	$20C000			MOV	#@_Samples+0, W0
$153E	$400203			ADD	W0, W3, W4
$1540	$780195			MOV	[W5], W3
$1542	$518014			SUB	W3, [W4], W0
$1544	$340003			BRA LE	L_Promediar_79, L_Promediar_79
$1546	$200013			MOV	#1, W3
$1548	$470064			ADD	W14, #4, W0
$154A	$418810			ADD	W3, [W0], [W0]
$154C	$	L_Promediar_79:
;audme21.c,396 :: 		for(j=0;j<T;j++) samples2[j] = samples2[j] + samples[impulsos[i] + j];
$154C	$4701E0			ADD	W14, #0, W3
$154E	$200000			MOV.B	#0, W0
$1550	$784980			MOV.B	W0, [W3]
$1552	$	L_Promediar_80:
$1552	$470060			ADD	W14, #0, W0
$1554	$784210			MOV.B	[W0], W4
$1556	$5701E8			SUB	W14, #8, W3
$1558	$524013			SUB.B	W4, [W3], W0
$155A	$3D0019			BRA GE	L_Promediar_81, L_Promediar_81
$155C	$4702E0			ADD	W14, #0, W5
$155E	$784015			MOV.B	[W5], W0
$1560	$FB0000			SE	W0, W0
$1562	$DD01C1			SL	W0, #1, W3
$1564	$20E200			MOV	#@_Samples2+0, W0
$1566	$400203			ADD	W0, W3, W4
$1568	$470064			ADD	W14, #4, W0
$156A	$780010			MOV	[W0], W0
$156C	$DD01C1			SL	W0, #1, W3
$156E	$20F340			MOV	#@_impulsos+0, W0
$1570	$400183			ADD	W0, W3, W3
$1572	$780005			MOV	W5, W0
$1574	$784010			MOV.B	[W0], W0
$1576	$FB0000			SE	W0, W0
$1578	$400013			ADD	W0, [W3], W0
$157A	$DD01C1			SL	W0, #1, W3
$157C	$20C000			MOV	#@_Samples+0, W0
$157E	$400183			ADD	W0, W3, W3
$1580	$780013			MOV	[W3], W0
$1582	$400A14			ADD	W0, [W4], [W4]
$1584	$	L_Promediar_82:
$1584	$200013			MOV.B	#1, W3
$1586	$470060			ADD	W14, #0, W0
$1588	$41C810			ADD.B	W3, [W0], [W0]
$158A	$041552			GOTO	L_Promediar_80
$158E	$	L_Promediar_81:
;audme21.c,398 :: 		A++; i++;
$158E	$200013			MOV.B	#1, W3
$1590	$470062			ADD	W14, #2, W0
$1592	$41C810			ADD.B	W3, [W0], [W0]
$1594	$200013			MOV	#1, W3
$1596	$470064			ADD	W14, #4, W0
$1598	$418810			ADD	W3, [W0], [W0]
;audme21.c,399 :: 		} else if (num1 == 3) {
$159A	$04165E			GOTO	L_Promediar_83
$159E	$	L_Promediar_78:
$159E	$470063			ADD	W14, #3, W0
$15A0	$784190			MOV.B	[W0], W3
$15A2	$51C063			SUB.B	W3, #3, W0
$15A4	$3A002C			BRA NZ	L_Promediar_84, L_Promediar_84
;audme21.c,400 :: 		i++;
$15A6	$200013			MOV	#1, W3
$15A8	$470064			ADD	W14, #4, W0
$15AA	$418810			ADD	W3, [W0], [W0]
;audme21.c,401 :: 		for(j=0;j<T;j++) samples2[j] = samples2[j] + samples[impulsos[i] + j];
$15AC	$4701E0			ADD	W14, #0, W3
$15AE	$200000			MOV.B	#0, W0
$15B0	$784980			MOV.B	W0, [W3]
$15B2	$	L_Promediar_85:
$15B2	$470060			ADD	W14, #0, W0
$15B4	$784210			MOV.B	[W0], W4
$15B6	$5701E8			SUB	W14, #8, W3
$15B8	$524013			SUB.B	W4, [W3], W0
$15BA	$3D0019			BRA GE	L_Promediar_86, L_Promediar_86
$15BC	$4702E0			ADD	W14, #0, W5
$15BE	$784015			MOV.B	[W5], W0
$15C0	$FB0000			SE	W0, W0
$15C2	$DD01C1			SL	W0, #1, W3
$15C4	$20E200			MOV	#@_Samples2+0, W0
$15C6	$400203			ADD	W0, W3, W4
$15C8	$470064			ADD	W14, #4, W0
$15CA	$780010			MOV	[W0], W0
$15CC	$DD01C1			SL	W0, #1, W3
$15CE	$20F340			MOV	#@_impulsos+0, W0
$15D0	$400183			ADD	W0, W3, W3
$15D2	$780005			MOV	W5, W0
$15D4	$784010			MOV.B	[W0], W0
$15D6	$FB0000			SE	W0, W0
$15D8	$400013			ADD	W0, [W3], W0
$15DA	$DD01C1			SL	W0, #1, W3
$15DC	$20C000			MOV	#@_Samples+0, W0
$15DE	$400183			ADD	W0, W3, W3
$15E0	$780013			MOV	[W3], W0
$15E2	$400A14			ADD	W0, [W4], [W4]
$15E4	$	L_Promediar_87:
$15E4	$200013			MOV.B	#1, W3
$15E6	$470060			ADD	W14, #0, W0
$15E8	$41C810			ADD.B	W3, [W0], [W0]
$15EA	$0415B2			GOTO	L_Promediar_85
$15EE	$	L_Promediar_86:
;audme21.c,403 :: 		A++; i++;
$15EE	$200013			MOV.B	#1, W3
$15F0	$470062			ADD	W14, #2, W0
$15F2	$41C810			ADD.B	W3, [W0], [W0]
$15F4	$200013			MOV	#1, W3
$15F6	$470064			ADD	W14, #4, W0
$15F8	$418810			ADD	W3, [W0], [W0]
;audme21.c,404 :: 		} else if (num1 == 4) {
$15FA	$04165E			GOTO	L_Promediar_88
$15FE	$	L_Promediar_84:
$15FE	$470063			ADD	W14, #3, W0
$1600	$784190			MOV.B	[W0], W3
$1602	$51C064			SUB.B	W3, #4, W0
$1604	$3A0029			BRA NZ	L_Promediar_89, L_Promediar_89
;audme21.c,405 :: 		for(j=0;j<T;j++) samples2[j] = samples2[j] + samples[impulsos[i] + j];
$1606	$4701E0			ADD	W14, #0, W3
$1608	$200000			MOV.B	#0, W0
$160A	$784980			MOV.B	W0, [W3]
$160C	$	L_Promediar_90:
$160C	$470060			ADD	W14, #0, W0
$160E	$784210			MOV.B	[W0], W4
$1610	$5701E8			SUB	W14, #8, W3
$1612	$524013			SUB.B	W4, [W3], W0
$1614	$3D0019			BRA GE	L_Promediar_91, L_Promediar_91
$1616	$4702E0			ADD	W14, #0, W5
$1618	$784015			MOV.B	[W5], W0
$161A	$FB0000			SE	W0, W0
$161C	$DD01C1			SL	W0, #1, W3
$161E	$20E200			MOV	#@_Samples2+0, W0
$1620	$400203			ADD	W0, W3, W4
$1622	$470064			ADD	W14, #4, W0
$1624	$780010			MOV	[W0], W0
$1626	$DD01C1			SL	W0, #1, W3
$1628	$20F340			MOV	#@_impulsos+0, W0
$162A	$400183			ADD	W0, W3, W3
$162C	$780005			MOV	W5, W0
$162E	$784010			MOV.B	[W0], W0
$1630	$FB0000			SE	W0, W0
$1632	$400013			ADD	W0, [W3], W0
$1634	$DD01C1			SL	W0, #1, W3
$1636	$20C000			MOV	#@_Samples+0, W0
$1638	$400183			ADD	W0, W3, W3
$163A	$780013			MOV	[W3], W0
$163C	$400A14			ADD	W0, [W4], [W4]
$163E	$	L_Promediar_92:
$163E	$200013			MOV.B	#1, W3
$1640	$470060			ADD	W14, #0, W0
$1642	$41C810			ADD.B	W3, [W0], [W0]
$1644	$04160C			GOTO	L_Promediar_90
$1648	$	L_Promediar_91:
;audme21.c,407 :: 		i++; A++;
$1648	$200013			MOV	#1, W3
$164A	$470064			ADD	W14, #4, W0
$164C	$418810			ADD	W3, [W0], [W0]
$164E	$200013			MOV.B	#1, W3
$1650	$470062			ADD	W14, #2, W0
$1652	$41C810			ADD.B	W3, [W0], [W0]
;audme21.c,408 :: 		} else {
$1654	$04165E			GOTO	L_Promediar_93
$1658	$	L_Promediar_89:
;audme21.c,409 :: 		i++;
$1658	$200013			MOV	#1, W3
$165A	$470064			ADD	W14, #4, W0
$165C	$418810			ADD	W3, [W0], [W0]
;audme21.c,410 :: 		}
$165E	$	L_Promediar_93:
$165E	$	L_Promediar_88:
$165E	$	L_Promediar_83:
;audme21.c,412 :: 		}
$165E	$0414CC			GOTO	L_Promediar_74
$1662	$	L_Promediar_75:
;audme21.c,413 :: 		for(i=0;i<T;i++) samples2[i] = samples2[i] /A;
$1662	$200000			MOV	#0, W0
$1664	$980720			MOV	W0, [W14+4]
$1666	$	L_Promediar_94:
$1666	$570068			SUB	W14, #8, W0
$1668	$784210			MOV.B	[W0], W4
$166A	$FB0204			SE	W4, W4
$166C	$4701E4			ADD	W14, #4, W3
$166E	$120013			SUBR	W4, [W3], W0
$1670	$310013			BRA GEU	L_Promediar_95, L_Promediar_95
$1672	$470064			ADD	W14, #4, W0
$1674	$780010			MOV	[W0], W0
$1676	$DD01C1			SL	W0, #1, W3
$1678	$20E200			MOV	#@_Samples2+0, W0
$167A	$400003			ADD	W0, W3, W0
$167C	$980730			MOV	W0, [W14+6]
$167E	$780190			MOV	[W0], W3
$1680	$470062			ADD	W14, #2, W0
$1682	$784110			MOV.B	[W0], W2
$1684	$FB0102			SE	W2, W2
$1686	$090011			REPEAT	#17
$1688	$D80182			DIV.S	W3, W2
$168A	$9001BE			MOV	[W14+6], W3
$168C	$780980			MOV	W0, [W3]
$168E	$	L_Promediar_96:
$168E	$200013			MOV	#1, W3
$1690	$470064			ADD	W14, #4, W0
$1692	$418810			ADD	W3, [W0], [W0]
$1694	$041666			GOTO	L_Promediar_94
$1698	$	L_Promediar_95:
;audme21.c,414 :: 		return A;
$1698	$470062			ADD	W14, #2, W0
$169A	$784010			MOV.B	[W0], W0
;audme21.c,415 :: 		}//~
$169C	$	L_end__Promediar:
$169C	$FA8000			ULNK
$169E	$060000			RETURN
$16A0	$	_encontrar_pico:
$16A0	$FA0002			LNK	#2
;audme21.c,417 :: 		short encontrar_pico(short inicio, short T){
;audme21.c,427 :: 		int i = 0;
$16A2	$200000			MOV	#0, W0
$16A4	$780F00			MOV	W0, [W14]
;audme21.c,428 :: 		for (i = inicio + 1;i < T-1;i++){
$16A6	$570068			SUB	W14, #8, W0
$16A8	$784090			MOV.B	[W0], W1
$16AA	$FB0081			SE	W1, W1
$16AC	$470060			ADD	W14, #0, W0
$16AE	$408861			ADD	W1, #1, [W0]
$16B0	$	L_encontrar_pico_97:
$16B0	$57006A			SUB	W14, #10, W0
$16B2	$784010			MOV.B	[W0], W0
$16B4	$FB0000			SE	W0, W0
$16B6	$500161			SUB	W0, #1, W2
$16B8	$4700E0			ADD	W14, #0, W1
$16BA	$110011			SUBR	W2, [W1], W0
$16BC	$3D0023			BRA GE	L_encontrar_pico_98, L_encontrar_pico_98
;audme21.c,429 :: 		if((samples2[i] > samples2[i-1]) && (samples2[i] > samples2[i+1])) return i;
$16BE	$470160			ADD	W14, #0, W2
$16C0	$780012			MOV	[W2], W0
$16C2	$DD00C1			SL	W0, #1, W1
$16C4	$20E200			MOV	#@_Samples2+0, W0
$16C6	$400181			ADD	W0, W1, W3
$16C8	$780002			MOV	W2, W0
$16CA	$780010			MOV	[W0], W0
$16CC	$500061			SUB	W0, #1, W0
$16CE	$DD00C1			SL	W0, #1, W1
$16D0	$20E200			MOV	#@_Samples2+0, W0
$16D2	$400101			ADD	W0, W1, W2
$16D4	$780093			MOV	[W3], W1
$16D6	$508012			SUB	W1, [W2], W0
$16D8	$340010			BRA LE	L_encontrar_pico_102, L_encontrar_pico_102
$16DA	$470160			ADD	W14, #0, W2
$16DC	$780012			MOV	[W2], W0
$16DE	$DD00C1			SL	W0, #1, W1
$16E0	$20E200			MOV	#@_Samples2+0, W0
$16E2	$400181			ADD	W0, W1, W3
$16E4	$780002			MOV	W2, W0
$16E6	$780010			MOV	[W0], W0
$16E8	$400061			ADD	W0, #1, W0
$16EA	$DD00C1			SL	W0, #1, W1
$16EC	$20E200			MOV	#@_Samples2+0, W0
$16EE	$400101			ADD	W0, W1, W2
$16F0	$780093			MOV	[W3], W1
$16F2	$508012			SUB	W1, [W2], W0
$16F4	$340002			BRA LE	L_encontrar_pico_102, L_encontrar_pico_102
$16F6	$	L1446_ex_L_encontrar_pico_102:
$16F6	$78401E			MOV.B	[W14], W0
$16F8	$370006			BRA	L_end__encontrar_pico
$16FA	$	L_encontrar_pico_102:
;audme21.c,430 :: 		}
$16FA	$	L_encontrar_pico_99:
;audme21.c,428 :: 		for (i = inicio + 1;i < T-1;i++){
$16FA	$200011			MOV	#1, W1
$16FC	$470060			ADD	W14, #0, W0
$16FE	$408810			ADD	W1, [W0], [W0]
;audme21.c,430 :: 		}
$1700	$0416B0			GOTO	L_encontrar_pico_97
$1704	$	L_encontrar_pico_98:
;audme21.c,431 :: 		return 0;
$1704	$200000			MOV.B	#0, W0
;audme21.c,432 :: 		}//~
$1706	$	L_end__encontrar_pico:
$1706	$FA8000			ULNK
$1708	$060000			RETURN
$170A	$	__Long2Float:
;math_double.c,95 :: 		
;math_double.c,97 :: 		
$170A	$E00002			CP0	w2
;math_double.c,98 :: 		
$170C	$3A0006			BRA NZ	NZ, Longint2Float__floatsisf
;math_double.c,99 :: 		
;math_double.c,100 :: 		
$170E	$	Longword2Float__floatuisf:
;math_double.c,101 :: 		
$170E	$EB0500			CLR	w10
;math_double.c,102 :: 		
$1710	$E00001			CP0	w1
;math_double.c,103 :: 		
$1712	$3E000F			BRA GTU	GTU, Long2Float_notspecial
;math_double.c,104 :: 		
$1714	$E00000			CP0	w0
;math_double.c,105 :: 		
$1716	$320027			BRA Z	Z, Long2Float_return0
;math_double.c,106 :: 		
$1718	$37000C			BRA	Long2Float_notspecial
;math_double.c,107 :: 		
;math_double.c,108 :: 		
$171A	$	Longint2Float__floatsisf:
;math_double.c,109 :: 		
$171A	$780501			MOV	w1, w10
;math_double.c,110 :: 		
$171C	$E00001			CP0	w1
;math_double.c,111 :: 		
$171E	$350004			BRA LT	LT, Longint2Float_negative
;math_double.c,112 :: 		
$1720	$3C0008			BRA GT	GT, Long2Float_notspecial
;math_double.c,113 :: 		
$1722	$E00000			CP0	w0
;math_double.c,114 :: 		
$1724	$320020			BRA Z	Z, Long2Float_return0
;math_double.c,115 :: 		
$1726	$370005			BRA	Long2Float_notspecial
;math_double.c,116 :: 		
$1728	$	Longint2Float_negative:
;math_double.c,117 :: 		
$1728	$100060			SUBR	w0, #0, w0
;math_double.c,118 :: 		
$172A	$1880E0			SUBBR	w1, #0, w1
;math_double.c,119 :: 		
$172C	$3B0002			BRA NN	NN, Long2Float_notspecial
;math_double.c,120 :: 		
$172E	$2CF001			MOV	#0xcf00, w1
;math_double.c,121 :: 		
$1730	$37001A			BRA	Long2Float_return0
;math_double.c,122 :: 		
;math_double.c,123 :: 		
$1732	$	Long2Float_notspecial:
;math_double.c,124 :: 		
$1732	$BE0400			MOV.D	w0, w8
;math_double.c,125 :: 		
$1734	$B81160			MUL.UU	w2, #0, w2
;math_double.c,126 :: 		
$1736	$20096B			MOV	#0x96, w11
;math_double.c,127 :: 		
$1738	$CF8209			FF1L	w9, w4
;math_double.c,128 :: 		
$173A	$390002			BRA NC	NC, Long2Float_fixshift
;math_double.c,129 :: 		
$173C	$CF8208			FF1L	w8, w4
;math_double.c,130 :: 		
$173E	$B04104			ADD.B	#0x10, w4
;math_double.c,131 :: 		
$1740	$	Long2Float_fixshift:
;math_double.c,132 :: 		
$1740	$524269			SUB.B	w4, #9, w4
;math_double.c,133 :: 		
$1742	$32000E			BRA Z	Z, Long2Float_round
;math_double.c,134 :: 		
$1744	$3B0008			BRA NN	NN, Long2Float_shiftleft
;math_double.c,135 :: 		
$1746	$	Long2Float_shiftright:
;math_double.c,136 :: 		
$1746	$718182			IOR	w3, w2, w3
;math_double.c,137 :: 		
$1748	$640161			AND	w8, #1, w2
;math_double.c,138 :: 		
$174A	$D10489			LSR	w9, w9
;math_double.c,139 :: 		
$174C	$D38408			RRC	w8, w8
;math_double.c,140 :: 		
$174E	$E8058B			INC	w11, w11
;math_double.c,141 :: 		
$1750	$E84204			INC.B	w4, w4
;math_double.c,142 :: 		
$1752	$3AFFF9			BRA NZ	NZ, Long2Float_shiftright
;math_double.c,143 :: 		
$1754	$370005			BRA	Long2Float_round
;math_double.c,144 :: 		
$1756	$	Long2Float_shiftleft:
;math_double.c,145 :: 		
$1756	$440408			ADD	w8, w8, w8
;math_double.c,146 :: 		
$1758	$4C8489			ADDC	w9, w9, w9
;math_double.c,147 :: 		
$175A	$E9058B			DEC	w11, w11
;math_double.c,148 :: 		
$175C	$E94204			DEC.B	w4, w4
;math_double.c,149 :: 		
$175E	$3AFFFB			BRA NZ	NZ, Long2Float_shiftleft
;math_double.c,150 :: 		
$1760	$	Long2Float_round:
;math_double.c,151 :: 		
$1760	$070003			RCALL	Long2Float__fpack
;math_double.c,152 :: 		
$1762	$A7F00A			BTSC	w10, #15
;math_double.c,153 :: 		
$1764	$A0F001			BSET	w1, #15
;math_double.c,154 :: 		
$1766	$	Long2Float_return0:
;math_double.c,155 :: 		
$1766	$060000			RETURN
;math_double.c,156 :: 		
$1768	$	Long2Float__fpack:
;math_double.c,157 :: 		
$1768	$200081			MOV	#0x8, w1
;math_double.c,158 :: 		
$176A	$558061			SUB	w11, #1, w0
;math_double.c,159 :: 		
$176C	$3D000B			BRA GE	GE, Long2Float_notsubnormal
;math_double.c,160 :: 		
$176E	$20000B			MOV	#0x0, w11
;math_double.c,161 :: 		
$1770	$2FFE61			MOV	#0xffe6, w1
;math_double.c,162 :: 		
$1772	$E10001			CP	w0, w1
;math_double.c,163 :: 		
$1774	$34001D			BRA LE	le, Long2Float_zerosig
;math_double.c,164 :: 		
$1776	$	Long2Float_subnormal:
;math_double.c,165 :: 		
$1776	$718182			IOR	w3, w2, w3
;math_double.c,166 :: 		
$1778	$640161			AND	w8, #1, w2
;math_double.c,167 :: 		
$177A	$D10489			LSR	w9, w9
;math_double.c,168 :: 		
$177C	$D38408			RRC	w8, w8
;math_double.c,169 :: 		
$177E	$E80000			INC	w0, w0
;math_double.c,170 :: 		
$1780	$3AFFFA			BRA NZ	NZ, Long2Float_subnormal
;math_double.c,171 :: 		
$1782	$200071			MOV	#0x7, w1
;math_double.c,172 :: 		
$1784	$	Long2Float_notsubnormal:
;math_double.c,173 :: 		
$1784	$640061			AND	w8, #1, w0
;math_double.c,174 :: 		
$1786	$700003			IOR	w0, w3, w0
;math_double.c,175 :: 		
$1788	$600002			AND	w0, w2, w0
;math_double.c,176 :: 		
$178A	$320009			BRA Z	Z, Long2Float_packupandgo
;math_double.c,177 :: 		
$178C	$440461			ADD	w8, #1, w8
;math_double.c,178 :: 		
$178E	$4C84E0			ADDC	w9, #0, w9
;math_double.c,179 :: 		
$1790	$A58809			BTST.Z	w9, w1
;math_double.c,180 :: 		
$1792	$320005			BRA Z	Z, Long2Float_packupandgo
;math_double.c,181 :: 		
$1794	$E8058B			INC	w11, w11
;math_double.c,182 :: 		
$1796	$E10868			CP	w1, #8
;math_double.c,183 :: 		
$1798	$3A0002			BRA NZ	NZ, Long2Float_packupandgo
;math_double.c,184 :: 		
$179A	$D10489			LSR	w9, w9
;math_double.c,185 :: 		
$179C	$D38408			RRC	w8, w8
;math_double.c,186 :: 		
$179E	$	Long2Float_packupandgo:
;math_double.c,187 :: 		
$179E	$200FF2			MOV	#0xff, w2
;math_double.c,188 :: 		
$17A0	$E15802			CP	w11, w2
;math_double.c,189 :: 		
$17A2	$3D0005			BRA GE	GE, Long2Float_overflow
;math_double.c,190 :: 		
$17A4	$DD5DC7			SL	w11, #7, w11
;math_double.c,191 :: 		
$17A6	$B207F9			AND	#0x7f, w9
;math_double.c,192 :: 		
$17A8	$758089			IOR	w11, w9, w1
;math_double.c,193 :: 		
$17AA	$780008			MOV	w8, w0
;math_double.c,194 :: 		
$17AC	$060000			RETURN
;math_double.c,195 :: 		
$17AE	$	Long2Float_overflow:
;math_double.c,196 :: 		
$17AE	$27F80B			MOV	#0x7f80, w11
;math_double.c,197 :: 		
$17B0	$	Long2Float_zerosig:
;math_double.c,198 :: 		
$17B0	$78008B			MOV	w11, w1
;math_double.c,199 :: 		
$17B2	$050000			RETLW	#0x0, w0
;math_double.c,201 :: 		
$17B4	$	L_end___Long2Float:
$17B4	$060000			RETURN
$17B6	$	_Fract2Float:
$17B6	$FA0000			LNK	#0
;audme21.c,314 :: 		float Fract2Float(int input) {
;audme21.c,319 :: 		if (input < 0) input = - input;
$17B8	$570068			SUB	W14, #8, W0
$17BA	$780110			MOV	[W0], W2
$17BC	$510060			SUB	W2, #0, W0
$17BE	$3D0003			BRA GE	L_Fract2Float_55, L_Fract2Float_55
$17C0	$570168			SUB	W14, #8, W2
$17C2	$780012			MOV	[W2], W0
$17C4	$100960			SUBR	W0, #0, [W2]
$17C6	$	L_Fract2Float_55:
;audme21.c,320 :: 		return (input / 32768.);
$17C6	$97B84E			MOV	[W14+-8], W0
$17C8	$DE80CF			ASR	W0, #15, W0+2
$17CA	$EB8100			SETM	W2
$17CC	$07FF9E			RCALL	__long2float
$17CE	$200002			MOV	#0, W2
$17D0	$247003			MOV	#18176, W2+2
$17D2	$07008A			RCALL	__div_fp
;audme21.c,321 :: 		}//~
$17D4	$	L_end__Fract2Float:
$17D4	$FA8000			ULNK
$17D6	$060000			RETURN
$17D8	$	__Mul_FP:
;math_double.c,809 :: 		
;math_double.c,811 :: 		
$17D8	$	MulFP___mulsf3:
;math_double.c,812 :: 		
$17D8	$BE9F88			MOV.D	w8, [w15++]
;math_double.c,813 :: 		
$17DA	$BE9F8A			MOV.D	w10, [w15++]
;math_double.c,814 :: 		
$17DC	$781F8C			MOV	w12, [w15++]
;math_double.c,815 :: 		
$17DE	$070030			RCALL	MulFP__funpack2
;math_double.c,816 :: 		
$17E0	$330037			BRA N	N, MulFP__fPropagateNaN
;math_double.c,817 :: 		
$17E2	$6C8603			XOR	w9, w3, w12
;math_double.c,818 :: 		
$17E4	$E15064			CP	w10, #4
;math_double.c,819 :: 		
$17E6	$320024			BRA Z	Z, MulFP_aisinfinite
;math_double.c,820 :: 		
$17E8	$E12064			CP	w4, #4
;math_double.c,821 :: 		
$17EA	$320027			BRA Z	Z, MulFP_bisinfinite
;math_double.c,822 :: 		
$17EC	$E15061			CP	w10, #1
;math_double.c,823 :: 		
$17EE	$320022			BRA Z	Z, MulFP_return8_1
;math_double.c,824 :: 		
$17F0	$E12061			CP	w4, #1
;math_double.c,825 :: 		
$17F2	$320021			BRA Z	Z, MulFP_return2_1
;math_double.c,826 :: 		
$17F4	$42858B			ADD	w5, w11, w11
;math_double.c,827 :: 		
$17F6	$B107EB			SUB	#0x7E, w11
;math_double.c,828 :: 		
$17F8	$B83401			MUL.UU	w6, w1, w8
;math_double.c,829 :: 		
$17FA	$B83A00			MUL.UU	w7, w0, w4
;math_double.c,830 :: 		
$17FC	$420408			ADD	w4, w8, w8
;math_double.c,831 :: 		
$17FE	$4A8489			ADDC	w5, w9, w9
;math_double.c,832 :: 		
$1800	$B83A01			MUL.UU	w7, w1, w4
;math_double.c,833 :: 		
$1802	$B83000			MUL.UU	w6, w0, w0
;math_double.c,834 :: 		
$1804	$408088			ADD	w1, w8, w1
;math_double.c,835 :: 		
$1806	$4A0109			ADDC	w4, w9, w2
;math_double.c,836 :: 		
$1808	$330004			BRA N	N, MulFP_formsticky
;math_double.c,837 :: 		
$180A	$400000			ADD	w0, w0, w0
;math_double.c,838 :: 		
$180C	$488081			ADDC	w1, w1, w1
;math_double.c,839 :: 		
$180E	$490102			ADDC	w2, w2, w2
;math_double.c,840 :: 		
$1810	$E9058B			DEC	w11, w11
;math_double.c,841 :: 		
$1812	$	MulFP_formsticky:
;math_double.c,842 :: 		
$1812	$DD09C9			SL	w1, #9, w3
;math_double.c,843 :: 		
$1814	$700183			IOR	w0, w3, w3
;math_double.c,844 :: 		
$1816	$320001			BRA Z	Z, MulFP_formRandSig
;math_double.c,845 :: 		
$1818	$200013			MOV	#0x1, w3
;math_double.c,846 :: 		
$181A	$	MulFP_formRandSig:
;math_double.c,847 :: 		
$181A	$DE14C8			LSR	w2, #8, w9
;math_double.c,848 :: 		
$181C	$DD1448			SL	w2, #8, w8
;math_double.c,849 :: 		
$181E	$DE0947			LSR	w1, #7, w2
;math_double.c,850 :: 		
$1820	$B20012			AND	#0x1, w2
;math_double.c,851 :: 		
$1822	$DE08C8			LSR	w1, #8, w1
;math_double.c,852 :: 		
$1824	$708408			IOR	w1, w8, w8
;math_double.c,853 :: 		
$1826	$070024			RCALL	MulFP__fpack
;math_double.c,854 :: 		
$1828	$	MulFP_return0_1:
;math_double.c,855 :: 		
$1828	$A1F001			BCLR	w1, #15
;math_double.c,856 :: 		
$182A	$A7F00C			BTSC	w12, #15
;math_double.c,857 :: 		
$182C	$A0F001			BSET	w1, #15
;math_double.c,858 :: 		
$182E	$370019			BRA	MulFP__fbopExit
;math_double.c,859 :: 		
$1830	$	MulFP_aisinfinite:
;math_double.c,860 :: 		
$1830	$E12061			CP	w4, #1
;math_double.c,861 :: 		
$1832	$32001B			BRA Z	Z, MulFP__fbopReturnNaN
;math_double.c,862 :: 		
$1834	$	MulFP_return8_1:
;math_double.c,863 :: 		
$1834	$BE0108			MOV.D	w8, w2
;math_double.c,864 :: 		
$1836	$	MulFP_return2_1:
;math_double.c,865 :: 		
$1836	$BE0002			MOV.D	w2, w0
;math_double.c,866 :: 		
$1838	$37FFF7			BRA	MulFP_return0_1
;math_double.c,867 :: 		
$183A	$	MulFP_bisinfinite:
;math_double.c,868 :: 		
$183A	$E15061			CP	w10, #1
;math_double.c,869 :: 		
$183C	$3AFFFC			BRA NZ	NZ, MulFP_return2_1
;math_double.c,870 :: 		
$183E	$370015			BRA	MulFP__fbopReturnNaN
;math_double.c,871 :: 		
$1840	$	MulFP__funpack2:
;math_double.c,872 :: 		
$1840	$BE0400			MOV.D	w0, w8
;math_double.c,873 :: 		
$1842	$07003C			RCALL	MulFP__funpack
;math_double.c,874 :: 		
$1844	$BE0300			MOV.D	w0, w6
;math_double.c,875 :: 		
$1846	$BE0504			MOV.D	w4, w10
;math_double.c,876 :: 		
$1848	$BE0002			MOV.D	w2, w0
;math_double.c,877 :: 		
$184A	$070038			RCALL	MulFP__funpack
;math_double.c,878 :: 		
$184C	$754F84			IOR.B	w10, w4, [w15]
;math_double.c,879 :: 		
$184E	$060000			RETURN
;math_double.c,880 :: 		
$1850	$	MulFP__fPropagateNaN:
;math_double.c,881 :: 		
$1850	$BE0002			MOV.D	w2, w0
;math_double.c,882 :: 		
$1852	$E15064			CP	w10, #4
;math_double.c,883 :: 		
$1854	$360005			BRA LEU	LEU, MulFP_return0_2
;math_double.c,884 :: 		
$1856	$E12064			CP	w4, #4
;math_double.c,885 :: 		
$1858	$360002			BRA LEU	LEU, MulFP_return8_2
;math_double.c,886 :: 		
$185A	$A36809			BTST.Z	w9, #6
;math_double.c,887 :: 		
$185C	$3A0001			BRA NZ	NZ, MulFP_return0_2
;math_double.c,888 :: 		
$185E	$	MulFP_return8_2:
;math_double.c,889 :: 		
$185E	$BE0008			MOV.D	w8, w0
;math_double.c,890 :: 		
$1860	$	MulFP_return0_2:
;math_double.c,891 :: 		
$1860	$A06001			BSET	w1, #6
;math_double.c,892 :: 		
$1862	$	MulFP__fbopExit:
;math_double.c,893 :: 		
$1862	$78064F			MOV	[--w15], w12
;math_double.c,894 :: 		
$1864	$BE054F			MOV.D	[--w15], w10
;math_double.c,895 :: 		
$1866	$BE044F			MOV.D	[--w15], w8
;math_double.c,896 :: 		
$1868	$060000			RETURN
;math_double.c,897 :: 		
$186A	$	MulFP__fbopReturnNaN:
;math_double.c,898 :: 		
$186A	$2FFFF0			MOV	#0xffff, w0
;math_double.c,899 :: 		
$186C	$27FFF1			MOV	#0x7fff, w1
;math_double.c,900 :: 		
$186E	$37FFF9			BRA	MulFP__fbopExit
;math_double.c,901 :: 		
$1870	$	MulFP__fpack:
;math_double.c,902 :: 		
$1870	$200081			MOV	#0x8, w1
;math_double.c,903 :: 		
$1872	$558061			SUB	w11, #1, w0
;math_double.c,904 :: 		
$1874	$3D000B			BRA GE	GE, MulFP_notsubnormal
;math_double.c,905 :: 		
$1876	$20000B			MOV	#0x0, w11
;math_double.c,906 :: 		
$1878	$2FFE61			MOV	#0xffe6, w1
;math_double.c,907 :: 		
$187A	$E10001			CP	w0, w1
;math_double.c,908 :: 		
$187C	$34001D			BRA LE	le, MulFP_zerosig
;math_double.c,909 :: 		
$187E	$	MulFP_subnormal1:
;math_double.c,910 :: 		
$187E	$718182			IOR	w3, w2, w3
;math_double.c,911 :: 		
$1880	$640161			AND	w8, #1, w2
;math_double.c,912 :: 		
$1882	$D10489			LSR	w9, w9
;math_double.c,913 :: 		
$1884	$D38408			RRC	w8, w8
;math_double.c,914 :: 		
$1886	$E80000			INC	w0, w0
;math_double.c,915 :: 		
$1888	$3AFFFA			BRA NZ	NZ, MulFP_subnormal1
;math_double.c,916 :: 		
$188A	$200071			MOV	#0x7, w1
;math_double.c,917 :: 		
$188C	$	MulFP_notsubnormal:
;math_double.c,918 :: 		
$188C	$640061			AND	w8, #1, w0
;math_double.c,919 :: 		
$188E	$700003			IOR	w0, w3, w0
;math_double.c,920 :: 		
$1890	$600002			AND	w0, w2, w0
;math_double.c,921 :: 		
$1892	$320009			BRA Z	Z, MulFP_packupandgo
;math_double.c,922 :: 		
$1894	$440461			ADD	w8, #1, w8
;math_double.c,923 :: 		
$1896	$4C84E0			ADDC	w9, #0, w9
;math_double.c,924 :: 		
$1898	$A58809			BTST.Z	w9, w1
;math_double.c,925 :: 		
$189A	$320005			BRA Z	Z, MulFP_packupandgo
;math_double.c,926 :: 		
$189C	$E8058B			INC	w11, w11
;math_double.c,927 :: 		
$189E	$E10868			CP	w1, #8
;math_double.c,928 :: 		
$18A0	$3A0002			BRA NZ	NZ, MulFP_packupandgo
;math_double.c,929 :: 		
$18A2	$D10489			LSR	w9, w9
;math_double.c,930 :: 		
$18A4	$D38408			RRC	w8, w8
;math_double.c,931 :: 		
$18A6	$	MulFP_packupandgo:
;math_double.c,932 :: 		
$18A6	$200FF2			MOV	#0xff, w2
;math_double.c,933 :: 		
$18A8	$E15802			CP	w11, w2
;math_double.c,934 :: 		
$18AA	$3D0005			BRA GE	GE, MulFP_overflow
;math_double.c,935 :: 		
$18AC	$DD5DC7			SL	w11, #7, w11
;math_double.c,936 :: 		
$18AE	$B207F9			AND	#0x7f, w9
;math_double.c,937 :: 		
$18B0	$758089			IOR	w11, w9, w1
;math_double.c,938 :: 		
$18B2	$780008			MOV	w8, w0
;math_double.c,939 :: 		
$18B4	$060000			RETURN
;math_double.c,940 :: 		
$18B6	$	MulFP_overflow:
;math_double.c,941 :: 		
$18B6	$27F80B			MOV	#0x7f80, w11
;math_double.c,942 :: 		
$18B8	$	MulFP_zerosig:
;math_double.c,943 :: 		
$18B8	$78008B			MOV	w11, w1
;math_double.c,944 :: 		
$18BA	$050000			RETLW	#0x0, w0
;math_double.c,945 :: 		
$18BC	$	MulFP__funpack:
;math_double.c,946 :: 		
$18BC	$DE0AC7			LSR	w1, #7, w5
;math_double.c,947 :: 		
$18BE	$B207F1			AND	#0x7f, w1
;math_double.c,948 :: 		
$18C0	$B20FF5			AND	#0xff, w5
;math_double.c,949 :: 		
$18C2	$320008			BRA Z	Z, MulFP_zeroorsub
;math_double.c,950 :: 		
$18C4	$42CFE1			ADD.B	w5, #1, [w15]
;math_double.c,951 :: 		
$18C6	$320002			BRA Z	Z, MulFP_nanorinf
;math_double.c,952 :: 		
$18C8	$	MulFP_finitereturn:
;math_double.c,953 :: 		
$18C8	$A07001			BSET	w1, #7
;math_double.c,954 :: 		
$18CA	$050024			RETLW	#0x2, w4
;math_double.c,955 :: 		
$18CC	$	MulFP_nanorinf:
;math_double.c,956 :: 		
$18CC	$700F81			IOR	w0, w1, [w15]
;math_double.c,957 :: 		
$18CE	$320001			BRA Z	Z, MulFP_infinite
;math_double.c,958 :: 		
$18D0	$050804			RETLW	#0x80, w4
;math_double.c,959 :: 		
$18D2	$	MulFP_infinite:
;math_double.c,960 :: 		
$18D2	$050044			RETLW	#0x4, w4
;math_double.c,961 :: 		
$18D4	$	MulFP_zeroorsub:
;math_double.c,962 :: 		
$18D4	$700F81			IOR	w0, w1, [w15]
;math_double.c,963 :: 		
$18D6	$3A0002			BRA NZ	NZ, MulFP_subnormal2
;math_double.c,964 :: 		
$18D8	$050014			RETLW	#0x1, w4
;math_double.c,965 :: 		
$18DA	$	MulFP_normalize:
;math_double.c,966 :: 		
$18DA	$E90285			DEC	w5, w5
;math_double.c,967 :: 		
$18DC	$	MulFP_subnormal2:
;math_double.c,968 :: 		
$18DC	$400000			ADD	w0, w0, w0
;math_double.c,969 :: 		
$18DE	$48C081			ADDC.B	w1, w1, w1
;math_double.c,970 :: 		
$18E0	$3BFFFC			BRA NN	NN, MulFP_normalize
;math_double.c,971 :: 		
$18E2	$A07001			BSET	w1, #7
;math_double.c,972 :: 		
$18E4	$050024			RETLW	#0x2, w4
;math_double.c,974 :: 		
$18E6	$	L_end___Mul_FP:
$18E6	$060000			RETURN
$18E8	$	__Div_FP:
;math_double.c,996 :: 		
;math_double.c,998 :: 		
$18E8	$	DivFP___divsf3:
;math_double.c,999 :: 		
$18E8	$BE9F88			MOV.D	w8, [w15++]
;math_double.c,1000 :: 		
$18EA	$BE9F8A			MOV.D	w10, [w15++]
;math_double.c,1001 :: 		
$18EC	$781F8C			MOV	w12, [w15++]
;math_double.c,1002 :: 		
$18EE	$07003E			RCALL	DivFP__funpack2
;math_double.c,1003 :: 		
$18F0	$330045			BRA N	N, DivFP__fPropagateNaN
;math_double.c,1004 :: 		
$18F2	$6C8603			XOR	w9, w3, w12
;math_double.c,1005 :: 		
$18F4	$E15064			CP	w10, #4
;math_double.c,1006 :: 		
$18F6	$32002E			BRA Z	Z, DivFP_aisinfinite
;math_double.c,1007 :: 		
$18F8	$E12064			CP	w4, #4
;math_double.c,1008 :: 		
$18FA	$320033			BRA Z	Z, DivFP_returnZero
;math_double.c,1009 :: 		
$18FC	$E15061			CP	w10, #1
;math_double.c,1010 :: 		
$18FE	$32002F			BRA Z	Z, DivFP_aiszero
;math_double.c,1011 :: 		
$1900	$E12061			CP	w4, #1
;math_double.c,1012 :: 		
$1902	$320031			BRA Z	Z, DivFP_returnInf
;math_double.c,1013 :: 		
$1904	$	DivFP_finitenonzero:
;math_double.c,1014 :: 		
$1904	$558585			SUB	w11, w5, w11
;math_double.c,1015 :: 		
$1906	$B007EB			ADD	#0x7e, w11
;math_double.c,1016 :: 		
$1908	$200009			MOV	#0x0, w9
;math_double.c,1017 :: 		
$190A	$200408			MOV	#0x40, w8
;math_double.c,1018 :: 		
$190C	$370005			BRA	DivFP_diventry
;math_double.c,1019 :: 		
$190E	$	DivFP_divnext:
;math_double.c,1020 :: 		
$190E	$440408			ADD	w8, w8, w8
;math_double.c,1021 :: 		
$1910	$4C8489			ADDC	w9, w9, w9
;math_double.c,1022 :: 		
$1912	$31000A			BRA C	c, DivFP_divdone
;math_double.c,1023 :: 		
$1914	$	DivFP_divloop:
;math_double.c,1024 :: 		
$1914	$430306			ADD	w6, w6, w6
;math_double.c,1025 :: 		
$1916	$4B8387			ADDC	w7, w7, w7
;math_double.c,1026 :: 		
$1918	$	DivFP_diventry:
;math_double.c,1027 :: 		
$1918	$530100			SUB	w6, w0, w2
;math_double.c,1028 :: 		
$191A	$5B8181			SUBB	w7, w1, w3
;math_double.c,1029 :: 		
$191C	$33FFF8			BRA N	N, DivFP_divnext
;math_double.c,1030 :: 		
$191E	$BE0302			MOV.D	w2, w6
;math_double.c,1031 :: 		
$1920	$A00008			BSET	w8, #0
;math_double.c,1032 :: 		
$1922	$440408			ADD	w8, w8, w8
;math_double.c,1033 :: 		
$1924	$4C8489			ADDC	w9, w9, w9
;math_double.c,1034 :: 		
$1926	$39FFF6			BRA NC	NC, DivFP_divloop
;math_double.c,1035 :: 		
$1928	$	DivFP_divdone:
;math_double.c,1036 :: 		
$1928	$DD39C6			SL	w7, #6, w3
;math_double.c,1037 :: 		
$192A	$730183			IOR	w6, w3, w3
;math_double.c,1038 :: 		
$192C	$320001			BRA Z	Z, DivFP_stickyok
;math_double.c,1039 :: 		
$192E	$200013			MOV	#0x1, w3
;math_double.c,1040 :: 		
$1930	$	DivFP_stickyok:
;math_double.c,1041 :: 		
$1930	$D10489			LSR	w9, w9
;math_double.c,1042 :: 		
$1932	$D38408			RRC	w8, w8
;math_double.c,1043 :: 		
$1934	$A39809			BTST.Z	w9, #9
;math_double.c,1044 :: 		
$1936	$320005			BRA Z	Z, DivFP_guardused
;math_double.c,1045 :: 		
$1938	$A70008			BTSC	w8, #0
;math_double.c,1046 :: 		
$193A	$A00003			BSET	w3, #0
;math_double.c,1047 :: 		
$193C	$D10489			LSR	w9, w9
;math_double.c,1048 :: 		
$193E	$D38408			RRC	w8, w8
;math_double.c,1049 :: 		
$1940	$E8058B			INC	w11, w11
;math_double.c,1050 :: 		
$1942	$	DivFP_guardused:
;math_double.c,1051 :: 		
$1942	$D10489			LSR	w9, w9
;math_double.c,1052 :: 		
$1944	$D38408			RRC	w8, w8
;math_double.c,1053 :: 		
$1946	$EB0100			CLR	w2
;math_double.c,1054 :: 		
$1948	$D28102			RLC	w2, w2
;math_double.c,1055 :: 		
$194A	$070028			RCALL	DivFP__fpack
;math_double.c,1056 :: 		
$194C	$	DivFP_return0_1:
;math_double.c,1057 :: 		
$194C	$A1F001			BCLR	w1, #15
;math_double.c,1058 :: 		
$194E	$A7F00C			BTSC	w12, #15
;math_double.c,1059 :: 		
$1950	$A0F001			BSET	w1, #15
;math_double.c,1060 :: 		
$1952	$37001D			BRA	DivFP__fbopExit
;math_double.c,1061 :: 		
$1954	$	DivFP_aisinfinite:
;math_double.c,1062 :: 		
$1954	$E12064			CP	w4, #4
;math_double.c,1063 :: 		
$1956	$32001F			BRA Z	Z, DivFP__fbopReturnNaN
;math_double.c,1064 :: 		
$1958	$	DivFP_return8_1:
;math_double.c,1065 :: 		
$1958	$BE0108			MOV.D	w8, w2
;math_double.c,1066 :: 		
$195A	$	DivFP_return2_1:
;math_double.c,1067 :: 		
$195A	$BE0002			MOV.D	w2, w0
;math_double.c,1068 :: 		
$195C	$37FFF7			BRA	DivFP_return0_1
;math_double.c,1069 :: 		
$195E	$	DivFP_aiszero:
;math_double.c,1070 :: 		
$195E	$E12061			CP	w4, #1
;math_double.c,1071 :: 		
$1960	$32001A			BRA Z	Z, DivFP__fbopReturnNaN
;math_double.c,1072 :: 		
$1962	$	DivFP_returnZero:
;math_double.c,1073 :: 		
$1962	$B80060			MUL.UU	w0, #0, w0
;math_double.c,1074 :: 		
$1964	$37FFF3			BRA	DivFP_return0_1
;math_double.c,1075 :: 		
$1966	$	DivFP_returnInf:
;math_double.c,1076 :: 		
$1966	$200000			MOV	#0x0, w0
;math_double.c,1077 :: 		
$1968	$27F801			MOV	#0x7f80, w1
;math_double.c,1078 :: 		
$196A	$37FFF0			BRA	DivFP_return0_1
;math_double.c,1079 :: 		
$196C	$	DivFP__funpack2:
;math_double.c,1080 :: 		
$196C	$BE0400			MOV.D	w0, w8
;math_double.c,1081 :: 		
$196E	$07003C			RCALL	DivFP__funpack
;math_double.c,1082 :: 		
$1970	$BE0300			MOV.D	w0, w6
;math_double.c,1083 :: 		
$1972	$BE0504			MOV.D	w4, w10
;math_double.c,1084 :: 		
$1974	$BE0002			MOV.D	w2, w0
;math_double.c,1085 :: 		
$1976	$070038			RCALL	DivFP__funpack
;math_double.c,1086 :: 		
$1978	$754F84			IOR.B	w10, w4, [w15]
;math_double.c,1087 :: 		
$197A	$060000			RETURN
;math_double.c,1088 :: 		
$197C	$	DivFP__fPropagateNaN:
;math_double.c,1089 :: 		
$197C	$BE0002			MOV.D	w2, w0
;math_double.c,1090 :: 		
$197E	$E15064			CP	w10, #4
;math_double.c,1091 :: 		
$1980	$360005			BRA LEU	LEU, DivFP_return0
;math_double.c,1092 :: 		
$1982	$E12064			CP	w4, #4
;math_double.c,1093 :: 		
$1984	$360002			BRA LEU	LEU, DivFP_return8
;math_double.c,1094 :: 		
$1986	$A36809			BTST.Z	w9, #6
;math_double.c,1095 :: 		
$1988	$3A0001			BRA NZ	NZ, DivFP_return0
;math_double.c,1096 :: 		
$198A	$	DivFP_return8:
;math_double.c,1097 :: 		
$198A	$BE0008			MOV.D	w8, w0
;math_double.c,1098 :: 		
$198C	$	DivFP_return0:
;math_double.c,1099 :: 		
$198C	$A06001			BSET	w1, #6
;math_double.c,1100 :: 		
$198E	$	DivFP__fbopExit:
;math_double.c,1101 :: 		
$198E	$78064F			MOV	[--w15], w12
;math_double.c,1102 :: 		
$1990	$BE054F			MOV.D	[--w15], w10
;math_double.c,1103 :: 		
$1992	$BE044F			MOV.D	[--w15], w8
;math_double.c,1104 :: 		
$1994	$060000			RETURN
;math_double.c,1105 :: 		
$1996	$	DivFP__fbopReturnNaN:
;math_double.c,1106 :: 		
$1996	$2FFFF0			MOV	#0xffff, w0
;math_double.c,1107 :: 		
$1998	$27FFF1			MOV	#0x7fff, w1
;math_double.c,1108 :: 		
$199A	$37FFF9			BRA	DivFP__fbopExit
;math_double.c,1109 :: 		
$199C	$	DivFP__fpack:
;math_double.c,1110 :: 		
$199C	$200081			MOV	#0x8, w1
;math_double.c,1111 :: 		
$199E	$558061			SUB	w11, #1, w0
;math_double.c,1112 :: 		
$19A0	$3D000B			BRA GE	GE, DivFP_notsubnormal
;math_double.c,1113 :: 		
$19A2	$20000B			MOV	#0x0, w11
;math_double.c,1114 :: 		
$19A4	$2FFE61			MOV	#0xffe6, w1
;math_double.c,1115 :: 		
$19A6	$E10001			CP	w0, w1
;math_double.c,1116 :: 		
$19A8	$34001D			BRA LE	le, DivFP_zerosig
;math_double.c,1117 :: 		
$19AA	$	DivFP_subnormal:
;math_double.c,1118 :: 		
$19AA	$718182			IOR	w3, w2, w3
;math_double.c,1119 :: 		
$19AC	$640161			AND	w8, #1, w2
;math_double.c,1120 :: 		
$19AE	$D10489			LSR	w9, w9
;math_double.c,1121 :: 		
$19B0	$D38408			RRC	w8, w8
;math_double.c,1122 :: 		
$19B2	$E80000			INC	w0, w0
;math_double.c,1123 :: 		
$19B4	$3AFFFA			BRA NZ	NZ, DivFP_subnormal
;math_double.c,1124 :: 		
$19B6	$200071			MOV	#0x7, w1
;math_double.c,1125 :: 		
$19B8	$	DivFP_notsubnormal:
;math_double.c,1126 :: 		
$19B8	$640061			AND	w8, #1, w0
;math_double.c,1127 :: 		
$19BA	$700003			IOR	w0, w3, w0
;math_double.c,1128 :: 		
$19BC	$600002			AND	w0, w2, w0
;math_double.c,1129 :: 		
$19BE	$320009			BRA Z	Z, DivFP_packupandgo
;math_double.c,1130 :: 		
$19C0	$440461			ADD	w8, #1, w8
;math_double.c,1131 :: 		
$19C2	$4C84E0			ADDC	w9, #0, w9
;math_double.c,1132 :: 		
$19C4	$A58809			BTST.Z	w9, w1
;math_double.c,1133 :: 		
$19C6	$320005			BRA Z	Z, DivFP_packupandgo
;math_double.c,1134 :: 		
$19C8	$E8058B			INC	w11, w11
;math_double.c,1135 :: 		
$19CA	$E10868			CP	w1, #8
;math_double.c,1136 :: 		
$19CC	$3A0002			BRA NZ	NZ, DivFP_packupandgo
;math_double.c,1137 :: 		
$19CE	$D10489			LSR	w9, w9
;math_double.c,1138 :: 		
$19D0	$D38408			RRC	w8, w8
;math_double.c,1139 :: 		
$19D2	$	DivFP_packupandgo:
;math_double.c,1140 :: 		
$19D2	$200FF2			MOV	#0xff, w2
;math_double.c,1141 :: 		
$19D4	$E15802			CP	w11, w2
;math_double.c,1142 :: 		
$19D6	$3D0005			BRA GE	GE, DivFP_overflow
;math_double.c,1143 :: 		
$19D8	$DD5DC7			SL	w11, #7, w11
;math_double.c,1144 :: 		
$19DA	$B207F9			AND	#0x7f, w9
;math_double.c,1145 :: 		
$19DC	$758089			IOR	w11, w9, w1
;math_double.c,1146 :: 		
$19DE	$780008			MOV	w8, w0
;math_double.c,1147 :: 		
$19E0	$060000			RETURN
;math_double.c,1148 :: 		
$19E2	$	DivFP_overflow:
;math_double.c,1149 :: 		
$19E2	$27F80B			MOV	#0x7f80, w11
;math_double.c,1150 :: 		
$19E4	$	DivFP_zerosig:
;math_double.c,1151 :: 		
$19E4	$78008B			MOV	w11, w1
;math_double.c,1152 :: 		
$19E6	$050000			RETLW	#0x0, w0
;math_double.c,1153 :: 		
$19E8	$	DivFP__funpack:
;math_double.c,1154 :: 		
$19E8	$DE0AC7			LSR	w1, #7, w5
;math_double.c,1155 :: 		
$19EA	$B207F1			AND	#0x7f, w1
;math_double.c,1156 :: 		
$19EC	$B20FF5			AND	#0xff, w5
;math_double.c,1157 :: 		
$19EE	$320008			BRA Z	Z, DivFP_zeroorsub
;math_double.c,1158 :: 		
$19F0	$42CFE1			ADD.B	w5, #1, [w15]
;math_double.c,1159 :: 		
$19F2	$320002			BRA Z	Z, DivFP_nanorinf
;math_double.c,1160 :: 		
$19F4	$	DivFP_finitereturn:
;math_double.c,1161 :: 		
$19F4	$A07001			BSET	w1, #7
;math_double.c,1162 :: 		
$19F6	$050024			RETLW	#0x2, w4
;math_double.c,1163 :: 		
$19F8	$	DivFP_nanorinf:
;math_double.c,1164 :: 		
$19F8	$700F81			IOR	w0, w1, [w15]
;math_double.c,1165 :: 		
$19FA	$320001			BRA Z	Z, DivFP_infinite
;math_double.c,1166 :: 		
$19FC	$050804			RETLW	#0x80, w4
;math_double.c,1167 :: 		
$19FE	$	DivFP_infinite:
;math_double.c,1168 :: 		
$19FE	$050044			RETLW	#0x4, w4
;math_double.c,1169 :: 		
$1A00	$	DivFP_zeroorsub:
;math_double.c,1170 :: 		
$1A00	$700F81			IOR	w0, w1, [w15]
;math_double.c,1171 :: 		
$1A02	$3A0002			BRA NZ	NZ, DivFP_subnormal2
;math_double.c,1172 :: 		
$1A04	$050014			RETLW	#0x1, w4
;math_double.c,1173 :: 		
$1A06	$	DivFP_normalize:
;math_double.c,1174 :: 		
$1A06	$E90285			DEC	w5, w5
;math_double.c,1175 :: 		
$1A08	$	DivFP_subnormal2:
;math_double.c,1176 :: 		
$1A08	$400000			ADD	w0, w0, w0
;math_double.c,1177 :: 		
$1A0A	$48C081			ADDC.B	w1, w1, w1
;math_double.c,1178 :: 		
$1A0C	$3BFFFC			BRA NN	NN, DivFP_normalize
;math_double.c,1179 :: 		
$1A0E	$A07001			BSET	w1, #7
;math_double.c,1180 :: 		
$1A10	$050024			RETLW	#0x2, w4
;math_double.c,1182 :: 		
$1A12	$	L_end___Div_FP:
$1A12	$060000			RETURN
$1A14	$	__Float2Longint:
;math_double.c,449 :: 		
;math_double.c,451 :: 		
$1A14	$	Float2Longint__fixsfsi:
;math_double.c,452 :: 		
$1A14	$BE0100			MOV.D	w0, w2
;math_double.c,453 :: 		
$1A16	$07001F			RCALL	Float2Longint__funpack
;math_double.c,454 :: 		
$1A18	$A77004			BTSC	w4, #7
;math_double.c,455 :: 		
$1A1A	$A1F003			BCLR	w3, #15
;math_double.c,456 :: 		
$1A1C	$B10965			SUB	#0x96, w5
;math_double.c,457 :: 		
$1A1E	$320016			BRA Z	Z, Float2Longint_setsign
;math_double.c,458 :: 		
$1A20	$35000D			BRA LT	LT, Float2Longint_shiftright
;math_double.c,459 :: 		
$1A22	$E12868			CP	w5, #8
;math_double.c,460 :: 		
$1A24	$350006			BRA LT	LT, Float2Longint_shiftleft
;math_double.c,461 :: 		
$1A26	$2FFFF0			MOV	#0xffff, w0
;math_double.c,462 :: 		
$1A28	$27FFF1			MOV	#0x7fff, w1
;math_double.c,463 :: 		
$1A2A	$E00003			CP0	w3
;math_double.c,464 :: 		
$1A2C	$3B0013			BRA NN	NN, Float2Longint_exit
;math_double.c,465 :: 		
$1A2E	$280001			MOV	#0x8000, w1
;math_double.c,466 :: 		
$1A30	$050000			RETLW	#0x0, w0
;math_double.c,467 :: 		
$1A32	$	Float2Longint_shiftleft:
;math_double.c,468 :: 		
$1A32	$400000			ADD	w0, w0, w0
;math_double.c,469 :: 		
$1A34	$488081			ADDC	w1, w1, w1
;math_double.c,470 :: 		
$1A36	$E90285			DEC	w5, w5
;math_double.c,471 :: 		
$1A38	$3AFFFC			BRA NZ	NZ, Float2Longint_shiftleft
;math_double.c,472 :: 		
$1A3A	$370008			BRA	Float2Longint_setsign
;math_double.c,473 :: 		
$1A3C	$	Float2Longint_shiftright:
;math_double.c,474 :: 		
$1A3C	$428FF8			ADD	w5, #24, [w15]
;math_double.c,475 :: 		
$1A3E	$3C0002			BRA GT	GT, Float2Longint_shiftrightloop
;math_double.c,476 :: 		
$1A40	$EB0080			CLR	w1
;math_double.c,477 :: 		
$1A42	$050000			RETLW	#0x0, w0
;math_double.c,478 :: 		
$1A44	$	Float2Longint_shiftrightloop:
;math_double.c,479 :: 		
$1A44	$D10081			LSR	w1, w1
;math_double.c,480 :: 		
$1A46	$D38000			RRC	w0, w0
;math_double.c,481 :: 		
$1A48	$E80285			INC	w5, w5
;math_double.c,482 :: 		
$1A4A	$3AFFFC			BRA NZ	NZ, Float2Longint_shiftrightloop
;math_double.c,483 :: 		
$1A4C	$	Float2Longint_setsign:
;math_double.c,484 :: 		
$1A4C	$E00003			CP0	w3
;math_double.c,485 :: 		
$1A4E	$3B0002			BRA NN	NN, Float2Longint_exit
;math_double.c,486 :: 		
$1A50	$100060			SUBR	w0, #0, w0
;math_double.c,487 :: 		
$1A52	$1880E0			SUBBR	w1, #0, w1
;math_double.c,488 :: 		
$1A54	$	Float2Longint_exit:
;math_double.c,489 :: 		
$1A54	$060000			RETURN
;math_double.c,490 :: 		
$1A56	$	Float2Longint__funpack:
;math_double.c,491 :: 		
$1A56	$DE0AC7			LSR	w1, #7, w5
;math_double.c,492 :: 		
$1A58	$B207F1			AND	#0x7f, w1
;math_double.c,493 :: 		
$1A5A	$B20FF5			AND	#0xff, w5
;math_double.c,494 :: 		
$1A5C	$320008			BRA Z	Z, Float2Longint_zeroorsub
;math_double.c,495 :: 		
$1A5E	$42CFE1			ADD.B	w5, #1, [w15]
;math_double.c,496 :: 		
$1A60	$320002			BRA Z	Z, Float2Longint_nanorinf
;math_double.c,497 :: 		
$1A62	$	Float2Longint_finitereturn:
;math_double.c,498 :: 		
$1A62	$A07001			BSET	w1, #7
;math_double.c,499 :: 		
$1A64	$050024			RETLW	#0x2, w4
;math_double.c,500 :: 		
$1A66	$	Float2Longint_nanorinf:
;math_double.c,501 :: 		
$1A66	$700F81			IOR	w0, w1, [w15]
;math_double.c,502 :: 		
$1A68	$320001			BRA Z	Z, Float2Longint_infinite
;math_double.c,503 :: 		
$1A6A	$050804			RETLW	#0x80, w4
;math_double.c,504 :: 		
$1A6C	$	Float2Longint_infinite:
;math_double.c,505 :: 		
$1A6C	$050044			RETLW	#0x4, w4
;math_double.c,506 :: 		
$1A6E	$	Float2Longint_zeroorsub:
;math_double.c,507 :: 		
$1A6E	$700F81			IOR	w0, w1, [w15]
;math_double.c,508 :: 		
$1A70	$3A0002			BRA NZ	NZ, Float2Longint_subnormal
;math_double.c,509 :: 		
$1A72	$050014			RETLW	#0x1, w4
;math_double.c,510 :: 		
$1A74	$	Float2Longint_normalize:
;math_double.c,511 :: 		
$1A74	$E90285			DEC	w5, w5
;math_double.c,512 :: 		
$1A76	$	Float2Longint_subnormal:
;math_double.c,513 :: 		
$1A76	$400000			ADD	w0, w0, w0
;math_double.c,514 :: 		
$1A78	$48C081			ADDC.B	w1, w1, w1
;math_double.c,515 :: 		
$1A7A	$3BFFFC			BRA NN	NN, Float2Longint_normalize
;math_double.c,516 :: 		
$1A7C	$A07001			BSET	w1, #7
;math_double.c,517 :: 		
$1A7E	$050024			RETLW	#0x2, w4
;math_double.c,519 :: 		
$1A80	$	L_end___Float2Longint:
$1A80	$060000			RETURN
$1A82	$	_CalculoIndices:
$1A82	$FA000E			LNK	#14
;audme21.c,434 :: 		void CalculoIndices(short dir, short freq){
;audme21.c,437 :: 		unsigned dir_a, dir_b=0, deltaT;
$1A84	$200000			MOV	#0, W0
$1A86	$980720			MOV	W0, [W14+4]
;audme21.c,438 :: 		int ampli_a=0, ampli_b=0, ri;
$1A88	$200000			MOV	#0, W0
$1A8A	$980740			MOV	W0, [W14+8]
;audme21.c,441 :: 		for(k=0;k<128;k++) Samples2[k] = 0;
$1A8C	$470160			ADD	W14, #0, W2
$1A8E	$200000			MOV.B	#0, W0
$1A90	$784900			MOV.B	W0, [W2]
$1A92	$	L_CalculoIndices_103:
$1A92	$470060			ADD	W14, #0, W0
$1A94	$784190			MOV.B	[W0], W3
$1A96	$200802			MOV	#128, W2
$1A98	$51C002			SUB.B	W3, W2, W0
$1A9A	$31000D			BRA GEU	L_CalculoIndices_104, L_CalculoIndices_104
$1A9C	$470060			ADD	W14, #0, W0
$1A9E	$784010			MOV.B	[W0], W0
$1AA0	$FB0000			SE	W0, W0
$1AA2	$DD0141			SL	W0, #1, W2
$1AA4	$20E200			MOV	#@_Samples2+0, W0
$1AA6	$400102			ADD	W0, W2, W2
$1AA8	$200000			MOV	#0, W0
$1AAA	$780900			MOV	W0, [W2]
$1AAC	$	L_CalculoIndices_105:
$1AAC	$200012			MOV.B	#1, W2
$1AAE	$470060			ADD	W14, #0, W0
$1AB0	$414810			ADD.B	W2, [W0], [W0]
$1AB2	$041A92			GOTO	L_CalculoIndices_103
$1AB6	$	L_CalculoIndices_104:
;audme21.c,442 :: 		Derivando();
$1AB6	$07FAFD			RCALL	_Derivando, 0-1
;audme21.c,443 :: 		T = 500/freq;
$1AB8	$57006A			SUB	W14, #10, W0
$1ABA	$784110			MOV.B	[W0], W2
$1ABC	$FB0102			SE	W2, W2
$1ABE	$201F40			MOV	#500, W0
$1AC0	$090011			REPEAT	#17
$1AC2	$D80002			DIV.S	W0, W2
$1AC4	$470161			ADD	W14, #1, W2
$1AC6	$784900			MOV.B	W0, [W2]
;audme21.c,444 :: 		A = Promediar(T);
$1AC8	$781F80			PUSH	W0
$1ACA	$07FCD4			RCALL	_Promediar, 0303
$1ACC	$B1002F			SUB	#2, W15
;audme21.c,445 :: 		dir_a = encontrar_pico(0,T);
$1ACE	$470061			ADD	W14, #1, W0
$1AD0	$784010			MOV.B	[W0], W0
$1AD2	$FB0000			SE	W0, W0
$1AD4	$781F80			PUSH	W0
$1AD6	$200000			MOV.B	#0, W0
$1AD8	$781F80			PUSH	W0
$1ADA	$07FDE2			RCALL	_encontrar_pico, 030303
$1ADC	$B1004F			SUB	#4, W15
$1ADE	$FB0000			SE	W0, W0
$1AE0	$980710			MOV	W0, [W14+2]
;audme21.c,446 :: 		dir_b = encontrar_pico(dir_a, T);
$1AE2	$470061			ADD	W14, #1, W0
$1AE4	$784010			MOV.B	[W0], W0
$1AE6	$FB0000			SE	W0, W0
$1AE8	$781F80			PUSH	W0
$1AEA	$470062			ADD	W14, #2, W0
$1AEC	$780010			MOV	[W0], W0
$1AEE	$781F80			PUSH	W0
$1AF0	$07FDD7			RCALL	_encontrar_pico, 030303
$1AF2	$B1004F			SUB	#4, W15
$1AF4	$FB0000			SE	W0, W0
$1AF6	$980720			MOV	W0, [W14+4]
;audme21.c,447 :: 		if (dir_b > 0){
$1AF8	$470064			ADD	W14, #4, W0
$1AFA	$780110			MOV	[W0], W2
$1AFC	$510060			SUB	W2, #0, W0
$1AFE	$360040			BRA LEU	L_CalculoIndices_106, L_CalculoIndices_106
;audme21.c,448 :: 		Ampli_a = Samples2[dir_a] - Samples2[T-1];
$1B00	$470062			ADD	W14, #2, W0
$1B02	$780010			MOV	[W0], W0
$1B04	$DD0141			SL	W0, #1, W2
$1B06	$20E200			MOV	#@_Samples2+0, W0
$1B08	$400182			ADD	W0, W2, W3
$1B0A	$470061			ADD	W14, #1, W0
$1B0C	$784010			MOV.B	[W0], W0
$1B0E	$FB0000			SE	W0, W0
$1B10	$500061			SUB	W0, #1, W0
$1B12	$DD0141			SL	W0, #1, W2
$1B14	$20E200			MOV	#@_Samples2+0, W0
$1B16	$400002			ADD	W0, W2, W0
$1B18	$780210			MOV	[W0], W4
$1B1A	$120193			SUBR	W4, [W3], W3
;audme21.c,449 :: 		Ampli_b = Samples2[dir_b] - Samples2[T-1];
$1B1C	$470064			ADD	W14, #4, W0
$1B1E	$780010			MOV	[W0], W0
$1B20	$DD0141			SL	W0, #1, W2
$1B22	$20E200			MOV	#@_Samples2+0, W0
$1B24	$400102			ADD	W0, W2, W2
$1B26	$470068			ADD	W14, #8, W0
$1B28	$120812			SUBR	W4, [W2], [W0]
;audme21.c,450 :: 		tempa = Fract2Float(Ampli_a);
$1B2A	$781F83			PUSH	W3
$1B2C	$07FE44			RCALL	_Fract2Float, 0704
$1B2E	$B1002F			SUB	#2, W15
$1B30	$980750			MOV	W0, [W14+10]
$1B32	$980761			MOV	W0+2, [W14+12]
;audme21.c,451 :: 		tempb = Fract2Float(Ampli_b);
$1B34	$470068			ADD	W14, #8, W0
$1B36	$781F90			PUSH	[W0]
$1B38	$07FE3E			RCALL	_Fract2Float, 0704
$1B3A	$B1002F			SUB	#2, W15
;audme21.c,452 :: 		ri =  100 * tempb / tempa;
$1B3C	$200002			MOV	#0, W2
$1B3E	$242C83			MOV	#17096, W2+2
$1B40	$07FE4B			RCALL	__mul_fp
$1B42	$90015E			MOV	[W14+10], W2
$1B44	$9001EE			MOV	[W14+12], W2+2
$1B46	$07FED0			RCALL	__div_fp
$1B48	$07FF65			RCALL	__float2longint
;audme21.c,453 :: 		deltaT = dir_b - dir_a;
$1B4A	$470164			ADD	W14, #4, W2
$1B4C	$780192			MOV	[W2], W3
$1B4E	$470162			ADD	W14, #2, W2
$1B50	$4702E6			ADD	W14, #6, W5
$1B52	$518A92			SUB	W3, [W2], [W5]
;audme21.c,454 :: 		indices[dir++] = ri;
$1B54	$570268			SUB	W14, #8, W4
$1B56	$784114			MOV.B	[W4], W2
$1B58	$FB0102			SE	W2, W2
$1B5A	$DD11C1			SL	W2, #1, W3
$1B5C	$20F202			MOV	#@_indices+0, W2
$1B5E	$410103			ADD	W2, W3, W2
$1B60	$780900			MOV	W0, [W2]
$1B62	$780004			MOV	W4, W0
$1B64	$784010			MOV.B	[W0], W0
$1B66	$404061			ADD.B	W0, #1, W0
$1B68	$784A00			MOV.B	W0, [W4]
;audme21.c,455 :: 		indices[dir++] = deltaT;
$1B6A	$FB0000			SE	W0, W0
$1B6C	$DD0141			SL	W0, #1, W2
$1B6E	$20F200			MOV	#@_indices+0, W0
$1B70	$400102			ADD	W0, W2, W2
$1B72	$780005			MOV	W5, W0
$1B74	$780010			MOV	[W0], W0
$1B76	$780900			MOV	W0, [W2]
$1B78	$200010			MOV.B	#1, W0
$1B7A	$404A14			ADD.B	W0, [W4], [W4]
;audme21.c,456 :: 		} else {
$1B7C	$041BC0			GOTO	L_CalculoIndices_107
$1B80	$	L_CalculoIndices_106:
;audme21.c,457 :: 		Ampli_a = Samples2[dir_a] - Samples2[T-1];
$1B80	$470062			ADD	W14, #2, W0
$1B82	$780010			MOV	[W0], W0
$1B84	$DD0141			SL	W0, #1, W2
$1B86	$20E200			MOV	#@_Samples2+0, W0
$1B88	$400182			ADD	W0, W2, W3
$1B8A	$470061			ADD	W14, #1, W0
$1B8C	$784010			MOV.B	[W0], W0
$1B8E	$FB0000			SE	W0, W0
$1B90	$500061			SUB	W0, #1, W0
$1B92	$DD0141			SL	W0, #1, W2
$1B94	$20E200			MOV	#@_Samples2+0, W0
$1B96	$400102			ADD	W0, W2, W2
$1B98	$780012			MOV	[W2], W0
$1B9A	$100813			SUBR	W0, [W3], [W0]
;audme21.c,458 :: 		indices[dir++] = Ampli_a;
$1B9C	$5701E8			SUB	W14, #8, W3
$1B9E	$784013			MOV.B	[W3], W0
$1BA0	$FB0000			SE	W0, W0
$1BA2	$DD0141			SL	W0, #1, W2
$1BA4	$20F200			MOV	#@_indices+0, W0
$1BA6	$400002			ADD	W0, W2, W0
$1BA8	$780003			MOV	W3, W0
$1BAA	$784010			MOV.B	[W0], W0
$1BAC	$404061			ADD.B	W0, #1, W0
$1BAE	$784980			MOV.B	W0, [W3]
;audme21.c,459 :: 		indices[dir++] = 0;
$1BB0	$FB0000			SE	W0, W0
$1BB2	$DD0141			SL	W0, #1, W2
$1BB4	$20F200			MOV	#@_indices+0, W0
$1BB6	$400102			ADD	W0, W2, W2
$1BB8	$200000			MOV	#0, W0
$1BBA	$780900			MOV	W0, [W2]
$1BBC	$200010			MOV.B	#1, W0
$1BBE	$404993			ADD.B	W0, [W3], [W3]
;audme21.c,460 :: 		}
$1BC0	$	L_CalculoIndices_107:
;audme21.c,461 :: 		}//~
$1BC0	$	L_end__CalculoIndices:
$1BC0	$FA8000			ULNK
$1BC2	$060000			RETURN
$1BC4	$	_I2c_Wait_For_Idle:
$1BC4	$FA0002			LNK	#2
;__Lib_I2c_p30.c,26 :: 		
;__Lib_I2c_p30.c,27 :: 		
$1BC6	$200010			MOV	#1, W0
$1BC8	$780F00			MOV	W0, [W14]
;__Lib_I2c_p30.c,29 :: 		
$1BCA	$	L_I2c_Wait_For_Idle_2:
$1BCA	$78001E			MOV	[W14], W0
$1BCC	$E00000			CP0	W0
$1BCE	$32001A			BRA Z	L_I2c_Wait_For_Idle_3, L_I2c_Wait_For_Idle_3
;__Lib_I2c_p30.c,30 :: 		
$1BD0	$801030			MOV	I2CCONbits+0, W0
$1BD2	$6000E1			AND	W0, #1, W1
$1BD4	$801030			MOV	I2CCONbits+0, W0
$1BD6	$600064			AND	W0, #4, W0
$1BD8	$DE0042			LSR	W0, #2, W0
$1BDA	$708080			IOR	W1, W0, W1
$1BDC	$801030			MOV	I2CCONbits+0, W0
$1BDE	$600068			AND	W0, #8, W0
$1BE0	$DE0043			LSR	W0, #3, W0
$1BE2	$708080			IOR	W1, W0, W1
$1BE4	$801030			MOV	I2CCONbits+0, W0
$1BE6	$600070			AND	W0, #16, W0
$1BE8	$DE0044			LSR	W0, #4, W0
$1BEA	$708080			IOR	W1, W0, W1
;__Lib_I2c_p30.c,31 :: 		
$1BEC	$801030			MOV	I2CCONbits+0, W0
$1BEE	$600062			AND	W0, #2, W0
$1BF0	$DE0041			LSR	W0, #1, W0
$1BF2	$708100			IOR	W1, W0, W2
$1BF4	$801041			MOV	I2CSTATbits+0, W1
$1BF6	$240000			MOV	#16384, W0
$1BF8	$608000			AND	W1, W0, W0
$1BFA	$DE00CE			LSR	W0, #14, W1
$1BFC	$470060			ADD	W14, #0, W0
$1BFE	$710801			IOR	W2, W1, [W0]
;__Lib_I2c_p30.c,32 :: 		
$1C00	$041BCA			GOTO	L_I2c_Wait_For_Idle_2
$1C04	$	L_I2c_Wait_For_Idle_3:
;__Lib_I2c_p30.c,33 :: 		
$1C04	$	L_end__I2c_Wait_For_Idle:
$1C04	$FA8000			ULNK
$1C06	$060000			RETURN
$1C08	$	_I2c_Start:
;__Lib_I2c_p30.c,51 :: 		
;__Lib_I2c_p30.c,52 :: 		
$1C08	$07FFDD			RCALL	_I2c_Wait_For_Idle, 0-1
;__Lib_I2c_p30.c,53 :: 		
$1C0A	$200011			MOV	#1, W1
$1C0C	$202060			MOV	#@I2CCONbits+0, W0
$1C0E	$708810			IOR	W1, [W0], [W0]
;__Lib_I2c_p30.c,54 :: 		
$1C10	$070011			RCALL	_I2C_Is_Finished, 0-1
;__Lib_I2c_p30.c,55 :: 		
$1C12	$	L_end__I2c_Start:
$1C12	$060000			RETURN
$1C14	$	_I2c_Write:
$1C14	$FA0000			LNK	#0
;__Lib_I2c_p30.c,80 :: 		
;__Lib_I2c_p30.c,81 :: 		
$1C16	$202021			MOV	#@I2CTRN, W1
$1C18	$570068			SUB	W14, #8, W0
$1C1A	$784890			MOV.B	[W0], [W1]
;__Lib_I2c_p30.c,82 :: 		
$1C1C	$801041			MOV	I2CSTATbits+0, W1
$1C1E	$200800			MOV	#128, W0
$1C20	$608000			AND	W1, W0, W0
$1C22	$DE00C7			LSR	W0, #7, W1
$1C24	$E00001			CP0	W1
$1C26	$320002			BRA Z	L_I2c_Write_8, L_I2c_Write_8
;__Lib_I2c_p30.c,83 :: 		
$1C28	$200010			MOV	#1, W0
$1C2A	$370002			BRA	L_end__I2c_Write
$1C2C	$	L_I2c_Write_8:
;__Lib_I2c_p30.c,85 :: 		
$1C2C	$070003			RCALL	_I2C_Is_Finished, 0-1
;__Lib_I2c_p30.c,87 :: 		
$1C2E	$200000			MOV	#0, W0
;__Lib_I2c_p30.c,88 :: 		
$1C30	$	L_end__I2c_Write:
$1C30	$FA8000			ULNK
$1C32	$060000			RETURN
$1C34	$	_I2C_Is_Finished:
;__Lib_I2c_p30.c,21 :: 		
;__Lib_I2c_p30.c,22 :: 		
$1C34	$	L_I2C_Is_Finished_0:
$1C34	$800421			MOV	IFS0bits+0, W1
$1C36	$240000			MOV	#16384, W0
$1C38	$608000			AND	W1, W0, W0
$1C3A	$DE00CE			LSR	W0, #14, W1
$1C3C	$508060			SUB	W1, #0, W0
$1C3E	$3A0002			BRA NZ	L_I2C_Is_Finished_1, L_I2C_Is_Finished_1
$1C40	$041C34			GOTO	L_I2C_Is_Finished_0
$1C44	$	L_I2C_Is_Finished_1:
;__Lib_I2c_p30.c,23 :: 		
$1C44	$2BFFF1			MOV	#49151, W1
$1C46	$200840			MOV	#@IFS0bits+0, W0
$1C48	$608810			AND	W1, [W0], [W0]
;__Lib_I2c_p30.c,24 :: 		
$1C4A	$	L_end__I2C_Is_Finished:
$1C4A	$060000			RETURN
$1C4C	$	_I2c_Stop:
;__Lib_I2c_p30.c,65 :: 		
;__Lib_I2c_p30.c,66 :: 		
$1C4C	$	L_I2c_Stop_6:
$1C4C	$801030			MOV	I2CCON, W0
$1C4E	$6000FF			AND	W0, #31, W1
$1C50	$320002			BRA Z	L_I2c_Stop_7, L_I2c_Stop_7
;__Lib_I2c_p30.c,67 :: 		
$1C52	$041C4C			GOTO	L_I2c_Stop_6
$1C56	$	L_I2c_Stop_7:
;__Lib_I2c_p30.c,69 :: 		
$1C56	$200041			MOV	#4, W1
$1C58	$202060			MOV	#@I2CCONbits+0, W0
$1C5A	$708810			IOR	W1, [W0], [W0]
;__Lib_I2c_p30.c,70 :: 		
$1C5C	$07FFEB			RCALL	_I2C_Is_Finished, 0-1
;__Lib_I2c_p30.c,71 :: 		
$1C5E	$	L_end__I2c_Stop:
$1C5E	$060000			RETURN
$1C60	$	_EscribirByte:
$1C60	$FA0000			LNK	#0
;audme21.c,571 :: 		void EscribirByte(char Adrr1, char Adrr0, unsigned int dato){
;audme21.c,572 :: 		I2C_Start();
$1C62	$07FFD2			RCALL	_I2c_Start, 0-1
;audme21.c,573 :: 		I2C_Write(0xA2);    //RW = 0
$1C64	$200A20			MOV.B	#162, W0
$1C66	$781F80			PUSH	W0
$1C68	$07FFD5			RCALL	_I2c_Write, 0100
$1C6A	$B1002F			SUB	#2, W15
;audme21.c,574 :: 		I2C_Write(Adrr1);
$1C6C	$570068			SUB	W14, #8, W0
$1C6E	$784010			MOV.B	[W0], W0
$1C70	$FB8000			ZE	W0, W0
$1C72	$781F80			PUSH	W0
$1C74	$07FFCF			RCALL	_I2c_Write, 0100
$1C76	$B1002F			SUB	#2, W15
;audme21.c,575 :: 		I2C_Write(Adrr0);
$1C78	$57006A			SUB	W14, #10, W0
$1C7A	$784010			MOV.B	[W0], W0
$1C7C	$FB8000			ZE	W0, W0
$1C7E	$781F80			PUSH	W0
$1C80	$07FFC9			RCALL	_I2c_Write, 0100
$1C82	$B1002F			SUB	#2, W15
;audme21.c,576 :: 		I2C_Write(dato);
$1C84	$57006C			SUB	W14, #12, W0
$1C86	$780010			MOV	[W0], W0
$1C88	$781F80			PUSH	W0
$1C8A	$07FFC4			RCALL	_I2c_Write, 0100
$1C8C	$B1002F			SUB	#2, W15
;audme21.c,577 :: 		I2C_Stop();
$1C8E	$07FFDE			RCALL	_I2c_Stop, 0-1
;audme21.c,578 :: 		}//~
$1C90	$	L_end__EscribirByte:
$1C90	$FA8000			ULNK
$1C92	$060000			RETURN
$1C94	$	_NewLine:
;audme21.c,609 :: 		void NewLine(){
;audme21.c,610 :: 		EnviarByte(0x0D); //Send carriage-return
$1C94	$2000D0			MOV	#13, W0
$1C96	$781F80			PUSH	W0
$1C98	$070006			RCALL	_EnviarByte, 0-101
$1C9A	$B1002F			SUB	#2, W15
;audme21.c,611 :: 		EnviarByte(0x0A); //Send line-feed
$1C9C	$2000A0			MOV	#10, W0
$1C9E	$781F80			PUSH	W0
$1CA0	$070002			RCALL	_EnviarByte, 0-101
$1CA2	$B1002F			SUB	#2, W15
;audme21.c,612 :: 		}//~
$1CA4	$	L_end__NewLine:
$1CA4	$060000			RETURN
$1CA6	$	_EnviarByte:
$1CA6	$FA0000			LNK	#0
;audme21.c,603 :: 		void EnviarByte(unsigned dato){
;audme21.c,604 :: 		U2STA.F10 = 1;  // habilita el bit UTEN
$1CA8	$204001			MOV	#1024, W1
$1CAA	$202180			MOV	#@U2STA, W0
$1CAC	$708810			IOR	W1, [W0], [W0]
;audme21.c,605 :: 		U2TXREG = dato;  // Carga los datos a enviar
$1CAE	$570068			SUB	W14, #8, W0
$1CB0	$780010			MOV	[W0], W0
$1CB2	$8810D0			MOV	W0, U2TXREG
;audme21.c,606 :: 		delay_ms(5);
$1CB4	$221960			MOV	#8598, W0
$1CB6	$781F80			PUSH	W0
$1CB8	$200010			MOV	#1, W0
$1CBA	$781F80			PUSH	W0
$1CBC	$070341			RCALL	_Delay_Cyc, 0-10101
$1CBE	$B1004F			SUB	#4, W15
;audme21.c,607 :: 		}//~
$1CC0	$	L_end__EnviarByte:
$1CC0	$FA8000			ULNK
$1CC2	$060000			RETURN
$1CC4	$	_TextToUart:
$1CC4	$FA0002			LNK	#2
;audme21.c,595 :: 		void TextToUart(unsigned char *m){
;audme21.c,596 :: 		unsigned char i=0;
$1CC6	$4700E0			ADD	W14, #0, W1
$1CC8	$200000			MOV.B	#0, W0
$1CCA	$784880			MOV.B	W0, [W1]
;audme21.c,597 :: 		while(m[i]!=0){
$1CCC	$	L_TextToUart_132:
$1CCC	$470060			ADD	W14, #0, W0
$1CCE	$784090			MOV.B	[W0], W1
$1CD0	$FB8081			ZE	W1, W1
$1CD2	$570068			SUB	W14, #8, W0
$1CD4	$408010			ADD	W1, [W0], W0
$1CD6	$784090			MOV.B	[W0], W1
$1CD8	$50C060			SUB.B	W1, #0, W0
$1CDA	$32000F			BRA Z	L_TextToUart_133, L_TextToUart_133
;audme21.c,598 :: 		EnviarByte(m[i]);
$1CDC	$470060			ADD	W14, #0, W0
$1CDE	$784090			MOV.B	[W0], W1
$1CE0	$FB8081			ZE	W1, W1
$1CE2	$570068			SUB	W14, #8, W0
$1CE4	$408010			ADD	W1, [W0], W0
$1CE6	$784010			MOV.B	[W0], W0
$1CE8	$FB8000			ZE	W0, W0
$1CEA	$781F80			PUSH	W0
$1CEC	$07FFDC			RCALL	_EnviarByte, 0-101
$1CEE	$B1002F			SUB	#2, W15
;audme21.c,599 :: 		i++;
$1CF0	$200011			MOV.B	#1, W1
$1CF2	$470060			ADD	W14, #0, W0
$1CF4	$40C810			ADD.B	W1, [W0], [W0]
;audme21.c,600 :: 		}
$1CF6	$041CCC			GOTO	L_TextToUart_132
$1CFA	$	L_TextToUart_133:
;audme21.c,601 :: 		}//~
$1CFA	$	L_end__TextToUart:
$1CFA	$FA8000			ULNK
$1CFC	$060000			RETURN
$1CFE	$	_WordToStr:
$1CFE	$FA0006			LNK	#6
;__Lib_Conv.c,20 :: 		
;__Lib_Conv.c,25 :: 		
$1D00	$4702E0			ADD	W14, #0, W5
$1D02	$200000			MOV.B	#0, W0
$1D04	$784A80			MOV.B	W0, [W5]
$1D06	$	L_WordToStr_6:
$1D06	$470060			ADD	W14, #0, W0
$1D08	$784290			MOV.B	[W0], W5
$1D0A	$52C065			SUB.B	W5, #5, W0
$1D0C	$31000C			BRA GEU	L_WordToStr_7, L_WordToStr_7
;__Lib_Conv.c,26 :: 		
$1D0E	$470060			ADD	W14, #0, W0
$1D10	$784290			MOV.B	[W0], W5
$1D12	$FB8285			ZE	W5, W5
$1D14	$57006A			SUB	W14, #10, W0
$1D16	$428290			ADD	W5, [W0], W5
$1D18	$200200			MOV.B	#32, W0
$1D1A	$784A80			MOV.B	W0, [W5]
$1D1C	$	L_WordToStr_8:
;__Lib_Conv.c,25 :: 		
$1D1C	$200015			MOV.B	#1, W5
$1D1E	$470060			ADD	W14, #0, W0
$1D20	$42C810			ADD.B	W5, [W0], [W0]
;__Lib_Conv.c,26 :: 		
$1D22	$041D06			GOTO	L_WordToStr_6
$1D26	$	L_WordToStr_7:
;__Lib_Conv.c,27 :: 		
$1D26	$470360			ADD	W14, #0, W6
$1D28	$784296			MOV.B	[W6], W5
$1D2A	$FB8285			ZE	W5, W5
$1D2C	$57006A			SUB	W14, #10, W0
$1D2E	$428290			ADD	W5, [W0], W5
$1D30	$200000			MOV.B	#0, W0
$1D32	$784A80			MOV.B	W0, [W5]
$1D34	$200010			MOV.B	#1, W0
$1D36	$104B16			SUBR.B	W0, [W6], [W6]
;__Lib_Conv.c,29 :: 		
$1D38	$	L_WordToStr_9:
;__Lib_Conv.c,30 :: 		
$1D38	$470060			ADD	W14, #0, W0
$1D3A	$784290			MOV.B	[W0], W5
$1D3C	$FB8285			ZE	W5, W5
$1D3E	$57006A			SUB	W14, #10, W0
$1D40	$428010			ADD	W5, [W0], W0
$1D42	$980720			MOV	W0, [W14+4]
$1D44	$570068			SUB	W14, #8, W0
$1D46	$980710			MOV	W0, [W14+2]
$1D48	$780290			MOV	[W0], W5
$1D4A	$2000A2			MOV	#10, W2
$1D4C	$090011			REPEAT	#17
$1D4E	$D88282			DIV.U	W5, W2
$1D50	$780001			MOV	W1, W0
$1D52	$200306			MOV.B	#48, W6
$1D54	$9002AE			MOV	[W14+4], W5
$1D56	$404A86			ADD.B	W0, W6, [W5]
$1D58	$90002E			MOV	[W14+4], W0
;__Lib_Conv.c,31 :: 		
$1D5A	$90001E			MOV	[W14+2], W0
$1D5C	$780290			MOV	[W0], W5
$1D5E	$2000A2			MOV	#10, W2
$1D60	$090011			REPEAT	#17
$1D62	$D88282			DIV.U	W5, W2
$1D64	$9FBF40			MOV	W0, [W14+-8]
;__Lib_Conv.c,32 :: 		
$1D66	$5002E0			SUB	W0, #0, W5
$1D68	$3A0002			BRA NZ	L_WordToStr_11, L_WordToStr_11
;__Lib_Conv.c,33 :: 		
$1D6A	$041D78			GOTO	L_WordToStr_10
$1D6E	$	L_WordToStr_11:
;__Lib_Conv.c,34 :: 		
$1D6E	$200015			MOV.B	#1, W5
$1D70	$470060			ADD	W14, #0, W0
$1D72	$12C810			SUBR.B	W5, [W0], [W0]
;__Lib_Conv.c,35 :: 		
$1D74	$041D38			GOTO	L_WordToStr_9
$1D78	$	L_WordToStr_10:
;__Lib_Conv.c,36 :: 		
$1D78	$	L_end__WordToStr:
$1D78	$FA8000			ULNK
$1D7A	$060000			RETURN
$1D7C	$	_IntToStr:
$1D7C	$FA0006			LNK	#6
;__Lib_Conv.c,68 :: 		
;__Lib_Conv.c,76 :: 		
$1D7E	$200000			MOV	#0, W0
$1D80	$980710			MOV	W0, [W14+2]
;__Lib_Conv.c,77 :: 		
$1D82	$5700E8			SUB	W14, #8, W1
$1D84	$780011			MOV	[W1], W0
$1D86	$980720			MOV	W0, [W14+4]
;__Lib_Conv.c,78 :: 		
$1D88	$780001			MOV	W1, W0
$1D8A	$780090			MOV	[W0], W1
$1D8C	$508060			SUB	W1, #0, W0
$1D8E	$3D0006			BRA GE	L_IntToStr_18, L_IntToStr_18
;__Lib_Conv.c,79 :: 		
$1D90	$200010			MOV	#1, W0
$1D92	$980710			MOV	W0, [W14+2]
;__Lib_Conv.c,80 :: 		
$1D94	$570068			SUB	W14, #8, W0
$1D96	$780090			MOV	[W0], W1
$1D98	$470064			ADD	W14, #4, W0
$1D9A	$108860			SUBR	W1, #0, [W0]
;__Lib_Conv.c,81 :: 		
$1D9C	$	L_IntToStr_18:
;__Lib_Conv.c,82 :: 		
$1D9C	$57006A			SUB	W14, #10, W0
$1D9E	$781F90			PUSH	[W0]
$1DA0	$470064			ADD	W14, #4, W0
$1DA2	$781F90			PUSH	[W0]
$1DA4	$07FFAC			RCALL	_WordToStr, 0-101015
$1DA6	$B1004F			SUB	#4, W15
;__Lib_Conv.c,84 :: 		
$1DA8	$200060			MOV	#6, W0
$1DAA	$780F00			MOV	W0, [W14]
;__Lib_Conv.c,85 :: 		
$1DAC	$	L_IntToStr_19:
$1DAC	$470060			ADD	W14, #0, W0
$1DAE	$780090			MOV	[W0], W1
$1DB0	$508060			SUB	W1, #0, W0
$1DB2	$36000E			BRA LEU	L_IntToStr_20, L_IntToStr_20
;__Lib_Conv.c,86 :: 		
$1DB4	$57026A			SUB	W14, #10, W4
$1DB6	$780014			MOV	[W4], W0
$1DB8	$4701E0			ADD	W14, #0, W3
$1DBA	$400113			ADD	W0, [W3], W2
$1DBC	$780003			MOV	W3, W0
$1DBE	$780010			MOV	[W0], W0
$1DC0	$5000E1			SUB	W0, #1, W1
$1DC2	$780004			MOV	W4, W0
$1DC4	$408010			ADD	W1, [W0], W0
$1DC6	$784910			MOV.B	[W0], [W2]
;__Lib_Conv.c,87 :: 		
$1DC8	$200010			MOV	#1, W0
$1DCA	$100993			SUBR	W0, [W3], [W3]
;__Lib_Conv.c,88 :: 		
$1DCC	$041DAC			GOTO	L_IntToStr_19
$1DD0	$	L_IntToStr_20:
;__Lib_Conv.c,89 :: 		
$1DD0	$97B8BE			MOV	[W14+-10], W1
$1DD2	$200200			MOV.B	#32, W0
$1DD4	$784880			MOV.B	W0, [W1]
;__Lib_Conv.c,90 :: 		
$1DD6	$90001E			MOV	[W14+2], W0
$1DD8	$E00000			CP0	W0
$1DDA	$320017			BRA Z	L_IntToStr_21, L_IntToStr_21
;__Lib_Conv.c,91 :: 		
$1DDC	$200000			MOV	#0, W0
$1DDE	$780F00			MOV	W0, [W14]
;__Lib_Conv.c,92 :: 		
$1DE0	$	L_IntToStr_22:
$1DE0	$57006A			SUB	W14, #10, W0
$1DE2	$780090			MOV	[W0], W1
$1DE4	$470060			ADD	W14, #0, W0
$1DE6	$408010			ADD	W1, [W0], W0
$1DE8	$784110			MOV.B	[W0], W2
$1DEA	$200201			MOV	#32, W1
$1DEC	$514001			SUB.B	W2, W1, W0
$1DEE	$3A0005			BRA NZ	L_IntToStr_23, L_IntToStr_23
$1DF0	$200011			MOV	#1, W1
$1DF2	$470060			ADD	W14, #0, W0
$1DF4	$408810			ADD	W1, [W0], [W0]
$1DF6	$041DE0			GOTO	L_IntToStr_22
$1DFA	$	L_IntToStr_23:
;__Lib_Conv.c,93 :: 		
$1DFA	$470060			ADD	W14, #0, W0
$1DFC	$780010			MOV	[W0], W0
$1DFE	$5000E1			SUB	W0, #1, W1
$1E00	$780F01			MOV	W1, [W14]
;__Lib_Conv.c,94 :: 		
$1E02	$57006A			SUB	W14, #10, W0
$1E04	$408090			ADD	W1, [W0], W1
$1E06	$2002D0			MOV.B	#45, W0
$1E08	$784880			MOV.B	W0, [W1]
$1E0A	$	L_IntToStr_21:
;__Lib_Conv.c,95 :: 		
$1E0A	$	L_end__IntToStr:
$1E0A	$FA8000			ULNK
$1E0C	$060000			RETURN
$1E0E	$	_Delay_1us:
;Delays.c,194 :: 		void Delay_1us()
;Delays.c,196 :: 		Delay_us(1);
$1E0E	$090003			REPEAT	3
$1E10	$000000			NOP
;Delays.c,197 :: 		}
$1E12	$	L_end__Delay_1us:
$1E12	$060000			RETURN
$1E14	$	__Lib_LcdCustom__Strobe:
;__Lib_LcdCustom.c,56 :: 		
;__Lib_LcdCustom.c,57 :: 		
$1E14	$807081			MOV	__Lib_LcdCustom_ctrlPort, W1
$1E16	$807060			MOV	__Lib_LcdCustom____mENABLE, W0
$1E18	$700891			IOR	W0, [W1], [W1]
;__Lib_LcdCustom.c,58 :: 		
$1E1A	$07FFF9			RCALL	_Delay_1us, 0-1
;__Lib_LcdCustom.c,59 :: 		
$1E1C	$807060			MOV	__Lib_LcdCustom____mENABLE, W0
$1E1E	$EA8080			COM	W0, W1
$1E20	$807080			MOV	__Lib_LcdCustom_ctrlPort, W0
$1E22	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,60 :: 		
$1E24	$07FFF4			RCALL	_Delay_1us, 0-1
;__Lib_LcdCustom.c,61 :: 		
$1E26	$	L_end___Lib_LcdCustom__Strobe:
$1E26	$060000			RETURN
$1E28	$	_Delay_5500us:
;Delays.c,350 :: 		void Delay_5500us()
;Delays.c,352 :: 		Delay_us(5500);
$1E28	$22B5A0			MOV	#11098, W0
$1E2A	$781F80			PUSH	W0
$1E2C	$200010			MOV	#1, W0
$1E2E	$781F80			PUSH	W0
$1E30	$070287			RCALL	_Delay_Cyc, 0-10101
$1E32	$B1004F			SUB	#4, W15
;Delays.c,353 :: 		}
$1E34	$	L_end__Delay_5500us:
$1E34	$060000			RETURN
$1E36	$	_Delay_50us:
;Delays.c,272 :: 		void Delay_50us()
;Delays.c,274 :: 		Delay_us(50);
$1E36	$200E80			MOV	#232, W0
$1E38	$781F80			PUSH	W0
$1E3A	$200000			MOV	#0, W0
$1E3C	$781F80			PUSH	W0
$1E3E	$070280			RCALL	_Delay_Cyc, 0-10101
$1E40	$B1004F			SUB	#4, W15
;Delays.c,275 :: 		}
$1E42	$	L_end__Delay_50us:
$1E42	$060000			RETURN
$1E44	$	_Lcd_Custom_Cmd:
$1E44	$FA0000			LNK	#0
;__Lib_LcdCustom.c,84 :: 		
;__Lib_LcdCustom.c,86 :: 		
$1E46	$570168			SUB	W14, #8, W2
$1E48	$780002			MOV	W2, W0
$1E4A	$784010			MOV.B	[W0], W0
$1E4C	$FB8000			ZE	W0, W0
$1E4E	$887B30			MOV	W0, __Lib_LcdCustom_tmpData
;__Lib_LcdCustom.c,87 :: 		
$1E50	$807041			MOV	__Lib_LcdCustom____mRS, W1
$1E52	$20E0A0			MOV	#@__Lib_LcdCustom____mRW, W0
$1E54	$708090			IOR	W1, [W0], W1
$1E56	$20E0C0			MOV	#@__Lib_LcdCustom____mENABLE, W0
$1E58	$708010			IOR	W1, [W0], W0
$1E5A	$EA8080			COM	W0, W1
$1E5C	$807080			MOV	__Lib_LcdCustom_ctrlPort, W0
$1E5E	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,88 :: 		
$1E60	$807001			MOV	__Lib_LcdCustom____mDB7, W1
$1E62	$20E020			MOV	#@__Lib_LcdCustom____mDB6, W0
$1E64	$708090			IOR	W1, [W0], W1
$1E66	$20E040			MOV	#@__Lib_LcdCustom____mDB5, W0
$1E68	$708090			IOR	W1, [W0], W1
$1E6A	$20E060			MOV	#@__Lib_LcdCustom____mDB4, W0
$1E6C	$708010			IOR	W1, [W0], W0
$1E6E	$EA8080			COM	W0, W1
$1E70	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$1E72	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,90 :: 		
$1E74	$780002			MOV	W2, W0
$1E76	$784090			MOV.B	[W0], W1
$1E78	$FB8081			ZE	W1, W1
$1E7A	$200800			MOV	#128, W0
$1E7C	$608080			AND	W1, W0, W1
$1E7E	$320003			BRA Z	L_Lcd_Custom_Cmd_0, L_Lcd_Custom_Cmd_0
;__Lib_LcdCustom.c,91 :: 		
$1E80	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$1E82	$807000			MOV	__Lib_LcdCustom____mDB7, W0
$1E84	$700891			IOR	W0, [W1], [W1]
$1E86	$	L_Lcd_Custom_Cmd_0:
;__Lib_LcdCustom.c,92 :: 		
$1E86	$570068			SUB	W14, #8, W0
$1E88	$784090			MOV.B	[W0], W1
$1E8A	$FB8081			ZE	W1, W1
$1E8C	$200400			MOV	#64, W0
$1E8E	$608080			AND	W1, W0, W1
$1E90	$320003			BRA Z	L_Lcd_Custom_Cmd_1, L_Lcd_Custom_Cmd_1
;__Lib_LcdCustom.c,93 :: 		
$1E92	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$1E94	$807010			MOV	__Lib_LcdCustom____mDB6, W0
$1E96	$700891			IOR	W0, [W1], [W1]
$1E98	$	L_Lcd_Custom_Cmd_1:
;__Lib_LcdCustom.c,94 :: 		
$1E98	$570068			SUB	W14, #8, W0
$1E9A	$784090			MOV.B	[W0], W1
$1E9C	$FB8081			ZE	W1, W1
$1E9E	$200200			MOV	#32, W0
$1EA0	$608080			AND	W1, W0, W1
$1EA2	$320003			BRA Z	L_Lcd_Custom_Cmd_2, L_Lcd_Custom_Cmd_2
;__Lib_LcdCustom.c,95 :: 		
$1EA4	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$1EA6	$807020			MOV	__Lib_LcdCustom____mDB5, W0
$1EA8	$700891			IOR	W0, [W1], [W1]
$1EAA	$	L_Lcd_Custom_Cmd_2:
;__Lib_LcdCustom.c,96 :: 		
$1EAA	$570068			SUB	W14, #8, W0
$1EAC	$784010			MOV.B	[W0], W0
$1EAE	$FB8000			ZE	W0, W0
$1EB0	$6000F0			AND	W0, #16, W1
$1EB2	$320003			BRA Z	L_Lcd_Custom_Cmd_3, L_Lcd_Custom_Cmd_3
;__Lib_LcdCustom.c,97 :: 		
$1EB4	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$1EB6	$807030			MOV	__Lib_LcdCustom____mDB4, W0
$1EB8	$700891			IOR	W0, [W1], [W1]
$1EBA	$	L_Lcd_Custom_Cmd_3:
;__Lib_LcdCustom.c,99 :: 		
$1EBA	$807090			MOV	__Lib_LcdCustom_lcdCmdStatus, W0
$1EBC	$E00000			CP0	W0
$1EBE	$320006			BRA Z	L_Lcd_Custom_Cmd_4, L_Lcd_Custom_Cmd_4
;__Lib_LcdCustom.c,100 :: 		
$1EC0	$807040			MOV	__Lib_LcdCustom____mRS, W0
$1EC2	$EA8080			COM	W0, W1
$1EC4	$807080			MOV	__Lib_LcdCustom_ctrlPort, W0
$1EC6	$608810			AND	W1, [W0], [W0]
$1EC8	$041ED2			GOTO	L_Lcd_Custom_Cmd_5
$1ECC	$	L_Lcd_Custom_Cmd_4:
;__Lib_LcdCustom.c,102 :: 		
$1ECC	$807081			MOV	__Lib_LcdCustom_ctrlPort, W1
$1ECE	$807040			MOV	__Lib_LcdCustom____mRS, W0
$1ED0	$700891			IOR	W0, [W1], [W1]
$1ED2	$	L_Lcd_Custom_Cmd_5:
;__Lib_LcdCustom.c,104 :: 		
$1ED2	$07FFA0			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,106 :: 		
$1ED4	$807041			MOV	__Lib_LcdCustom____mRS, W1
$1ED6	$20E0A0			MOV	#@__Lib_LcdCustom____mRW, W0
$1ED8	$708090			IOR	W1, [W0], W1
$1EDA	$20E0C0			MOV	#@__Lib_LcdCustom____mENABLE, W0
$1EDC	$708010			IOR	W1, [W0], W0
$1EDE	$EA8080			COM	W0, W1
$1EE0	$807080			MOV	__Lib_LcdCustom_ctrlPort, W0
$1EE2	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,107 :: 		
$1EE4	$807001			MOV	__Lib_LcdCustom____mDB7, W1
$1EE6	$20E020			MOV	#@__Lib_LcdCustom____mDB6, W0
$1EE8	$708090			IOR	W1, [W0], W1
$1EEA	$20E040			MOV	#@__Lib_LcdCustom____mDB5, W0
$1EEC	$708090			IOR	W1, [W0], W1
$1EEE	$20E060			MOV	#@__Lib_LcdCustom____mDB4, W0
$1EF0	$708010			IOR	W1, [W0], W0
$1EF2	$EA8080			COM	W0, W1
$1EF4	$807070			MOV	__Lib_LcdCustom_dataPort, W0
$1EF6	$608810			AND	W1, [W0], [W0]
;__Lib_LcdCustom.c,108 :: 		
$1EF8	$570068			SUB	W14, #8, W0
$1EFA	$784010			MOV.B	[W0], W0
$1EFC	$FB8000			ZE	W0, W0
$1EFE	$6000E8			AND	W0, #8, W1
$1F00	$320003			BRA Z	L_Lcd_Custom_Cmd_6, L_Lcd_Custom_Cmd_6
;__Lib_LcdCustom.c,109 :: 		
$1F02	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$1F04	$807000			MOV	__Lib_LcdCustom____mDB7, W0
$1F06	$700891			IOR	W0, [W1], [W1]
$1F08	$	L_Lcd_Custom_Cmd_6:
;__Lib_LcdCustom.c,110 :: 		
$1F08	$570068			SUB	W14, #8, W0
$1F0A	$784010			MOV.B	[W0], W0
$1F0C	$FB8000			ZE	W0, W0
$1F0E	$6000E4			AND	W0, #4, W1
$1F10	$320003			BRA Z	L_Lcd_Custom_Cmd_7, L_Lcd_Custom_Cmd_7
;__Lib_LcdCustom.c,111 :: 		
$1F12	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$1F14	$807010			MOV	__Lib_LcdCustom____mDB6, W0
$1F16	$700891			IOR	W0, [W1], [W1]
$1F18	$	L_Lcd_Custom_Cmd_7:
;__Lib_LcdCustom.c,112 :: 		
$1F18	$570068			SUB	W14, #8, W0
$1F1A	$784010			MOV.B	[W0], W0
$1F1C	$FB8000			ZE	W0, W0
$1F1E	$6000E2			AND	W0, #2, W1
$1F20	$320003			BRA Z	L_Lcd_Custom_Cmd_8, L_Lcd_Custom_Cmd_8
;__Lib_LcdCustom.c,113 :: 		
$1F22	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$1F24	$807020			MOV	__Lib_LcdCustom____mDB5, W0
$1F26	$700891			IOR	W0, [W1], [W1]
$1F28	$	L_Lcd_Custom_Cmd_8:
;__Lib_LcdCustom.c,114 :: 		
$1F28	$570068			SUB	W14, #8, W0
$1F2A	$784010			MOV.B	[W0], W0
$1F2C	$FB8000			ZE	W0, W0
$1F2E	$6000E1			AND	W0, #1, W1
$1F30	$320003			BRA Z	L_Lcd_Custom_Cmd_9, L_Lcd_Custom_Cmd_9
;__Lib_LcdCustom.c,115 :: 		
$1F32	$807071			MOV	__Lib_LcdCustom_dataPort, W1
$1F34	$807030			MOV	__Lib_LcdCustom____mDB4, W0
$1F36	$700891			IOR	W0, [W1], [W1]
$1F38	$	L_Lcd_Custom_Cmd_9:
;__Lib_LcdCustom.c,117 :: 		
$1F38	$807090			MOV	__Lib_LcdCustom_lcdCmdStatus, W0
$1F3A	$E00000			CP0	W0
$1F3C	$320006			BRA Z	L_Lcd_Custom_Cmd_10, L_Lcd_Custom_Cmd_10
;__Lib_LcdCustom.c,118 :: 		
$1F3E	$807040			MOV	__Lib_LcdCustom____mRS, W0
$1F40	$EA8080			COM	W0, W1
$1F42	$807080			MOV	__Lib_LcdCustom_ctrlPort, W0
$1F44	$608810			AND	W1, [W0], [W0]
$1F46	$041F50			GOTO	L_Lcd_Custom_Cmd_11
$1F4A	$	L_Lcd_Custom_Cmd_10:
;__Lib_LcdCustom.c,120 :: 		
$1F4A	$807081			MOV	__Lib_LcdCustom_ctrlPort, W1
$1F4C	$807040			MOV	__Lib_LcdCustom____mRS, W0
$1F4E	$700891			IOR	W0, [W1], [W1]
$1F50	$	L_Lcd_Custom_Cmd_11:
;__Lib_LcdCustom.c,122 :: 		
$1F50	$07FF61			RCALL	__Lib_LcdCustom__Strobe, 0-1
;__Lib_LcdCustom.c,124 :: 		
$1F52	$807090			MOV	__Lib_LcdCustom_lcdCmdStatus, W0
$1F54	$E00000			CP0	W0
$1F56	$320003			BRA Z	L_Lcd_Custom_Cmd_12, L_Lcd_Custom_Cmd_12
;__Lib_LcdCustom.c,125 :: 		
$1F58	$07FF67			RCALL	_Delay_5500us, 0-1
$1F5A	$041F60			GOTO	L_Lcd_Custom_Cmd_13
$1F5E	$	L_Lcd_Custom_Cmd_12:
;__Lib_LcdCustom.c,127 :: 		
$1F5E	$07FF6B			RCALL	_Delay_50us, 0-1
$1F60	$	L_Lcd_Custom_Cmd_13:
;__Lib_LcdCustom.c,128 :: 		
$1F60	$	L_end__Lcd_Custom_Cmd:
$1F60	$FA8000			ULNK
$1F62	$060000			RETURN
$1F64	$	_Lcd_Custom_Chr_CP:
$1F64	$FA0000			LNK	#0
;__Lib_LcdCustom.c,147 :: 		
;__Lib_LcdCustom.c,149 :: 		
$1F66	$200000			MOV	#0, W0
$1F68	$887090			MOV	W0, __Lib_LcdCustom_lcdCmdStatus
;__Lib_LcdCustom.c,150 :: 		
$1F6A	$570068			SUB	W14, #8, W0
$1F6C	$784010			MOV.B	[W0], W0
$1F6E	$FB8000			ZE	W0, W0
$1F70	$781F80			PUSH	W0
$1F72	$07FF68			RCALL	_Lcd_Custom_Cmd, 0-100
$1F74	$B1002F			SUB	#2, W15
;__Lib_LcdCustom.c,151 :: 		
$1F76	$200010			MOV	#1, W0
$1F78	$887090			MOV	W0, __Lib_LcdCustom_lcdCmdStatus
;__Lib_LcdCustom.c,152 :: 		
$1F7A	$	L_end__Lcd_Custom_Chr_CP:
$1F7A	$FA8000			ULNK
$1F7C	$060000			RETURN
$1F7E	$	_Lcd_Custom_Out_CP:
$1F7E	$FA0002			LNK	#2
;__Lib_LcdCustom.c,208 :: 		
;__Lib_LcdCustom.c,210 :: 		
$1F80	$4700E0			ADD	W14, #0, W1
$1F82	$200000			MOV.B	#0, W0
$1F84	$784880			MOV.B	W0, [W1]
;__Lib_LcdCustom.c,212 :: 		
$1F86	$	L_Lcd_Custom_Out_CP_21:
$1F86	$470060			ADD	W14, #0, W0
$1F88	$784090			MOV.B	[W0], W1
$1F8A	$FB8081			ZE	W1, W1
$1F8C	$570068			SUB	W14, #8, W0
$1F8E	$408090			ADD	W1, [W0], W1
$1F90	$E00411			CP0.B	[W1]
$1F92	$32000E			BRA Z	L_Lcd_Custom_Out_CP_22, L_Lcd_Custom_Out_CP_22
;__Lib_LcdCustom.c,213 :: 		
$1F94	$470060			ADD	W14, #0, W0
$1F96	$784090			MOV.B	[W0], W1
$1F98	$FB8081			ZE	W1, W1
$1F9A	$570068			SUB	W14, #8, W0
$1F9C	$408090			ADD	W1, [W0], W1
$1F9E	$784011			MOV.B	[W1], W0
$1FA0	$781F80			PUSH	W0
$1FA2	$07FFE0			RCALL	_Lcd_Custom_Chr_CP, 0-100
$1FA4	$B1002F			SUB	#2, W15
$1FA6	$200011			MOV.B	#1, W1
$1FA8	$470060			ADD	W14, #0, W0
$1FAA	$40C810			ADD.B	W1, [W0], [W0]
;__Lib_LcdCustom.c,214 :: 		
$1FAC	$041F86			GOTO	L_Lcd_Custom_Out_CP_21
$1FB0	$	L_Lcd_Custom_Out_CP_22:
;__Lib_LcdCustom.c,215 :: 		
$1FB0	$	L_end__Lcd_Custom_Out_CP:
$1FB0	$FA8000			ULNK
$1FB2	$060000			RETURN
$1FB4	$	_Lcd_Custom_Out:
$1FB4	$FA0000			LNK	#0
;__Lib_LcdCustom.c,234 :: 		
;__Lib_LcdCustom.c,236 :: 		
$1FB6	$041FEC			GOTO	L_Lcd_Custom_Out_23
;__Lib_LcdCustom.c,237 :: 		
$1FBA	$	L_Lcd_Custom_Out_25:
$1FBA	$5700E8			SUB	W14, #8, W1
$1FBC	$200800			MOV.B	#128, W0
$1FBE	$784880			MOV.B	W0, [W1]
$1FC0	$042010			GOTO	L_Lcd_Custom_Out_24
;__Lib_LcdCustom.c,238 :: 		
$1FC4	$	L_Lcd_Custom_Out_26:
$1FC4	$5700E8			SUB	W14, #8, W1
$1FC6	$200C00			MOV.B	#192, W0
$1FC8	$784880			MOV.B	W0, [W1]
$1FCA	$042010			GOTO	L_Lcd_Custom_Out_24
;__Lib_LcdCustom.c,239 :: 		
$1FCE	$	L_Lcd_Custom_Out_27:
$1FCE	$5700E8			SUB	W14, #8, W1
$1FD0	$200940			MOV.B	#148, W0
$1FD2	$784880			MOV.B	W0, [W1]
$1FD4	$042010			GOTO	L_Lcd_Custom_Out_24
;__Lib_LcdCustom.c,240 :: 		
$1FD8	$	L_Lcd_Custom_Out_28:
$1FD8	$5700E8			SUB	W14, #8, W1
$1FDA	$200D40			MOV.B	#212, W0
$1FDC	$784880			MOV.B	W0, [W1]
$1FDE	$042010			GOTO	L_Lcd_Custom_Out_24
;__Lib_LcdCustom.c,241 :: 		
$1FE2	$	L_Lcd_Custom_Out_29:
$1FE2	$5700E8			SUB	W14, #8, W1
$1FE4	$200800			MOV.B	#128, W0
$1FE6	$784880			MOV.B	W0, [W1]
;__Lib_LcdCustom.c,242 :: 		
$1FE8	$042010			GOTO	L_Lcd_Custom_Out_24
$1FEC	$	L_Lcd_Custom_Out_23:
$1FEC	$570068			SUB	W14, #8, W0
$1FEE	$784090			MOV.B	[W0], W1
$1FF0	$50C061			SUB.B	W1, #1, W0
$1FF2	$32FFE3			BRA Z	L_Lcd_Custom_Out_25, L_Lcd_Custom_Out_25
$1FF4	$570068			SUB	W14, #8, W0
$1FF6	$784090			MOV.B	[W0], W1
$1FF8	$50C062			SUB.B	W1, #2, W0
$1FFA	$32FFE4			BRA Z	L_Lcd_Custom_Out_26, L_Lcd_Custom_Out_26
$1FFC	$570068			SUB	W14, #8, W0
$1FFE	$784090			MOV.B	[W0], W1
$2000	$50C063			SUB.B	W1, #3, W0
$2002	$32FFE5			BRA Z	L_Lcd_Custom_Out_27, L_Lcd_Custom_Out_27
$2004	$570068			SUB	W14, #8, W0
$2006	$784090			MOV.B	[W0], W1
$2008	$50C064			SUB.B	W1, #4, W0
$200A	$32FFE6			BRA Z	L_Lcd_Custom_Out_28, L_Lcd_Custom_Out_28
$200C	$041FE2			GOTO	L_Lcd_Custom_Out_29
$2010	$	L_Lcd_Custom_Out_24:
;__Lib_LcdCustom.c,243 :: 		
$2010	$57006A			SUB	W14, #10, W0
$2012	$784010			MOV.B	[W0], W0
$2014	$FB8000			ZE	W0, W0
$2016	$500161			SUB	W0, #1, W2
$2018	$5700E8			SUB	W14, #8, W1
$201A	$784011			MOV.B	[W1], W0
$201C	$FB8000			ZE	W0, W0
$201E	$400002			ADD	W0, W2, W0
$2020	$784880			MOV.B	W0, [W1]
;__Lib_LcdCustom.c,245 :: 		
$2022	$781F80			PUSH	W0
$2024	$07FF0F			RCALL	_Lcd_Custom_Cmd, 0-100
$2026	$B1002F			SUB	#2, W15
;__Lib_LcdCustom.c,246 :: 		
$2028	$57006C			SUB	W14, #12, W0
$202A	$781F90			PUSH	[W0]
$202C	$07FFA8			RCALL	_Lcd_Custom_Out_CP, 0-1015
$202E	$B1002F			SUB	#2, W15
;__Lib_LcdCustom.c,247 :: 		
$2030	$	L_end__Lcd_Custom_Out:
$2030	$FA8000			ULNK
$2032	$060000			RETURN
$2034	$	_ByteToStr:
$2034	$FA0006			LNK	#6
;__Lib_Conv.c,3 :: 		
;__Lib_Conv.c,6 :: 		
$2036	$200000			MOV	#0, W0
$2038	$780F00			MOV	W0, [W14]
$203A	$	L_ByteToStr_0:
$203A	$470060			ADD	W14, #0, W0
$203C	$780290			MOV	[W0], W5
$203E	$528063			SUB	W5, #3, W0
$2040	$3D000B			BRA GE	L_ByteToStr_1, L_ByteToStr_1
;__Lib_Conv.c,7 :: 		
$2042	$57006A			SUB	W14, #10, W0
$2044	$780290			MOV	[W0], W5
$2046	$470060			ADD	W14, #0, W0
$2048	$428290			ADD	W5, [W0], W5
$204A	$200200			MOV.B	#32, W0
$204C	$784A80			MOV.B	W0, [W5]
$204E	$	L_ByteToStr_2:
;__Lib_Conv.c,6 :: 		
$204E	$200015			MOV	#1, W5
$2050	$470060			ADD	W14, #0, W0
$2052	$428810			ADD	W5, [W0], [W0]
;__Lib_Conv.c,7 :: 		
$2054	$04203A			GOTO	L_ByteToStr_0
$2058	$	L_ByteToStr_1:
;__Lib_Conv.c,8 :: 		
$2058	$57006A			SUB	W14, #10, W0
$205A	$780010			MOV	[W0], W0
$205C	$470360			ADD	W14, #0, W6
$205E	$400296			ADD	W0, [W6], W5
$2060	$200000			MOV.B	#0, W0
$2062	$784A80			MOV.B	W0, [W5]
$2064	$200010			MOV	#1, W0
$2066	$100B16			SUBR	W0, [W6], [W6]
;__Lib_Conv.c,10 :: 		
$2068	$	L_ByteToStr_3:
;__Lib_Conv.c,11 :: 		
$2068	$57006A			SUB	W14, #10, W0
$206A	$780290			MOV	[W0], W5
$206C	$470060			ADD	W14, #0, W0
$206E	$428010			ADD	W5, [W0], W0
$2070	$980720			MOV	W0, [W14+4]
$2072	$570068			SUB	W14, #8, W0
$2074	$980710			MOV	W0, [W14+2]
$2076	$784290			MOV.B	[W0], W5
$2078	$FB8285			ZE	W5, W5
$207A	$2000A2			MOV	#10, W2
$207C	$090011			REPEAT	#17
$207E	$D88282			DIV.U	W5, W2
$2080	$780001			MOV	W1, W0
$2082	$200306			MOV.B	#48, W6
$2084	$9002AE			MOV	[W14+4], W5
$2086	$404A86			ADD.B	W0, W6, [W5]
$2088	$90002E			MOV	[W14+4], W0
;__Lib_Conv.c,12 :: 		
$208A	$90001E			MOV	[W14+2], W0
$208C	$784290			MOV.B	[W0], W5
$208E	$FB8285			ZE	W5, W5
$2090	$2000A2			MOV	#10, W2
$2092	$090011			REPEAT	#17
$2094	$D88282			DIV.U	W5, W2
$2096	$90029E			MOV	[W14+2], W5
$2098	$784A80			MOV.B	W0, [W5]
;__Lib_Conv.c,13 :: 		
$209A	$784280			MOV.B	W0, W5
$209C	$52C060			SUB.B	W5, #0, W0
$209E	$3A0002			BRA NZ	L_ByteToStr_5, L_ByteToStr_5
;__Lib_Conv.c,14 :: 		
$20A0	$0420AE			GOTO	L_ByteToStr_4
$20A4	$	L_ByteToStr_5:
;__Lib_Conv.c,15 :: 		
$20A4	$200015			MOV	#1, W5
$20A6	$470060			ADD	W14, #0, W0
$20A8	$128810			SUBR	W5, [W0], [W0]
;__Lib_Conv.c,16 :: 		
$20AA	$042068			GOTO	L_ByteToStr_3
$20AE	$	L_ByteToStr_4:
;__Lib_Conv.c,17 :: 		
$20AE	$	L_end__ByteToStr:
$20AE	$FA8000			ULNK
$20B0	$060000			RETURN
$20B2	$	_ShortToStr:
$20B2	$FA0006			LNK	#6
;__Lib_Conv.c,39 :: 		
;__Lib_Conv.c,44 :: 		
$20B4	$200000			MOV	#0, W0
$20B6	$980710			MOV	W0, [W14+2]
;__Lib_Conv.c,45 :: 		
$20B8	$5700E8			SUB	W14, #8, W1
$20BA	$780001			MOV	W1, W0
$20BC	$784010			MOV.B	[W0], W0
$20BE	$FB0000			SE	W0, W0
$20C0	$980720			MOV	W0, [W14+4]
;__Lib_Conv.c,46 :: 		
$20C2	$780001			MOV	W1, W0
$20C4	$784090			MOV.B	[W0], W1
$20C6	$50C060			SUB.B	W1, #0, W0
$20C8	$3D0008			BRA GE	L_ShortToStr_12, L_ShortToStr_12
;__Lib_Conv.c,47 :: 		
$20CA	$200011			MOV	#1, W1
$20CC	$470062			ADD	W14, #2, W0
$20CE	$408810			ADD	W1, [W0], [W0]
;__Lib_Conv.c,48 :: 		
$20D0	$570068			SUB	W14, #8, W0
$20D2	$784090			MOV.B	[W0], W1
$20D4	$FB0081			SE	W1, W1
$20D6	$470064			ADD	W14, #4, W0
$20D8	$108860			SUBR	W1, #0, [W0]
;__Lib_Conv.c,49 :: 		
$20DA	$	L_ShortToStr_12:
;__Lib_Conv.c,50 :: 		
$20DA	$57006A			SUB	W14, #10, W0
$20DC	$781F90			PUSH	[W0]
$20DE	$470064			ADD	W14, #4, W0
$20E0	$780010			MOV	[W0], W0
$20E2	$781F80			PUSH	W0
$20E4	$07FFA7			RCALL	_ByteToStr, 0-100015
$20E6	$B1004F			SUB	#4, W15
;__Lib_Conv.c,52 :: 		
$20E8	$200040			MOV	#4, W0
$20EA	$780F00			MOV	W0, [W14]
;__Lib_Conv.c,53 :: 		
$20EC	$	L_ShortToStr_13:
$20EC	$470060			ADD	W14, #0, W0
$20EE	$780090			MOV	[W0], W1
$20F0	$508060			SUB	W1, #0, W0
$20F2	$36000E			BRA LEU	L_ShortToStr_14, L_ShortToStr_14
;__Lib_Conv.c,54 :: 		
$20F4	$57026A			SUB	W14, #10, W4
$20F6	$780014			MOV	[W4], W0
$20F8	$4701E0			ADD	W14, #0, W3
$20FA	$400113			ADD	W0, [W3], W2
$20FC	$780003			MOV	W3, W0
$20FE	$780010			MOV	[W0], W0
$2100	$5000E1			SUB	W0, #1, W1
$2102	$780004			MOV	W4, W0
$2104	$408010			ADD	W1, [W0], W0
$2106	$784910			MOV.B	[W0], [W2]
;__Lib_Conv.c,55 :: 		
$2108	$200010			MOV	#1, W0
$210A	$100993			SUBR	W0, [W3], [W3]
;__Lib_Conv.c,56 :: 		
$210C	$0420EC			GOTO	L_ShortToStr_13
$2110	$	L_ShortToStr_14:
;__Lib_Conv.c,57 :: 		
$2110	$97B8BE			MOV	[W14+-10], W1
$2112	$200200			MOV.B	#32, W0
$2114	$784880			MOV.B	W0, [W1]
;__Lib_Conv.c,58 :: 		
$2116	$90001E			MOV	[W14+2], W0
$2118	$E00000			CP0	W0
$211A	$320017			BRA Z	L_ShortToStr_15, L_ShortToStr_15
;__Lib_Conv.c,59 :: 		
$211C	$200000			MOV	#0, W0
$211E	$780F00			MOV	W0, [W14]
;__Lib_Conv.c,60 :: 		
$2120	$	L_ShortToStr_16:
$2120	$57006A			SUB	W14, #10, W0
$2122	$780090			MOV	[W0], W1
$2124	$470060			ADD	W14, #0, W0
$2126	$408010			ADD	W1, [W0], W0
$2128	$784110			MOV.B	[W0], W2
$212A	$200201			MOV	#32, W1
$212C	$514001			SUB.B	W2, W1, W0
$212E	$3A0005			BRA NZ	L_ShortToStr_17, L_ShortToStr_17
;__Lib_Conv.c,61 :: 		
$2130	$200011			MOV	#1, W1
$2132	$470060			ADD	W14, #0, W0
$2134	$408810			ADD	W1, [W0], [W0]
$2136	$042120			GOTO	L_ShortToStr_16
$213A	$	L_ShortToStr_17:
;__Lib_Conv.c,62 :: 		
$213A	$470060			ADD	W14, #0, W0
$213C	$780010			MOV	[W0], W0
$213E	$5000E1			SUB	W0, #1, W1
$2140	$780F01			MOV	W1, [W14]
;__Lib_Conv.c,63 :: 		
$2142	$57006A			SUB	W14, #10, W0
$2144	$408090			ADD	W1, [W0], W1
$2146	$2002D0			MOV.B	#45, W0
$2148	$784880			MOV.B	W0, [W1]
;__Lib_Conv.c,64 :: 		
$214A	$	L_ShortToStr_15:
;__Lib_Conv.c,65 :: 		
$214A	$	L_end__ShortToStr:
$214A	$FA8000			ULNK
$214C	$060000			RETURN
$214E	$	_MostrarDatos:
$214E	$FA003C			LNK	#60
$2150	$470060			ADD	W14, #0, W0
$2152	$2AB2A1			MOV	#@?ICSlstr23_audme21, W1
$2154	$090008			REPEAT	#8
$2156	$785831			MOV.B	[W1++], [W0++]
$2158	$470069			ADD	W14, #9, W0
$215A	$2AB331			MOV	#@?ICSlstr24_audme21, W1
$215C	$090008			REPEAT	#8
$215E	$785831			MOV.B	[W1++], [W0++]
$2160	$470072			ADD	W14, #18, W0
$2162	$2AB3C1			MOV	#@?ICSlstr25_audme21, W1
$2164	$090007			REPEAT	#7
$2166	$785831			MOV.B	[W1++], [W0++]
$2168	$47007A			ADD	W14, #26, W0
$216A	$2AB441			MOV	#@?ICSlstr26_audme21, W1
$216C	$090006			REPEAT	#6
$216E	$785831			MOV.B	[W1++], [W0++]
$2170	$200210			MOV	#33, W0
$2172	$470000			ADD	W14, W0, W0
$2174	$2AB4B1			MOV	#@?ICSlstr27_audme21, W1
$2176	$090007			REPEAT	#7
$2178	$785831			MOV.B	[W1++], [W0++]
$217A	$200290			MOV	#41, W0
$217C	$470000			ADD	W14, W0, W0
$217E	$2AB531			MOV	#@?ICSlstr28_audme21, W1
$2180	$090007			REPEAT	#7
$2182	$785831			MOV.B	[W1++], [W0++]
;audme21.c,229 :: 		void MostrarDatos(short modo){
;audme21.c,234 :: 		LCD_Custom_Cmd(LCD_CLEAR);
$2184	$200010			MOV.B	#1, W0
$2186	$781F80			PUSH	W0
$2188	$07FE5D			RCALL	_Lcd_Custom_Cmd, 0-100
$218A	$B1002F			SUB	#2, W15
;audme21.c,235 :: 		if(modo == 0){
$218C	$570068			SUB	W14, #8, W0
$218E	$784090			MOV.B	[W0], W1
$2190	$50C060			SUB.B	W1, #0, W0
$2192	$3A0030			BRA NZ	L_MostrarDatos_36, L_MostrarDatos_36
;audme21.c,236 :: 		IntToStr(indices[0], txt6);
$2194	$200310			MOV	#49, W0
$2196	$470000			ADD	W14, W0, W0
$2198	$781F80			PUSH	W0
$219A	$F80F20			PUSH	_indices
$219C	$07FDEF			RCALL	_IntToStr, 0-104015
$219E	$B1004F			SUB	#4, W15
;audme21.c,237 :: 		LCD_Custom_Out(1,1,"RIctrl: ");
$21A0	$470060			ADD	W14, #0, W0
$21A2	$781F80			PUSH	W0
$21A4	$200010			MOV.B	#1, W0
$21A6	$781F80			PUSH	W0
$21A8	$200010			MOV.B	#1, W0
$21AA	$781F80			PUSH	W0
$21AC	$07FF03			RCALL	_Lcd_Custom_Out, 0-10000015
$21AE	$B1006F			SUB	#6, W15
;audme21.c,238 :: 		LCD_Custom_Out(1,8,txt6);
$21B0	$200310			MOV	#49, W0
$21B2	$470000			ADD	W14, W0, W0
$21B4	$781F80			PUSH	W0
$21B6	$200080			MOV.B	#8, W0
$21B8	$781F80			PUSH	W0
$21BA	$200010			MOV.B	#1, W0
$21BC	$781F80			PUSH	W0
$21BE	$07FEFA			RCALL	_Lcd_Custom_Out, 0-10000015
$21C0	$B1006F			SUB	#6, W15
;audme21.c,239 :: 		IntToStr(indices[1], txt6);
$21C2	$200310			MOV	#49, W0
$21C4	$470000			ADD	W14, W0, W0
$21C6	$781F80			PUSH	W0
$21C8	$F80F22			PUSH	_indices+2
$21CA	$07FDD8			RCALL	_IntToStr, 0-104015
$21CC	$B1004F			SUB	#4, W15
;audme21.c,240 :: 		LCD_Custom_Out(2,1,"dTctrl: ");
$21CE	$470069			ADD	W14, #9, W0
$21D0	$781F80			PUSH	W0
$21D2	$200010			MOV.B	#1, W0
$21D4	$781F80			PUSH	W0
$21D6	$200020			MOV.B	#2, W0
$21D8	$781F80			PUSH	W0
$21DA	$07FEEC			RCALL	_Lcd_Custom_Out, 0-10000015
$21DC	$B1006F			SUB	#6, W15
;audme21.c,241 :: 		LCD_Custom_Out(2,8,txt6);
$21DE	$200310			MOV	#49, W0
$21E0	$470000			ADD	W14, W0, W0
$21E2	$781F80			PUSH	W0
$21E4	$200080			MOV.B	#8, W0
$21E6	$781F80			PUSH	W0
$21E8	$200020			MOV.B	#2, W0
$21EA	$781F80			PUSH	W0
$21EC	$07FEE3			RCALL	_Lcd_Custom_Out, 0-10000015
$21EE	$B1006F			SUB	#6, W15
;audme21.c,242 :: 		}else if (modo == 5){
$21F0	$04233C			GOTO	L_MostrarDatos_37
$21F4	$	L_MostrarDatos_36:
$21F4	$570068			SUB	W14, #8, W0
$21F6	$784090			MOV.B	[W0], W1
$21F8	$50C065			SUB.B	W1, #5, W0
$21FA	$3A0037			BRA NZ	L_MostrarDatos_38, L_MostrarDatos_38
;audme21.c,243 :: 		IntToStr(Adrr, txt6);
$21FC	$200310			MOV	#49, W0
$21FE	$470000			ADD	W14, W0, W0
$2200	$781F80			PUSH	W0
$2202	$F80F6A			PUSH	_Adrr
$2204	$07FDBB			RCALL	_IntToStr, 0-104015
$2206	$B1004F			SUB	#4, W15
;audme21.c,244 :: 		ShortToStr(flag, txt4);
$2208	$200370			MOV	#55, W0
$220A	$470000			ADD	W14, W0, W0
$220C	$781F80			PUSH	W0
$220E	$20F680			MOV	#@_flag, W0
$2210	$784010			MOV.B	[W0], W0
$2212	$FB0000			SE	W0, W0
$2214	$781F80			PUSH	W0
$2216	$07FF4D			RCALL	_ShortToStr, 0-103015
$2218	$B1004F			SUB	#4, W15
;audme21.c,245 :: 		LCD_Custom_Cmd(LCD_CLEAR);
$221A	$200010			MOV.B	#1, W0
$221C	$781F80			PUSH	W0
$221E	$07FE12			RCALL	_Lcd_Custom_Cmd, 0-100
$2220	$B1002F			SUB	#2, W15
;audme21.c,246 :: 		Lcd_Custom_Out(1,1,"NdReg: ");
$2222	$470072			ADD	W14, #18, W0
$2224	$781F80			PUSH	W0
$2226	$200010			MOV.B	#1, W0
$2228	$781F80			PUSH	W0
$222A	$200010			MOV.B	#1, W0
$222C	$781F80			PUSH	W0
$222E	$07FEC2			RCALL	_Lcd_Custom_Out, 0-10000015
$2230	$B1006F			SUB	#6, W15
;audme21.c,247 :: 		Lcd_Custom_Out(1,10,txt6);
$2232	$200310			MOV	#49, W0
$2234	$470000			ADD	W14, W0, W0
$2236	$781F80			PUSH	W0
$2238	$2000A0			MOV.B	#10, W0
$223A	$781F80			PUSH	W0
$223C	$200010			MOV.B	#1, W0
$223E	$781F80			PUSH	W0
$2240	$07FEB9			RCALL	_Lcd_Custom_Out, 0-10000015
$2242	$B1006F			SUB	#6, W15
;audme21.c,248 :: 		Lcd_Custom_Out(2,1,"freq: ");
$2244	$47007A			ADD	W14, #26, W0
$2246	$781F80			PUSH	W0
$2248	$200010			MOV.B	#1, W0
$224A	$781F80			PUSH	W0
$224C	$200020			MOV.B	#2, W0
$224E	$781F80			PUSH	W0
$2250	$07FEB1			RCALL	_Lcd_Custom_Out, 0-10000015
$2252	$B1006F			SUB	#6, W15
;audme21.c,249 :: 		Lcd_Custom_Out(2,8,txt4);
$2254	$200370			MOV	#55, W0
$2256	$470000			ADD	W14, W0, W0
$2258	$781F80			PUSH	W0
$225A	$200080			MOV.B	#8, W0
$225C	$781F80			PUSH	W0
$225E	$200020			MOV.B	#2, W0
$2260	$781F80			PUSH	W0
$2262	$07FEA8			RCALL	_Lcd_Custom_Out, 0-10000015
$2264	$B1006F			SUB	#6, W15
;audme21.c,250 :: 		}else if ((modo > 0) && (modo < 5)){
$2266	$04233C			GOTO	L_MostrarDatos_39
$226A	$	L_MostrarDatos_38:
$226A	$570068			SUB	W14, #8, W0
$226C	$784090			MOV.B	[W0], W1
$226E	$50C060			SUB.B	W1, #0, W0
$2270	$340065			BRA LE	L_MostrarDatos_42, L_MostrarDatos_42
$2272	$570068			SUB	W14, #8, W0
$2274	$784090			MOV.B	[W0], W1
$2276	$50C065			SUB.B	W1, #5, W0
$2278	$3D0061			BRA GE	L_MostrarDatos_42, L_MostrarDatos_42
$227A	$	L693_ex_L_MostrarDatos_42:
;audme21.c,251 :: 		IntToStr(indices[modo], txt6);
$227A	$200310			MOV	#49, W0
$227C	$470000			ADD	W14, W0, W0
$227E	$781F80			PUSH	W0
$2280	$570068			SUB	W14, #8, W0
$2282	$784010			MOV.B	[W0], W0
$2284	$FB0000			SE	W0, W0
$2286	$DD00C1			SL	W0, #1, W1
$2288	$20F200			MOV	#@_indices+0, W0
$228A	$400001			ADD	W0, W1, W0
$228C	$781F90			PUSH	[W0]
$228E	$07FD76			RCALL	_IntToStr, 0-104015
$2290	$B1004F			SUB	#4, W15
;audme21.c,252 :: 		ShortToStr(modo, txt4);
$2292	$200370			MOV	#55, W0
$2294	$470000			ADD	W14, W0, W0
$2296	$781F80			PUSH	W0
$2298	$570068			SUB	W14, #8, W0
$229A	$784010			MOV.B	[W0], W0
$229C	$FB0000			SE	W0, W0
$229E	$781F80			PUSH	W0
$22A0	$07FF08			RCALL	_ShortToStr, 0-103015
$22A2	$B1004F			SUB	#4, W15
;audme21.c,253 :: 		LCD_Custom_Out(1,1,"RI    :");
$22A4	$200210			MOV	#33, W0
$22A6	$470000			ADD	W14, W0, W0
$22A8	$781F80			PUSH	W0
$22AA	$200010			MOV.B	#1, W0
$22AC	$781F80			PUSH	W0
$22AE	$200010			MOV.B	#1, W0
$22B0	$781F80			PUSH	W0
$22B2	$07FE80			RCALL	_Lcd_Custom_Out, 0-10000015
$22B4	$B1006F			SUB	#6, W15
;audme21.c,254 :: 		LCD_Custom_Out(1,3,txt4);
$22B6	$200370			MOV	#55, W0
$22B8	$470000			ADD	W14, W0, W0
$22BA	$781F80			PUSH	W0
$22BC	$200030			MOV.B	#3, W0
$22BE	$781F80			PUSH	W0
$22C0	$200010			MOV.B	#1, W0
$22C2	$781F80			PUSH	W0
$22C4	$07FE77			RCALL	_Lcd_Custom_Out, 0-10000015
$22C6	$B1006F			SUB	#6, W15
;audme21.c,255 :: 		LCD_Custom_Out(1,10,txt6);
$22C8	$200310			MOV	#49, W0
$22CA	$470000			ADD	W14, W0, W0
$22CC	$781F80			PUSH	W0
$22CE	$2000A0			MOV.B	#10, W0
$22D0	$781F80			PUSH	W0
$22D2	$200010			MOV.B	#1, W0
$22D4	$781F80			PUSH	W0
$22D6	$07FE6E			RCALL	_Lcd_Custom_Out, 0-10000015
$22D8	$B1006F			SUB	#6, W15
;audme21.c,256 :: 		IntToStr(indices[modo + 1], txt6);
$22DA	$200310			MOV	#49, W0
$22DC	$470000			ADD	W14, W0, W0
$22DE	$781F80			PUSH	W0
$22E0	$570068			SUB	W14, #8, W0
$22E2	$784010			MOV.B	[W0], W0
$22E4	$FB0000			SE	W0, W0
$22E6	$400061			ADD	W0, #1, W0
$22E8	$DD00C1			SL	W0, #1, W1
$22EA	$20F200			MOV	#@_indices+0, W0
$22EC	$400001			ADD	W0, W1, W0
$22EE	$781F90			PUSH	[W0]
$22F0	$07FD45			RCALL	_IntToStr, 0-104015
$22F2	$B1004F			SUB	#4, W15
;audme21.c,257 :: 		ShortToStr(modo, txt4);
$22F4	$200370			MOV	#55, W0
$22F6	$470000			ADD	W14, W0, W0
$22F8	$781F80			PUSH	W0
$22FA	$570068			SUB	W14, #8, W0
$22FC	$784010			MOV.B	[W0], W0
$22FE	$FB0000			SE	W0, W0
$2300	$781F80			PUSH	W0
$2302	$07FED7			RCALL	_ShortToStr, 0-103015
$2304	$B1004F			SUB	#4, W15
;audme21.c,258 :: 		LCD_Custom_Out(2,1,"dT    :");
$2306	$200290			MOV	#41, W0
$2308	$470000			ADD	W14, W0, W0
$230A	$781F80			PUSH	W0
$230C	$200010			MOV.B	#1, W0
$230E	$781F80			PUSH	W0
$2310	$200020			MOV.B	#2, W0
$2312	$781F80			PUSH	W0
$2314	$07FE4F			RCALL	_Lcd_Custom_Out, 0-10000015
$2316	$B1006F			SUB	#6, W15
;audme21.c,259 :: 		LCD_Custom_Out(2,3,txt4);
$2318	$200370			MOV	#55, W0
$231A	$470000			ADD	W14, W0, W0
$231C	$781F80			PUSH	W0
$231E	$200030			MOV.B	#3, W0
$2320	$781F80			PUSH	W0
$2322	$200020			MOV.B	#2, W0
$2324	$781F80			PUSH	W0
$2326	$07FE46			RCALL	_Lcd_Custom_Out, 0-10000015
$2328	$B1006F			SUB	#6, W15
;audme21.c,260 :: 		LCD_Custom_Out(2,10,txt6);
$232A	$200310			MOV	#49, W0
$232C	$470000			ADD	W14, W0, W0
$232E	$781F80			PUSH	W0
$2330	$2000A0			MOV.B	#10, W0
$2332	$781F80			PUSH	W0
$2334	$200020			MOV.B	#2, W0
$2336	$781F80			PUSH	W0
$2338	$07FE3D			RCALL	_Lcd_Custom_Out, 0-10000015
$233A	$B1006F			SUB	#6, W15
;audme21.c,261 :: 		}
$233C	$	L_MostrarDatos_42:
$233C	$	L_MostrarDatos_39:
$233C	$	L_MostrarDatos_37:
;audme21.c,262 :: 		}//~
$233C	$	L_end__MostrarDatos:
$233C	$FA8000			ULNK
$233E	$060000			RETURN
$2340	$	_Delay_Cyc:
$2340	$FA0000			LNK	#0
;Delays.c,65 :: 		void Delay_Cyc(unsigned int x, unsigned int y) {
;Delays.c,67 :: 		MOV	[W14+-8], W0
$2342	$97B84E			MOV	[W14+-8], W0
;Delays.c,68 :: 		MOV	[W14+-10], W1
$2344	$97B8BE			MOV	[W14+-10], W1
;Delays.c,69 :: 		Delay_Cyc_loop:
$2346	$	Delay_Cyc_loop:
;Delays.c,70 :: 		cp0 w0                   ; skip delay
$2346	$E00000			CP0	w0
;Delays.c,71 :: 		bra z, Delay_Cyc_rez     ;    if w0 = 0
$2348	$320004			BRA Z	z, Delay_Cyc_rez
;Delays.c,72 :: 		repeat #16378            ; perform delay by
$234A	$093FFA			REPEAT	#16378
;Delays.c,73 :: 		nop                      ;   by executing w0*16384 <nop>s
$234C	$000000			NOP
;Delays.c,74 :: 		dec w0, w0               ; next loop
$234E	$E90000			DEC	w0, w0
;Delays.c,75 :: 		bra Delay_Cyc_loop
$2350	$37FFFA			BRA	Delay_Cyc_loop
;Delays.c,76 :: 		Delay_Cyc_rez:
$2352	$	Delay_Cyc_rez:
;Delays.c,77 :: 		repeat w1                ; execute whats
$2352	$098001			REPEAT	w1
;Delays.c,78 :: 		nop                      ;   remaining after the division
$2354	$000000			NOP
;Delays.c,80 :: 		}
$2356	$	L_end__Delay_Cyc:
$2356	$FA8000			ULNK
$2358	$060000			RETURN
$235A	$	_main:
$235A	$20800F			MOV	#0x800, W15
$235C	$20BFE0			MOV	#0x000BFE, W0
$235E	$880100			MOV	W0, SPLIM
$2360	$A84044			BSET	CORCON, #2
$2362	$200000			MOV	0, W0
$2364	$8801A0			MOV	W0, PSVPAG
$2366	$20F680			MOV	#@_flag, W0
$2368	$2AC601			MOV	#@?ICS_flag, W1
$236A	$090003			REPEAT	#3
$236C	$785831			MOV.B	[W1++], [W0++]
$236E	$FA0110			LNK	#272
$2370	$470060			ADD	W14, #0, W0
$2372	$2AB5B1			MOV	#@?ICSlstr1_audme21, W1
$2374	$090009			REPEAT	#9
$2376	$785831			MOV.B	[W1++], [W0++]
$2378	$47006A			ADD	W14, #10, W0
$237A	$2AB651			MOV	#@?ICSlstr2_audme21, W1
$237C	$090009			REPEAT	#9
$237E	$785831			MOV.B	[W1++], [W0++]
$2380	$470074			ADD	W14, #20, W0
$2382	$2AB6F1			MOV	#@?ICSlstr3_audme21, W1
$2384	$09000E			REPEAT	#14
$2386	$785831			MOV.B	[W1++], [W0++]
$2388	$200230			MOV	#35, W0
$238A	$470000			ADD	W14, W0, W0
$238C	$2AB7E1			MOV	#@?ICSlstr4_audme21, W1
$238E	$09000E			REPEAT	#14
$2390	$785831			MOV.B	[W1++], [W0++]
$2392	$200320			MOV	#50, W0
$2394	$470000			ADD	W14, W0, W0
$2396	$2AB8D1			MOV	#@?ICSlstr5_audme21, W1
$2398	$09000E			REPEAT	#14
$239A	$785831			MOV.B	[W1++], [W0++]
$239C	$200410			MOV	#65, W0
$239E	$470000			ADD	W14, W0, W0
$23A0	$2AB9C1			MOV	#@?ICSlstr6_audme21, W1
$23A2	$09000E			REPEAT	#14
$23A4	$785831			MOV.B	[W1++], [W0++]
$23A6	$200500			MOV	#80, W0
$23A8	$470000			ADD	W14, W0, W0
$23AA	$2ABAB1			MOV	#@?ICSlstr7_audme21, W1
$23AC	$09000E			REPEAT	#14
$23AE	$785831			MOV.B	[W1++], [W0++]
$23B0	$2005F0			MOV	#95, W0
$23B2	$470000			ADD	W14, W0, W0
$23B4	$2ABBA1			MOV	#@?ICSlstr8_audme21, W1
$23B6	$09000E			REPEAT	#14
$23B8	$785831			MOV.B	[W1++], [W0++]
$23BA	$2006E0			MOV	#110, W0
$23BC	$470000			ADD	W14, W0, W0
$23BE	$2ABC91			MOV	#@?ICSlstr9_audme21, W1
$23C0	$090012			REPEAT	#18
$23C2	$785831			MOV.B	[W1++], [W0++]
$23C4	$200810			MOV	#129, W0
$23C6	$470000			ADD	W14, W0, W0
$23C8	$2ABDC1			MOV	#@?ICSlstr10_audme21, W1
$23CA	$090006			REPEAT	#6
$23CC	$785831			MOV.B	[W1++], [W0++]
$23CE	$200880			MOV	#136, W0
$23D0	$470000			ADD	W14, W0, W0
$23D2	$2ABE31			MOV	#@?ICSlstr11_audme21, W1
$23D4	$090008			REPEAT	#8
$23D6	$785831			MOV.B	[W1++], [W0++]
$23D8	$200910			MOV	#145, W0
$23DA	$470000			ADD	W14, W0, W0
$23DC	$2ABEC1			MOV	#@?ICSlstr12_audme21, W1
$23DE	$09000E			REPEAT	#14
$23E0	$785831			MOV.B	[W1++], [W0++]
$23E2	$200A00			MOV	#160, W0
$23E4	$470000			ADD	W14, W0, W0
$23E6	$2ABFB1			MOV	#@?ICSlstr13_audme21, W1
$23E8	$09000C			REPEAT	#12
$23EA	$785831			MOV.B	[W1++], [W0++]
$23EC	$200AD0			MOV	#173, W0
$23EE	$470000			ADD	W14, W0, W0
$23F0	$2AC081			MOV	#@?ICSlstr14_audme21, W1
$23F2	$09000A			REPEAT	#10
$23F4	$785831			MOV.B	[W1++], [W0++]
$23F6	$200B80			MOV	#184, W0
$23F8	$470000			ADD	W14, W0, W0
$23FA	$2AC131			MOV	#@?ICSlstr15_audme21, W1
$23FC	$090004			REPEAT	#4
$23FE	$785831			MOV.B	[W1++], [W0++]
$2400	$200BD0			MOV	#189, W0
$2402	$470000			ADD	W14, W0, W0
$2404	$2AC181			MOV	#@?ICSlstr16_audme21, W1
$2406	$090004			REPEAT	#4
$2408	$785831			MOV.B	[W1++], [W0++]
$240A	$200C20			MOV	#194, W0
$240C	$470000			ADD	W14, W0, W0
$240E	$2AC1D1			MOV	#@?ICSlstr17_audme21, W1
$2410	$090004			REPEAT	#4
$2412	$785831			MOV.B	[W1++], [W0++]
$2414	$200C70			MOV	#199, W0
$2416	$470000			ADD	W14, W0, W0
$2418	$2AC221			MOV	#@?ICSlstr18_audme21, W1
$241A	$09000D			REPEAT	#13
$241C	$785831			MOV.B	[W1++], [W0++]
$241E	$200D50			MOV	#213, W0
$2420	$470000			ADD	W14, W0, W0
$2422	$2AC301			MOV	#@?ICSlstr19_audme21, W1
$2424	$090010			REPEAT	#16
$2426	$785831			MOV.B	[W1++], [W0++]
$2428	$200E60			MOV	#230, W0
$242A	$470000			ADD	W14, W0, W0
$242C	$2AC411			MOV	#@?ICSlstr20_audme21, W1
$242E	$09000A			REPEAT	#10
$2430	$785831			MOV.B	[W1++], [W0++]
$2432	$200F10			MOV	#241, W0
$2434	$470000			ADD	W14, W0, W0
$2436	$2AC4C1			MOV	#@?ICSlstr21_audme21, W1
$2438	$090006			REPEAT	#6
$243A	$785831			MOV.B	[W1++], [W0++]
$243C	$200F80			MOV	#248, W0
$243E	$470000			ADD	W14, W0, W0
$2440	$2AC531			MOV	#@?ICSlstr22_audme21, W1
$2442	$09000B			REPEAT	#11
$2444	$785831			MOV.B	[W1++], [W0++]
;audme21.c,73 :: 		void main(void){
;audme21.c,77 :: 		InitConfig();
$2446	$07F03B			RCALL	_InitConfig, 0-1
;audme21.c,79 :: 		Inicio:
$2448	$	___main_Inicio:
;audme21.c,81 :: 		LCD_Custom_Out(1,1,"Iniciando");
$2448	$470060			ADD	W14, #0, W0
$244A	$781F80			PUSH	W0
$244C	$200010			MOV.B	#1, W0
$244E	$781F80			PUSH	W0
$2450	$200010			MOV.B	#1, W0
$2452	$781F80			PUSH	W0
$2454	$07FDAF			RCALL	_Lcd_Custom_Out, 0-10000015
$2456	$B1006F			SUB	#6, W15
;audme21.c,82 :: 		LCD_Custom_Out(2,1,"Audme 2.1");
$2458	$47006A			ADD	W14, #10, W0
$245A	$781F80			PUSH	W0
$245C	$200010			MOV.B	#1, W0
$245E	$781F80			PUSH	W0
$2460	$200020			MOV.B	#2, W0
$2462	$781F80			PUSH	W0
$2464	$07FDA7			RCALL	_Lcd_Custom_Out, 0-10000015
$2466	$B1006F			SUB	#6, W15
;audme21.c,83 :: 		delay_ms(2000);
$2468	$2166E0			MOV	#5742, W0
$246A	$781F80			PUSH	W0
$246C	$202620			MOV	#610, W0
$246E	$781F80			PUSH	W0
$2470	$07FF67			RCALL	_Delay_Cyc, 0-10101
$2472	$B1004F			SUB	#4, W15
;audme21.c,84 :: 		LCD_Custom_Out(1,1,"Iniciar       ");
$2474	$470074			ADD	W14, #20, W0
$2476	$781F80			PUSH	W0
$2478	$200010			MOV.B	#1, W0
$247A	$781F80			PUSH	W0
$247C	$200010			MOV.B	#1, W0
$247E	$781F80			PUSH	W0
$2480	$07FD99			RCALL	_Lcd_Custom_Out, 0-10000015
$2482	$B1006F			SUB	#6, W15
;audme21.c,85 :: 		LCD_Custom_Out(2,1,"Presione Enter");
$2484	$200230			MOV	#35, W0
$2486	$470000			ADD	W14, W0, W0
$2488	$781F80			PUSH	W0
$248A	$200010			MOV.B	#1, W0
$248C	$781F80			PUSH	W0
$248E	$200020			MOV.B	#2, W0
$2490	$781F80			PUSH	W0
$2492	$07FD90			RCALL	_Lcd_Custom_Out, 0-10000015
$2494	$B1006F			SUB	#6, W15
;audme21.c,88 :: 		opt = 0;
$2496	$201061			MOV	#262, W1
$2498	$470081			ADD	W14, W1, W1
$249A	$200000			MOV.B	#0, W0
$249C	$784880			MOV.B	W0, [W1]
;audme21.c,89 :: 		while(1){
$249E	$	L_main_4:
;audme21.c,90 :: 		if(Button(&PORTD, 0, 100, 0)){
$249E	$200000			MOV	#0, W0
$24A0	$781F80			PUSH	W0
$24A2	$200640			MOV	#100, W0
$24A4	$781F80			PUSH	W0
$24A6	$200000			MOV	#0, W0
$24A8	$781F80			PUSH	W0
$24AA	$202D40			MOV	#@PORTD+0, W0
$24AC	$781F80			PUSH	W0
$24AE	$07F022			RCALL	_Button, 01015010101
$24B0	$B1008F			SUB	#8, W15
$24B2	$E00000			CP0	W0
$24B4	$32001B			BRA Z	L_main_6, L_main_6
;audme21.c,91 :: 		if(opt == 0) goto Empieza;
$24B6	$201060			MOV	#262, W0
$24B8	$470000			ADD	W14, W0, W0
$24BA	$784090			MOV.B	[W0], W1
$24BC	$50C060			SUB.B	W1, #0, W0
$24BE	$3A0002			BRA NZ	L_main_7, L_main_7
$24C0	$04257E			GOTO	___main_Empieza
$24C4	$	L_main_7:
;audme21.c,92 :: 		if(opt == 1) Formatear();
$24C4	$201060			MOV	#262, W0
$24C6	$470000			ADD	W14, W0, W0
$24C8	$784090			MOV.B	[W0], W1
$24CA	$50C061			SUB.B	W1, #1, W0
$24CC	$3A0001			BRA NZ	L_main_8, L_main_8
$24CE	$07F040			RCALL	_Formatear, 0-1
$24D0	$	L_main_8:
;audme21.c,93 :: 		if(opt == 2) EnviarDatos();
$24D0	$201060			MOV	#262, W0
$24D2	$470000			ADD	W14, W0, W0
$24D4	$784090			MOV.B	[W0], W1
$24D6	$50C062			SUB.B	W1, #2, W0
$24D8	$3A0001			BRA NZ	L_main_9, L_main_9
$24DA	$07F153			RCALL	_EnviarDatos, 0-1
$24DC	$	L_main_9:
;audme21.c,94 :: 		delay_ms(100);
$24DC	$2210E0			MOV	#8462, W0
$24DE	$781F80			PUSH	W0
$24E0	$2001E0			MOV	#30, W0
$24E2	$781F80			PUSH	W0
$24E4	$07FF2D			RCALL	_Delay_Cyc, 0-10101
$24E6	$B1004F			SUB	#4, W15
;audme21.c,95 :: 		goto Inicio;
$24E8	$042448			GOTO	___main_Inicio
;audme21.c,96 :: 		} else if (Button(&PORTD, 1, 100,0)){
$24EC	$	L_main_6:
$24EC	$200000			MOV	#0, W0
$24EE	$781F80			PUSH	W0
$24F0	$200640			MOV	#100, W0
$24F2	$781F80			PUSH	W0
$24F4	$200010			MOV	#1, W0
$24F6	$781F80			PUSH	W0
$24F8	$202D40			MOV	#@PORTD+0, W0
$24FA	$781F80			PUSH	W0
$24FC	$07EFFB			RCALL	_Button, 01015010101
$24FE	$B1008F			SUB	#8, W15
$2500	$E00000			CP0	W0
$2502	$32003B			BRA Z	L_main_11, L_main_11
;audme21.c,97 :: 		opt++;
$2504	$201062			MOV	#262, W2
$2506	$470102			ADD	W14, W2, W2
$2508	$784012			MOV.B	[W2], W0
$250A	$4040E1			ADD.B	W0, #1, W1
$250C	$784901			MOV.B	W1, [W2]
;audme21.c,98 :: 		if(opt == 3) opt = 0;
$250E	$50C063			SUB.B	W1, #3, W0
$2510	$3A0004			BRA NZ	L_main_12, L_main_12
$2512	$201061			MOV	#262, W1
$2514	$470081			ADD	W14, W1, W1
$2516	$200000			MOV.B	#0, W0
$2518	$784880			MOV.B	W0, [W1]
$251A	$	L_main_12:
;audme21.c,99 :: 		if (opt == 0) LCD_Custom_Out(1,1,"Iniciar       ");
$251A	$201060			MOV	#262, W0
$251C	$470000			ADD	W14, W0, W0
$251E	$784090			MOV.B	[W0], W1
$2520	$50C060			SUB.B	W1, #0, W0
$2522	$3A0009			BRA NZ	L_main_13, L_main_13
$2524	$200320			MOV	#50, W0
$2526	$470000			ADD	W14, W0, W0
$2528	$781F80			PUSH	W0
$252A	$200010			MOV.B	#1, W0
$252C	$781F80			PUSH	W0
$252E	$200010			MOV.B	#1, W0
$2530	$781F80			PUSH	W0
$2532	$07FD40			RCALL	_Lcd_Custom_Out, 0-10000015
$2534	$B1006F			SUB	#6, W15
$2536	$	L_main_13:
;audme21.c,100 :: 		if (opt == 1) LCD_Custom_Out(1,1,"Formatear     ");
$2536	$201060			MOV	#262, W0
$2538	$470000			ADD	W14, W0, W0
$253A	$784090			MOV.B	[W0], W1
$253C	$50C061			SUB.B	W1, #1, W0
$253E	$3A0009			BRA NZ	L_main_14, L_main_14
$2540	$200410			MOV	#65, W0
$2542	$470000			ADD	W14, W0, W0
$2544	$781F80			PUSH	W0
$2546	$200010			MOV.B	#1, W0
$2548	$781F80			PUSH	W0
$254A	$200010			MOV.B	#1, W0
$254C	$781F80			PUSH	W0
$254E	$07FD32			RCALL	_Lcd_Custom_Out, 0-10000015
$2550	$B1006F			SUB	#6, W15
$2552	$	L_main_14:
;audme21.c,101 :: 		if (opt == 2) LCD_Custom_Out(1,1,"Enviar Datos  ");
$2552	$201060			MOV	#262, W0
$2554	$470000			ADD	W14, W0, W0
$2556	$784090			MOV.B	[W0], W1
$2558	$50C062			SUB.B	W1, #2, W0
$255A	$3A0009			BRA NZ	L_main_15, L_main_15
$255C	$200500			MOV	#80, W0
$255E	$470000			ADD	W14, W0, W0
$2560	$781F80			PUSH	W0
$2562	$200010			MOV.B	#1, W0
$2564	$781F80			PUSH	W0
$2566	$200010			MOV.B	#1, W0
$2568	$781F80			PUSH	W0
$256A	$07FD24			RCALL	_Lcd_Custom_Out, 0-10000015
$256C	$B1006F			SUB	#6, W15
$256E	$	L_main_15:
;audme21.c,102 :: 		delay_ms(100);
$256E	$2210E0			MOV	#8462, W0
$2570	$781F80			PUSH	W0
$2572	$2001E0			MOV	#30, W0
$2574	$781F80			PUSH	W0
$2576	$07FEE4			RCALL	_Delay_Cyc, 0-10101
$2578	$B1004F			SUB	#4, W15
;audme21.c,103 :: 		}
$257A	$	L_main_11:
$257A	$	L_main_10:
;audme21.c,104 :: 		}
$257A	$04249E			GOTO	L_main_4
;audme21.c,106 :: 		Empieza:
$257E	$	___main_Empieza:
;audme21.c,111 :: 		LCD_Custom_Out(1,1,"Cargando datos");
$257E	$2005F0			MOV	#95, W0
$2580	$470000			ADD	W14, W0, W0
$2582	$781F80			PUSH	W0
$2584	$200010			MOV.B	#1, W0
$2586	$781F80			PUSH	W0
$2588	$200010			MOV.B	#1, W0
$258A	$781F80			PUSH	W0
$258C	$07FD13			RCALL	_Lcd_Custom_Out, 0-10000015
$258E	$B1006F			SUB	#6, W15
;audme21.c,112 :: 		while(1){
$2590	$	L_main_16:
;audme21.c,113 :: 		CargarDatos(0);
$2590	$200000			MOV.B	#0, W0
$2592	$781F80			PUSH	W0
$2594	$07F29A			RCALL	_CargarDatos, 0-103
$2596	$B1002F			SUB	#2, W15
;audme21.c,114 :: 		freq = EncontrarFc();
$2598	$07F3C8			RCALL	_EncontrarFc, 03
$259A	$201051			MOV	#261, W1
$259C	$470081			ADD	W14, W1, W1
$259E	$784880			MOV.B	W0, [W1]
;audme21.c,115 :: 		if(freq > 5 && freq < 20) break;
$25A0	$5040E5			SUB.B	W0, #5, W1
$25A2	$340007			BRA LE	L_main_20, L_main_20
$25A4	$201050			MOV	#261, W0
$25A6	$470000			ADD	W14, W0, W0
$25A8	$784090			MOV.B	[W0], W1
$25AA	$50C074			SUB.B	W1, #20, W0
$25AC	$3D0002			BRA GE	L_main_20, L_main_20
$25AE	$	L218_ex_L_main_20:
$25AE	$042636			GOTO	L_main_17
$25B2	$	L_main_20:
;audme21.c,116 :: 		LCD_Custom_Cmd(LCD_CLEAR);
$25B2	$200010			MOV.B	#1, W0
$25B4	$781F80			PUSH	W0
$25B6	$07FC46			RCALL	_Lcd_Custom_Cmd, 0-100
$25B8	$B1002F			SUB	#2, W15
;audme21.c,117 :: 		LCD_Custom_Out(1,1,"No se encuentra la");
$25BA	$2006E0			MOV	#110, W0
$25BC	$470000			ADD	W14, W0, W0
$25BE	$781F80			PUSH	W0
$25C0	$200010			MOV.B	#1, W0
$25C2	$781F80			PUSH	W0
$25C4	$200010			MOV.B	#1, W0
$25C6	$781F80			PUSH	W0
$25C8	$07FCF5			RCALL	_Lcd_Custom_Out, 0-10000015
$25CA	$B1006F			SUB	#6, W15
;audme21.c,118 :: 		LCD_Custom_Out(2,1,"senal.");
$25CC	$200810			MOV	#129, W0
$25CE	$470000			ADD	W14, W0, W0
$25D0	$781F80			PUSH	W0
$25D2	$200010			MOV.B	#1, W0
$25D4	$781F80			PUSH	W0
$25D6	$200020			MOV.B	#2, W0
$25D8	$781F80			PUSH	W0
$25DA	$07FCEC			RCALL	_Lcd_Custom_Out, 0-10000015
$25DC	$B1006F			SUB	#6, W15
;audme21.c,119 :: 		Segundos(5);
$25DE	$200050			MOV	#5, W0
$25E0	$781F80			PUSH	W0
$25E2	$07F42A			RCALL	_Segundos, 0-101
$25E4	$B1002F			SUB	#2, W15
;audme21.c,120 :: 		flag++;
$25E6	$20F682			MOV	#@_flag, W2
$25E8	$784012			MOV.B	[W2], W0
$25EA	$4040E1			ADD.B	W0, #1, W1
$25EC	$784901			MOV.B	W1, [W2]
;audme21.c,121 :: 		if(flag == 5){
$25EE	$50C065			SUB.B	W1, #5, W0
$25F0	$3A0013			BRA NZ	L_main_21, L_main_21
;audme21.c,122 :: 		LCD_Custom_Cmd(LCD_CLEAR);
$25F2	$200010			MOV.B	#1, W0
$25F4	$781F80			PUSH	W0
$25F6	$07FC26			RCALL	_Lcd_Custom_Cmd, 0-100
$25F8	$B1002F			SUB	#2, W15
;audme21.c,123 :: 		LCD_Custom_Out(1,1,"Error 69");
$25FA	$200880			MOV	#136, W0
$25FC	$470000			ADD	W14, W0, W0
$25FE	$781F80			PUSH	W0
$2600	$200010			MOV.B	#1, W0
$2602	$781F80			PUSH	W0
$2604	$200010			MOV.B	#1, W0
$2606	$781F80			PUSH	W0
$2608	$07FCD5			RCALL	_Lcd_Custom_Out, 0-10000015
$260A	$B1006F			SUB	#6, W15
;audme21.c,124 :: 		Segundos(5);
$260C	$200050			MOV	#5, W0
$260E	$781F80			PUSH	W0
$2610	$07F413			RCALL	_Segundos, 0-101
$2612	$B1002F			SUB	#2, W15
;audme21.c,125 :: 		goto Inicio;
$2614	$042448			GOTO	___main_Inicio
;audme21.c,126 :: 		}
$2618	$	L_main_21:
;audme21.c,127 :: 		LCD_Custom_Cmd(LCD_CLEAR);
$2618	$200010			MOV.B	#1, W0
$261A	$781F80			PUSH	W0
$261C	$07FC13			RCALL	_Lcd_Custom_Cmd, 0-100
$261E	$B1002F			SUB	#2, W15
;audme21.c,128 :: 		LCD_Custom_Out(1,1,"Buscando senal");
$2620	$200910			MOV	#145, W0
$2622	$470000			ADD	W14, W0, W0
$2624	$781F80			PUSH	W0
$2626	$200010			MOV.B	#1, W0
$2628	$781F80			PUSH	W0
$262A	$200010			MOV.B	#1, W0
$262C	$781F80			PUSH	W0
$262E	$07FCC2			RCALL	_Lcd_Custom_Out, 0-10000015
$2630	$B1006F			SUB	#6, W15
;audme21.c,129 :: 		}
$2632	$042590			GOTO	L_main_16
$2636	$	L_main_17:
;audme21.c,131 :: 		LCD_Custom_Cmd(LCD_CLEAR);
$2636	$200010			MOV.B	#1, W0
$2638	$781F80			PUSH	W0
$263A	$07FC04			RCALL	_Lcd_Custom_Cmd, 0-100
$263C	$B1002F			SUB	#2, W15
;audme21.c,132 :: 		GuardarDatos(99);
$263E	$200630			MOV.B	#99, W0
$2640	$781F80			PUSH	W0
$2642	$07F4AE			RCALL	_GuardarDatos, 0-103
$2644	$B1002F			SUB	#2, W15
;audme21.c,134 :: 		CargarDatos(1);
$2646	$200010			MOV.B	#1, W0
$2648	$781F80			PUSH	W0
$264A	$07F23F			RCALL	_CargarDatos, 0-103
$264C	$B1002F			SUB	#2, W15
;audme21.c,135 :: 		CalculoIndices(0, freq);
$264E	$201050			MOV	#261, W0
$2650	$470000			ADD	W14, W0, W0
$2652	$784010			MOV.B	[W0], W0
$2654	$FB0000			SE	W0, W0
$2656	$781F80			PUSH	W0
$2658	$200000			MOV.B	#0, W0
$265A	$781F80			PUSH	W0
$265C	$07FA12			RCALL	_CalculoIndices, 0-10303
$265E	$B1004F			SUB	#4, W15
;audme21.c,137 :: 		delay_ms(500);
$2660	$2258E0			MOV	#9614, W0
$2662	$781F80			PUSH	W0
$2664	$200980			MOV	#152, W0
$2666	$781F80			PUSH	W0
$2668	$07FE6B			RCALL	_Delay_Cyc, 0-10101
$266A	$B1004F			SUB	#4, W15
;audme21.c,138 :: 		GuardarDatos(0);
$266C	$200000			MOV.B	#0, W0
$266E	$781F80			PUSH	W0
$2670	$07F497			RCALL	_GuardarDatos, 0-103
$2672	$B1002F			SUB	#2, W15
;audme21.c,140 :: 		delay_ms(200);
$2674	$2022E0			MOV	#558, W0
$2676	$781F80			PUSH	W0
$2678	$2003D0			MOV	#61, W0
$267A	$781F80			PUSH	W0
$267C	$07FE61			RCALL	_Delay_Cyc, 0-10101
$267E	$B1004F			SUB	#4, W15
;audme21.c,141 :: 		EscribirByte(Adrr,47,freq);
$2680	$201050			MOV	#261, W0
$2682	$470000			ADD	W14, W0, W0
$2684	$784010			MOV.B	[W0], W0
$2686	$FB0000			SE	W0, W0
$2688	$781F80			PUSH	W0
$268A	$2002F0			MOV.B	#47, W0
$268C	$781F80			PUSH	W0
$268E	$807B50			MOV	_Adrr, W0
$2690	$781F80			PUSH	W0
$2692	$07FAE6			RCALL	_EscribirByte, 0-1000001
$2694	$B1006F			SUB	#6, W15
;audme21.c,144 :: 		NewLine();
$2696	$07FAFE			RCALL	_NewLine, 0-1
;audme21.c,145 :: 		TextToUart("Datos nuevos");
$2698	$200A00			MOV	#160, W0
$269A	$470000			ADD	W14, W0, W0
$269C	$781F80			PUSH	W0
$269E	$07FB12			RCALL	_TextToUart, 0-1015
$26A0	$B1002F			SUB	#2, W15
;audme21.c,146 :: 		NewLine();
$26A2	$07FAF8			RCALL	_NewLine, 0-1
;audme21.c,147 :: 		for(i=0;i<50;i++){
$26A4	$201041			MOV	#260, W1
$26A6	$470081			ADD	W14, W1, W1
$26A8	$200000			MOV.B	#0, W0
$26AA	$784880			MOV.B	W0, [W1]
$26AC	$	L_main_22:
$26AC	$201040			MOV	#260, W0
$26AE	$470000			ADD	W14, W0, W0
$26B0	$784110			MOV.B	[W0], W2
$26B2	$200321			MOV	#50, W1
$26B4	$514001			SUB.B	W2, W1, W0
$26B6	$3D001F			BRA GE	L_main_23, L_main_23
;audme21.c,148 :: 		IntToStr(Samples2[i], txt6);
$26B8	$201070			MOV	#263, W0
$26BA	$470000			ADD	W14, W0, W0
$26BC	$781F80			PUSH	W0
$26BE	$201040			MOV	#260, W0
$26C0	$470000			ADD	W14, W0, W0
$26C2	$784010			MOV.B	[W0], W0
$26C4	$FB0000			SE	W0, W0
$26C6	$DD00C1			SL	W0, #1, W1
$26C8	$20E200			MOV	#@_Samples2+0, W0
$26CA	$400001			ADD	W0, W1, W0
$26CC	$781F90			PUSH	[W0]
$26CE	$07FB56			RCALL	_IntToStr, 0-104015
$26D0	$B1004F			SUB	#4, W15
;audme21.c,149 :: 		TextToUart(txt6);
$26D2	$201070			MOV	#263, W0
$26D4	$470000			ADD	W14, W0, W0
$26D6	$781F80			PUSH	W0
$26D8	$07FAF5			RCALL	_TextToUart, 0-1015
$26DA	$B1002F			SUB	#2, W15
;audme21.c,150 :: 		NewLine();
$26DC	$07FADB			RCALL	_NewLine, 0-1
;audme21.c,151 :: 		delay_ms(5);
$26DE	$221960			MOV	#8598, W0
$26E0	$781F80			PUSH	W0
$26E2	$200010			MOV	#1, W0
$26E4	$781F80			PUSH	W0
$26E6	$07FE2C			RCALL	_Delay_Cyc, 0-10101
$26E8	$B1004F			SUB	#4, W15
;audme21.c,152 :: 		}
$26EA	$	L_main_24:
;audme21.c,147 :: 		for(i=0;i<50;i++){
$26EA	$200011			MOV.B	#1, W1
$26EC	$201040			MOV	#260, W0
$26EE	$470000			ADD	W14, W0, W0
$26F0	$40C810			ADD.B	W1, [W0], [W0]
;audme21.c,152 :: 		}
$26F2	$0426AC			GOTO	L_main_22
$26F6	$	L_main_23:
;audme21.c,153 :: 		TextToUart("-- done --");
$26F6	$200AD0			MOV	#173, W0
$26F8	$470000			ADD	W14, W0, W0
$26FA	$781F80			PUSH	W0
$26FC	$07FAE3			RCALL	_TextToUart, 0-1015
$26FE	$B1002F			SUB	#2, W15
;audme21.c,159 :: 		LCD_Custom_Out(2,1,"3...");
$2700	$200B80			MOV	#184, W0
$2702	$470000			ADD	W14, W0, W0
$2704	$781F80			PUSH	W0
$2706	$200010			MOV.B	#1, W0
$2708	$781F80			PUSH	W0
$270A	$200020			MOV.B	#2, W0
$270C	$781F80			PUSH	W0
$270E	$07FC52			RCALL	_Lcd_Custom_Out, 0-10000015
$2710	$B1006F			SUB	#6, W15
;audme21.c,160 :: 		Segundos(5);
$2712	$200050			MOV	#5, W0
$2714	$781F80			PUSH	W0
$2716	$07F390			RCALL	_Segundos, 0-101
$2718	$B1002F			SUB	#2, W15
;audme21.c,161 :: 		LCD_Custom_Out(2,1,"2...");
$271A	$200BD0			MOV	#189, W0
$271C	$470000			ADD	W14, W0, W0
$271E	$781F80			PUSH	W0
$2720	$200010			MOV.B	#1, W0
$2722	$781F80			PUSH	W0
$2724	$200020			MOV.B	#2, W0
$2726	$781F80			PUSH	W0
$2728	$07FC45			RCALL	_Lcd_Custom_Out, 0-10000015
$272A	$B1006F			SUB	#6, W15
;audme21.c,162 :: 		Segundos(5);
$272C	$200050			MOV	#5, W0
$272E	$781F80			PUSH	W0
$2730	$07F383			RCALL	_Segundos, 0-101
$2732	$B1002F			SUB	#2, W15
;audme21.c,163 :: 		LCD_Custom_Out(2,1,"1...");
$2734	$200C20			MOV	#194, W0
$2736	$470000			ADD	W14, W0, W0
$2738	$781F80			PUSH	W0
$273A	$200010			MOV.B	#1, W0
$273C	$781F80			PUSH	W0
$273E	$200020			MOV.B	#2, W0
$2740	$781F80			PUSH	W0
$2742	$07FC38			RCALL	_Lcd_Custom_Out, 0-10000015
$2744	$B1006F			SUB	#6, W15
;audme21.c,164 :: 		Segundos(5);
$2746	$200050			MOV	#5, W0
$2748	$781F80			PUSH	W0
$274A	$07F376			RCALL	_Segundos, 0-101
$274C	$B1002F			SUB	#2, W15
;audme21.c,168 :: 		LCD_Custom_Out(2,1,"Post Oclusion");
$274E	$200C70			MOV	#199, W0
$2750	$470000			ADD	W14, W0, W0
$2752	$781F80			PUSH	W0
$2754	$200010			MOV.B	#1, W0
$2756	$781F80			PUSH	W0
$2758	$200020			MOV.B	#2, W0
$275A	$781F80			PUSH	W0
$275C	$07FC2B			RCALL	_Lcd_Custom_Out, 0-10000015
$275E	$B1006F			SUB	#6, W15
;audme21.c,170 :: 		Segundos(25);
$2760	$200190			MOV	#25, W0
$2762	$781F80			PUSH	W0
$2764	$07F369			RCALL	_Segundos, 0-101
$2766	$B1002F			SUB	#2, W15
;audme21.c,171 :: 		CargarDatos(2);
$2768	$200020			MOV.B	#2, W0
$276A	$781F80			PUSH	W0
$276C	$07F1AE			RCALL	_CargarDatos, 0-103
$276E	$B1002F			SUB	#2, W15
;audme21.c,172 :: 		CalculoIndices(2, freq);
$2770	$201050			MOV	#261, W0
$2772	$470000			ADD	W14, W0, W0
$2774	$990770			MOV	W0, [W14+270]
$2776	$784010			MOV.B	[W0], W0
$2778	$FB0000			SE	W0, W0
$277A	$781F80			PUSH	W0
$277C	$200020			MOV.B	#2, W0
$277E	$781F80			PUSH	W0
$2780	$07F980			RCALL	_CalculoIndices, 0-10303
$2782	$B1004F			SUB	#4, W15
;audme21.c,173 :: 		GuardarDatos(2);
$2784	$200020			MOV.B	#2, W0
$2786	$781F80			PUSH	W0
$2788	$07F40B			RCALL	_GuardarDatos, 0-103
$278A	$B1002F			SUB	#2, W15
;audme21.c,175 :: 		Lcd_Custom_Out(2,1,"Procesando      ");
$278C	$200D50			MOV	#213, W0
$278E	$470000			ADD	W14, W0, W0
$2790	$781F80			PUSH	W0
$2792	$200010			MOV.B	#1, W0
$2794	$781F80			PUSH	W0
$2796	$200020			MOV.B	#2, W0
$2798	$781F80			PUSH	W0
$279A	$07FC0C			RCALL	_Lcd_Custom_Out, 0-10000015
$279C	$B1006F			SUB	#6, W15
;audme21.c,178 :: 		Segundos(25);
$279E	$200190			MOV	#25, W0
$27A0	$781F80			PUSH	W0
$27A2	$07F34A			RCALL	_Segundos, 0-101
$27A4	$B1002F			SUB	#2, W15
;audme21.c,179 :: 		CargarDatos(1);
$27A6	$200010			MOV.B	#1, W0
$27A8	$781F80			PUSH	W0
$27AA	$07F18F			RCALL	_CargarDatos, 0-103
$27AC	$B1002F			SUB	#2, W15
;audme21.c,180 :: 		CalculoIndices(4, freq);
$27AE	$201050			MOV	#261, W0
$27B0	$470000			ADD	W14, W0, W0
$27B2	$784010			MOV.B	[W0], W0
$27B4	$FB0000			SE	W0, W0
$27B6	$781F80			PUSH	W0
$27B8	$200040			MOV.B	#4, W0
$27BA	$781F80			PUSH	W0
$27BC	$07F962			RCALL	_CalculoIndices, 0-10303
$27BE	$B1004F			SUB	#4, W15
;audme21.c,181 :: 		GuardarDatos(4);
$27C0	$200040			MOV.B	#4, W0
$27C2	$781F80			PUSH	W0
$27C4	$07F3ED			RCALL	_GuardarDatos, 0-103
$27C6	$B1002F			SUB	#2, W15
;audme21.c,184 :: 		Segundos(25);
$27C8	$200190			MOV	#25, W0
$27CA	$781F80			PUSH	W0
$27CC	$07F335			RCALL	_Segundos, 0-101
$27CE	$B1002F			SUB	#2, W15
;audme21.c,185 :: 		CargarDatos(2);
$27D0	$200020			MOV.B	#2, W0
$27D2	$781F80			PUSH	W0
$27D4	$07F17A			RCALL	_CargarDatos, 0-103
$27D6	$B1002F			SUB	#2, W15
;audme21.c,186 :: 		CalculoIndices(6, freq);
$27D8	$201050			MOV	#261, W0
$27DA	$470000			ADD	W14, W0, W0
$27DC	$784010			MOV.B	[W0], W0
$27DE	$FB0000			SE	W0, W0
$27E0	$781F80			PUSH	W0
$27E2	$200060			MOV.B	#6, W0
$27E4	$781F80			PUSH	W0
$27E6	$07F94D			RCALL	_CalculoIndices, 0-10303
$27E8	$B1004F			SUB	#4, W15
;audme21.c,187 :: 		GuardarDatos(6);
$27EA	$200060			MOV.B	#6, W0
$27EC	$781F80			PUSH	W0
$27EE	$07F3D8			RCALL	_GuardarDatos, 0-103
$27F0	$B1002F			SUB	#2, W15
;audme21.c,190 :: 		Segundos(25);
$27F2	$200190			MOV	#25, W0
$27F4	$781F80			PUSH	W0
$27F6	$07F320			RCALL	_Segundos, 0-101
$27F8	$B1002F			SUB	#2, W15
;audme21.c,191 :: 		CargarDatos(1);
$27FA	$200010			MOV.B	#1, W0
$27FC	$781F80			PUSH	W0
$27FE	$07F165			RCALL	_CargarDatos, 0-103
$2800	$B1002F			SUB	#2, W15
;audme21.c,192 :: 		CalculoIndices(8, freq);
$2802	$201050			MOV	#261, W0
$2804	$470000			ADD	W14, W0, W0
$2806	$784010			MOV.B	[W0], W0
$2808	$FB0000			SE	W0, W0
$280A	$781F80			PUSH	W0
$280C	$200080			MOV.B	#8, W0
$280E	$781F80			PUSH	W0
$2810	$07F938			RCALL	_CalculoIndices, 0-10303
$2812	$B1004F			SUB	#4, W15
;audme21.c,193 :: 		GuardarDatos(8);
$2814	$200080			MOV.B	#8, W0
$2816	$781F80			PUSH	W0
$2818	$07F3C3			RCALL	_GuardarDatos, 0-103
$281A	$B1002F			SUB	#2, W15
;audme21.c,195 :: 		Lcd_Custom_Cmd(LCD_CLEAR);
$281C	$200010			MOV.B	#1, W0
$281E	$781F80			PUSH	W0
$2820	$07FB11			RCALL	_Lcd_Custom_Cmd, 0-100
$2822	$B1002F			SUB	#2, W15
;audme21.c,196 :: 		Lcd_Custom_Out(1,1,"Finalizado");
$2824	$200E60			MOV	#230, W0
$2826	$470000			ADD	W14, W0, W0
$2828	$781F80			PUSH	W0
$282A	$200010			MOV.B	#1, W0
$282C	$781F80			PUSH	W0
$282E	$200010			MOV.B	#1, W0
$2830	$781F80			PUSH	W0
$2832	$07FBC0			RCALL	_Lcd_Custom_Out, 0-10000015
$2834	$B1006F			SUB	#6, W15
;audme21.c,200 :: 		i=0;
$2836	$201041			MOV	#260, W1
$2838	$470081			ADD	W14, W1, W1
$283A	$200000			MOV.B	#0, W0
$283C	$784880			MOV.B	W0, [W1]
;audme21.c,201 :: 		flag = freq;
$283E	$20F681			MOV	#@_flag, W1
$2840	$91007E			MOV	[W14+270], W0
$2842	$784890			MOV.B	[W0], [W1]
;audme21.c,202 :: 		MostrarDatos(0);
$2844	$200000			MOV.B	#0, W0
$2846	$781F80			PUSH	W0
$2848	$07FC82			RCALL	_MostrarDatos, 0-103
$284A	$B1002F			SUB	#2, W15
;audme21.c,203 :: 		while(1){
$284C	$	L_main_25:
;audme21.c,204 :: 		if(Button(&PORTD, 0, 100,0)){
$284C	$200000			MOV	#0, W0
$284E	$781F80			PUSH	W0
$2850	$200640			MOV	#100, W0
$2852	$781F80			PUSH	W0
$2854	$200000			MOV	#0, W0
$2856	$781F80			PUSH	W0
$2858	$202D40			MOV	#@PORTD+0, W0
$285A	$781F80			PUSH	W0
$285C	$07EE4B			RCALL	_Button, 01015010101
$285E	$B1008F			SUB	#8, W15
$2860	$E00000			CP0	W0
$2862	$32001A			BRA Z	L_main_27, L_main_27
;audme21.c,205 :: 		i++;
$2864	$201042			MOV	#260, W2
$2866	$470102			ADD	W14, W2, W2
$2868	$784012			MOV.B	[W2], W0
$286A	$4040E1			ADD.B	W0, #1, W1
$286C	$784901			MOV.B	W1, [W2]
;audme21.c,206 :: 		if(i == 6) i = 0;
$286E	$50C066			SUB.B	W1, #6, W0
$2870	$3A0004			BRA NZ	L_main_28, L_main_28
$2872	$201041			MOV	#260, W1
$2874	$470081			ADD	W14, W1, W1
$2876	$200000			MOV.B	#0, W0
$2878	$784880			MOV.B	W0, [W1]
$287A	$	L_main_28:
;audme21.c,207 :: 		MostrarDatos(i);
$287A	$201040			MOV	#260, W0
$287C	$470000			ADD	W14, W0, W0
$287E	$784010			MOV.B	[W0], W0
$2880	$FB0000			SE	W0, W0
$2882	$781F80			PUSH	W0
$2884	$07FC64			RCALL	_MostrarDatos, 0-103
$2886	$B1002F			SUB	#2, W15
;audme21.c,208 :: 		delay_ms(200);
$2888	$2022E0			MOV	#558, W0
$288A	$781F80			PUSH	W0
$288C	$2003D0			MOV	#61, W0
$288E	$781F80			PUSH	W0
$2890	$07FD57			RCALL	_Delay_Cyc, 0-10101
$2892	$B1004F			SUB	#4, W15
;audme21.c,209 :: 		} else if(Button(&PORTD, 1, 100,0)){
$2894	$042934			GOTO	L_main_29
$2898	$	L_main_27:
$2898	$200000			MOV	#0, W0
$289A	$781F80			PUSH	W0
$289C	$200640			MOV	#100, W0
$289E	$781F80			PUSH	W0
$28A0	$200010			MOV	#1, W0
$28A2	$781F80			PUSH	W0
$28A4	$202D40			MOV	#@PORTD+0, W0
$28A6	$781F80			PUSH	W0
$28A8	$07EE25			RCALL	_Button, 01015010101
$28AA	$B1008F			SUB	#8, W15
$28AC	$E00000			CP0	W0
$28AE	$320042			BRA Z	L_main_30, L_main_30
;audme21.c,210 :: 		LCD_Custom_Cmd(LCD_CLEAR);
$28B0	$200010			MOV.B	#1, W0
$28B2	$781F80			PUSH	W0
$28B4	$07FAC7			RCALL	_Lcd_Custom_Cmd, 0-100
$28B6	$B1002F			SUB	#2, W15
;audme21.c,211 :: 		LCD_Custom_Out(1,1,"Salir?");
$28B8	$200F10			MOV	#241, W0
$28BA	$470000			ADD	W14, W0, W0
$28BC	$781F80			PUSH	W0
$28BE	$200010			MOV.B	#1, W0
$28C0	$781F80			PUSH	W0
$28C2	$200010			MOV.B	#1, W0
$28C4	$781F80			PUSH	W0
$28C6	$07FB76			RCALL	_Lcd_Custom_Out, 0-10000015
$28C8	$B1006F			SUB	#6, W15
;audme21.c,212 :: 		LCD_Custom_Out(2,1,"Si -> Start");
$28CA	$200F80			MOV	#248, W0
$28CC	$470000			ADD	W14, W0, W0
$28CE	$781F80			PUSH	W0
$28D0	$200010			MOV.B	#1, W0
$28D2	$781F80			PUSH	W0
$28D4	$200020			MOV.B	#2, W0
$28D6	$781F80			PUSH	W0
$28D8	$07FB6D			RCALL	_Lcd_Custom_Out, 0-10000015
$28DA	$B1006F			SUB	#6, W15
;audme21.c,213 :: 		while(1){
$28DC	$	L_main_31:
;audme21.c,214 :: 		if(Button(&PORTD, 0, 100, 0)){
$28DC	$200000			MOV	#0, W0
$28DE	$781F80			PUSH	W0
$28E0	$200640			MOV	#100, W0
$28E2	$781F80			PUSH	W0
$28E4	$200000			MOV	#0, W0
$28E6	$781F80			PUSH	W0
$28E8	$202D40			MOV	#@PORTD+0, W0
$28EA	$781F80			PUSH	W0
$28EC	$07EE03			RCALL	_Button, 01015010101
$28EE	$B1008F			SUB	#8, W15
$28F0	$E00000			CP0	W0
$28F2	$320008			BRA Z	L_main_33, L_main_33
;audme21.c,215 :: 		Delay_ms(200);
$28F4	$2022E0			MOV	#558, W0
$28F6	$781F80			PUSH	W0
$28F8	$2003D0			MOV	#61, W0
$28FA	$781F80			PUSH	W0
$28FC	$07FD21			RCALL	_Delay_Cyc, 0-10101
$28FE	$B1004F			SUB	#4, W15
;audme21.c,216 :: 		goto Inicio;
$2900	$042448			GOTO	___main_Inicio
;audme21.c,217 :: 		}else if (Button(&PORTD, 1, 100,0)){
$2904	$	L_main_33:
$2904	$200000			MOV	#0, W0
$2906	$781F80			PUSH	W0
$2908	$200640			MOV	#100, W0
$290A	$781F80			PUSH	W0
$290C	$200010			MOV	#1, W0
$290E	$781F80			PUSH	W0
$2910	$202D40			MOV	#@PORTD+0, W0
$2912	$781F80			PUSH	W0
$2914	$07EDEF			RCALL	_Button, 01015010101
$2916	$B1008F			SUB	#8, W15
$2918	$E00000			CP0	W0
$291A	$32000A			BRA Z	L_main_35, L_main_35
;audme21.c,218 :: 		LCD_Custom_Cmd(LCD_CLEAR);
$291C	$200010			MOV.B	#1, W0
$291E	$781F80			PUSH	W0
$2920	$07FA91			RCALL	_Lcd_Custom_Cmd, 0-100
$2922	$B1002F			SUB	#2, W15
;audme21.c,219 :: 		MostrarDatos(0);
$2924	$200000			MOV.B	#0, W0
$2926	$781F80			PUSH	W0
$2928	$07FC12			RCALL	_MostrarDatos, 0-103
$292A	$B1002F			SUB	#2, W15
;audme21.c,220 :: 		break;
$292C	$042934			GOTO	L_main_32
;audme21.c,221 :: 		}
$2930	$	L_main_35:
$2930	$	L_main_34:
;audme21.c,222 :: 		}
$2930	$0428DC			GOTO	L_main_31
$2934	$	L_main_32:
;audme21.c,223 :: 		}
$2934	$	L_main_30:
$2934	$	L_main_29:
;audme21.c,224 :: 		}
$2934	$04284C			GOTO	L_main_25
;audme21.c,227 :: 		}//~
$2938	$	L_end__main:
$2938	$FA8000			ULNK
$293A	$37FFFF			BRA	$
$293C	$FF6F43			TBLWT+*	DATA ?ICSlstr30_audme21
$293E	$FF666E			TBLWT+*	DATA ?ICSlstr30_audme21
$2940	$FF7269			TBLWT+*	DATA ?ICSlstr30_audme21
$2942	$FF616D			TBLWT+*	DATA ?ICSlstr30_audme21
$2944	$FF203F			TBLWT+*	DATA ?ICSlstr30_audme21
$2946	$FF2020			TBLWT+*	DATA ?ICSlstr30_audme21
$2948	$FF4600			TBLWT+*	DATA
$294A	$FF726F			TBLWT+*	DATA ?ICSlstr31_audme21
$294C	$FF616D			TBLWT+*	DATA ?ICSlstr31_audme21
$294E	$FF6574			TBLWT+*	DATA ?ICSlstr31_audme21
$2950	$FF6E61			TBLWT+*	DATA ?ICSlstr31_audme21
$2952	$FF6F64			TBLWT+*	DATA ?ICSlstr31_audme21
$2954	$FF2E2E			TBLWT+*	DATA ?ICSlstr31_audme21
$2956	$FF4600			TBLWT+*	DATA
$2958	$FF6E69			TBLWT+*	DATA ?ICSlstr32_audme21
$295A	$FF6C61			TBLWT+*	DATA ?ICSlstr32_audme21
$295C	$FF7A69			TBLWT+*	DATA ?ICSlstr32_audme21
$295E	$FF6461			TBLWT+*	DATA ?ICSlstr32_audme21
$2960	$FF206F			TBLWT+*	DATA ?ICSlstr32_audme21
$2962	$FF2020			TBLWT+*	DATA ?ICSlstr32_audme21
$2964	$FF4300			TBLWT+*	DATA
$2966	$FF6E61			TBLWT+*	DATA ?ICSlstr33_audme21
$2968	$FF6563			TBLWT+*	DATA ?ICSlstr33_audme21
$296A	$FF616C			TBLWT+*	DATA ?ICSlstr33_audme21
$296C	$FF6F64			TBLWT+*	DATA ?ICSlstr33_audme21
$296E	$FF2020			TBLWT+*	DATA ?ICSlstr33_audme21
$2970	$FF4600			TBLWT+*	DATA
$2972	$FF726F			TBLWT+*	DATA ?ICSlstr34_audme21
$2974	$FF616D			TBLWT+*	DATA ?ICSlstr34_audme21
$2976	$FF6574			TBLWT+*	DATA ?ICSlstr34_audme21
$2978	$FF7261			TBLWT+*	DATA ?ICSlstr34_audme21
$297A	$FF2020			TBLWT+*	DATA ?ICSlstr34_audme21
$297C	$FF2020			TBLWT+*	DATA ?ICSlstr34_audme21
$297E	$FF0020			TBLWT+*	DATA ?ICSlstr34_audme21
$2980	$FF7250			TBLWT+*	DATA ?ICSlstr35_audme21
$2982	$FF7365			TBLWT+*	DATA ?ICSlstr35_audme21
$2984	$FF6F69			TBLWT+*	DATA ?ICSlstr35_audme21
$2986	$FF656E			TBLWT+*	DATA ?ICSlstr35_audme21
$2988	$FF4520			TBLWT+*	DATA ?ICSlstr35_audme21
$298A	$FF746E			TBLWT+*	DATA ?ICSlstr35_audme21
$298C	$FF7265			TBLWT+*	DATA ?ICSlstr35_audme21
$298E	$FF2D00			TBLWT+*	DATA
$2990	$FF2D2D			TBLWT+*	DATA ?ICSlstr36_audme21
$2992	$FF002D			TBLWT+*	DATA ?ICSlstr36_audme21
$2994	$FF2D2D			TBLWT+*	DATA ?ICSlstr37_audme21
$2996	$FF2D2D			TBLWT+*	DATA ?ICSlstr37_audme21
$2998	$FF4500			TBLWT+*	DATA
$299A	$FF766E			TBLWT+*	DATA ?ICSlstr38_audme21
$299C	$FF6169			TBLWT+*	DATA ?ICSlstr38_audme21
$299E	$FF646E			TBLWT+*	DATA ?ICSlstr38_audme21
$29A0	$FF206F			TBLWT+*	DATA ?ICSlstr38_audme21
$29A2	$FF6164			TBLWT+*	DATA ?ICSlstr38_audme21
$29A4	$FF6F74			TBLWT+*	DATA ?ICSlstr38_audme21
$29A6	$FF0073			TBLWT+*	DATA ?ICSlstr38_audme21
$29A8	$FF7830			TBLWT+*	DATA ?ICSlstr39_audme21
$29AA	$FF3030			TBLWT+*	DATA ?ICSlstr39_audme21
$29AC	$FF3000			TBLWT+*	DATA
$29AE	$FF3378			TBLWT+*	DATA ?ICSlstr40_audme21
$29B0	$FF0032			TBLWT+*	DATA ?ICSlstr40_audme21
$29B2	$FF7830			TBLWT+*	DATA ?ICSlstr41_audme21
$29B4	$FF3436			TBLWT+*	DATA ?ICSlstr41_audme21
$29B6	$FF3000			TBLWT+*	DATA
$29B8	$FF3978			TBLWT+*	DATA ?ICSlstr42_audme21
$29BA	$FF0036			TBLWT+*	DATA ?ICSlstr42_audme21
$29BC	$FF7830			TBLWT+*	DATA ?ICSlstr43_audme21
$29BE	$FF3843			TBLWT+*	DATA ?ICSlstr43_audme21
$29C0	$FF4400			TBLWT+*	DATA
$29C2	$FF6E6F			TBLWT+*	DATA ?ICSlstr44_audme21
$29C4	$FF2E65			TBLWT+*	DATA ?ICSlstr44_audme21
$29C6	$FFFF00			TBLWT+*	DATA
$29C8	$FF0000			TBLWT+*	DATA _SIN_DEG
$29CA	$FF0023			TBLWT+*	DATA _SIN_DEG
$29CC	$FF0046			TBLWT+*	DATA _SIN_DEG
$29CE	$FF0069			TBLWT+*	DATA _SIN_DEG
$29D0	$FF008B			TBLWT+*	DATA _SIN_DEG
$29D2	$FF00AE			TBLWT+*	DATA _SIN_DEG
$29D4	$FF00D0			TBLWT+*	DATA _SIN_DEG
$29D6	$FF00F2			TBLWT+*	DATA _SIN_DEG
$29D8	$FF0114			TBLWT+*	DATA _SIN_DEG
$29DA	$FF0135			TBLWT+*	DATA _SIN_DEG
$29DC	$FF0156			TBLWT+*	DATA _SIN_DEG
$29DE	$FF0177			TBLWT+*	DATA _SIN_DEG
$29E0	$FF0197			TBLWT+*	DATA _SIN_DEG
$29E2	$FF01B6			TBLWT+*	DATA _SIN_DEG
$29E4	$FF01D5			TBLWT+*	DATA _SIN_DEG
$29E6	$FF01F4			TBLWT+*	DATA _SIN_DEG
$29E8	$FF0212			TBLWT+*	DATA _SIN_DEG
$29EA	$FF022F			TBLWT+*	DATA _SIN_DEG
$29EC	$FF024C			TBLWT+*	DATA _SIN_DEG
$29EE	$FF0268			TBLWT+*	DATA _SIN_DEG
$29F0	$FF0283			TBLWT+*	DATA _SIN_DEG
$29F2	$FF029D			TBLWT+*	DATA _SIN_DEG
$29F4	$FF02B7			TBLWT+*	DATA _SIN_DEG
$29F6	$FF02CF			TBLWT+*	DATA _SIN_DEG
$29F8	$FF02E7			TBLWT+*	DATA _SIN_DEG
$29FA	$FF02FE			TBLWT+*	DATA _SIN_DEG
$29FC	$FF0314			TBLWT+*	DATA _SIN_DEG
$29FE	$FF0329			TBLWT+*	DATA _SIN_DEG
$2A00	$FF033D			TBLWT+*	DATA _SIN_DEG
$2A02	$FF0350			TBLWT+*	DATA _SIN_DEG
$2A04	$FF0362			TBLWT+*	DATA _SIN_DEG
$2A06	$FF0373			TBLWT+*	DATA _SIN_DEG
$2A08	$FF0383			TBLWT+*	DATA _SIN_DEG
$2A0A	$FF0392			TBLWT+*	DATA _SIN_DEG
$2A0C	$FF039F			TBLWT+*	DATA _SIN_DEG
$2A0E	$FF03AC			TBLWT+*	DATA _SIN_DEG
$2A10	$FF03B7			TBLWT+*	DATA _SIN_DEG
$2A12	$FF03C1			TBLWT+*	DATA _SIN_DEG
$2A14	$FF03CA			TBLWT+*	DATA _SIN_DEG
$2A16	$FF03D2			TBLWT+*	DATA _SIN_DEG
$2A18	$FF03D9			TBLWT+*	DATA _SIN_DEG
$2A1A	$FF03DE			TBLWT+*	DATA _SIN_DEG
$2A1C	$FF03E3			TBLWT+*	DATA _SIN_DEG
$2A1E	$FF03E6			TBLWT+*	DATA _SIN_DEG
$2A20	$FF03E7			TBLWT+*	DATA _SIN_DEG
$2A22	$FF03E8			TBLWT+*	DATA _SIN_DEG
$2A24	$FF7FFF			TBLWT+*	DATA _TwiddleCoeff_128
$2A26	$FF0000			TBLWT+*	DATA _TwiddleCoeff_128
$2A28	$FF7FD9			TBLWT+*	DATA _TwiddleCoeff_128
$2A2A	$FFF9B8			TBLWT+*	DATA _TwiddleCoeff_128
$2A2C	$FF7F62			TBLWT+*	DATA _TwiddleCoeff_128
$2A2E	$FFF374			TBLWT+*	DATA _TwiddleCoeff_128
$2A30	$FF7E9D			TBLWT+*	DATA _TwiddleCoeff_128
$2A32	$FFED38			TBLWT+*	DATA _TwiddleCoeff_128
$2A34	$FF7D8A			TBLWT+*	DATA _TwiddleCoeff_128
$2A36	$FFE707			TBLWT+*	DATA _TwiddleCoeff_128
$2A38	$FF7C2A			TBLWT+*	DATA _TwiddleCoeff_128
$2A3A	$FFE0E6			TBLWT+*	DATA _TwiddleCoeff_128
$2A3C	$FF7A7D			TBLWT+*	DATA _TwiddleCoeff_128
$2A3E	$FFDAD8			TBLWT+*	DATA _TwiddleCoeff_128
$2A40	$FF7885			TBLWT+*	DATA _TwiddleCoeff_128
$2A42	$FFD4E1			TBLWT+*	DATA _TwiddleCoeff_128
$2A44	$FF7642			TBLWT+*	DATA _TwiddleCoeff_128
$2A46	$FFCF04			TBLWT+*	DATA _TwiddleCoeff_128
$2A48	$FF73B6			TBLWT+*	DATA _TwiddleCoeff_128
$2A4A	$FFC946			TBLWT+*	DATA _TwiddleCoeff_128
$2A4C	$FF70E3			TBLWT+*	DATA _TwiddleCoeff_128
$2A4E	$FFC3A9			TBLWT+*	DATA _TwiddleCoeff_128
$2A50	$FF6DCA			TBLWT+*	DATA _TwiddleCoeff_128
$2A52	$FFBE32			TBLWT+*	DATA _TwiddleCoeff_128
$2A54	$FF6A6E			TBLWT+*	DATA _TwiddleCoeff_128
$2A56	$FFB8E3			TBLWT+*	DATA _TwiddleCoeff_128
$2A58	$FF66D0			TBLWT+*	DATA _TwiddleCoeff_128
$2A5A	$FFB3C0			TBLWT+*	DATA _TwiddleCoeff_128
$2A5C	$FF62F2			TBLWT+*	DATA _TwiddleCoeff_128
$2A5E	$FFAECC			TBLWT+*	DATA _TwiddleCoeff_128
$2A60	$FF5ED7			TBLWT+*	DATA _TwiddleCoeff_128
$2A62	$FFAA0A			TBLWT+*	DATA _TwiddleCoeff_128
$2A64	$FF5A82			TBLWT+*	DATA _TwiddleCoeff_128
$2A66	$FFA57E			TBLWT+*	DATA _TwiddleCoeff_128
$2A68	$FF55F6			TBLWT+*	DATA _TwiddleCoeff_128
$2A6A	$FFA129			TBLWT+*	DATA _TwiddleCoeff_128
$2A6C	$FF5134			TBLWT+*	DATA _TwiddleCoeff_128
$2A6E	$FF9D0E			TBLWT+*	DATA _TwiddleCoeff_128
$2A70	$FF4C40			TBLWT+*	DATA _TwiddleCoeff_128
$2A72	$FF9930			TBLWT+*	DATA _TwiddleCoeff_128
$2A74	$FF471D			TBLWT+*	DATA _TwiddleCoeff_128
$2A76	$FF9592			TBLWT+*	DATA _TwiddleCoeff_128
$2A78	$FF41CE			TBLWT+*	DATA _TwiddleCoeff_128
$2A7A	$FF9236			TBLWT+*	DATA _TwiddleCoeff_128
$2A7C	$FF3C57			TBLWT+*	DATA _TwiddleCoeff_128
$2A7E	$FF8F1D			TBLWT+*	DATA _TwiddleCoeff_128
$2A80	$FF36BA			TBLWT+*	DATA _TwiddleCoeff_128
$2A82	$FF8C4A			TBLWT+*	DATA _TwiddleCoeff_128
$2A84	$FF30FC			TBLWT+*	DATA _TwiddleCoeff_128
$2A86	$FF89BE			TBLWT+*	DATA _TwiddleCoeff_128
$2A88	$FF2B1F			TBLWT+*	DATA _TwiddleCoeff_128
$2A8A	$FF877B			TBLWT+*	DATA _TwiddleCoeff_128
$2A8C	$FF2528			TBLWT+*	DATA _TwiddleCoeff_128
$2A8E	$FF8583			TBLWT+*	DATA _TwiddleCoeff_128
$2A90	$FF1F1A			TBLWT+*	DATA _TwiddleCoeff_128
$2A92	$FF83D6			TBLWT+*	DATA _TwiddleCoeff_128
$2A94	$FF18F9			TBLWT+*	DATA _TwiddleCoeff_128
$2A96	$FF8276			TBLWT+*	DATA _TwiddleCoeff_128
$2A98	$FF12C8			TBLWT+*	DATA _TwiddleCoeff_128
$2A9A	$FF8163			TBLWT+*	DATA _TwiddleCoeff_128
$2A9C	$FF0C8C			TBLWT+*	DATA _TwiddleCoeff_128
$2A9E	$FF809E			TBLWT+*	DATA _TwiddleCoeff_128
$2AA0	$FF0648			TBLWT+*	DATA _TwiddleCoeff_128
$2AA2	$FF8027			TBLWT+*	DATA _TwiddleCoeff_128
$2AA4	$FF0000			TBLWT+*	DATA _TwiddleCoeff_128
$2AA6	$FF8000			TBLWT+*	DATA _TwiddleCoeff_128
$2AA8	$FFF9B8			TBLWT+*	DATA _TwiddleCoeff_128
$2AAA	$FF8027			TBLWT+*	DATA _TwiddleCoeff_128
$2AAC	$FFF374			TBLWT+*	DATA _TwiddleCoeff_128
$2AAE	$FF809E			TBLWT+*	DATA _TwiddleCoeff_128
$2AB0	$FFED38			TBLWT+*	DATA _TwiddleCoeff_128
$2AB2	$FF8163			TBLWT+*	DATA _TwiddleCoeff_128
$2AB4	$FFE707			TBLWT+*	DATA _TwiddleCoeff_128
$2AB6	$FF8276			TBLWT+*	DATA _TwiddleCoeff_128
$2AB8	$FFE0E6			TBLWT+*	DATA _TwiddleCoeff_128
$2ABA	$FF83D6			TBLWT+*	DATA _TwiddleCoeff_128
$2ABC	$FFDAD8			TBLWT+*	DATA _TwiddleCoeff_128
$2ABE	$FF8583			TBLWT+*	DATA _TwiddleCoeff_128
$2AC0	$FFD4E1			TBLWT+*	DATA _TwiddleCoeff_128
$2AC2	$FF877B			TBLWT+*	DATA _TwiddleCoeff_128
$2AC4	$FFCF04			TBLWT+*	DATA _TwiddleCoeff_128
$2AC6	$FF89BE			TBLWT+*	DATA _TwiddleCoeff_128
$2AC8	$FFC946			TBLWT+*	DATA _TwiddleCoeff_128
$2ACA	$FF8C4A			TBLWT+*	DATA _TwiddleCoeff_128
$2ACC	$FFC3A9			TBLWT+*	DATA _TwiddleCoeff_128
$2ACE	$FF8F1D			TBLWT+*	DATA _TwiddleCoeff_128
$2AD0	$FFBE32			TBLWT+*	DATA _TwiddleCoeff_128
$2AD2	$FF9236			TBLWT+*	DATA _TwiddleCoeff_128
$2AD4	$FFB8E3			TBLWT+*	DATA _TwiddleCoeff_128
$2AD6	$FF9592			TBLWT+*	DATA _TwiddleCoeff_128
$2AD8	$FFB3C0			TBLWT+*	DATA _TwiddleCoeff_128
$2ADA	$FF9930			TBLWT+*	DATA _TwiddleCoeff_128
$2ADC	$FFAECC			TBLWT+*	DATA _TwiddleCoeff_128
$2ADE	$FF9D0E			TBLWT+*	DATA _TwiddleCoeff_128
$2AE0	$FFAA0A			TBLWT+*	DATA _TwiddleCoeff_128
$2AE2	$FFA129			TBLWT+*	DATA _TwiddleCoeff_128
$2AE4	$FFA57E			TBLWT+*	DATA _TwiddleCoeff_128
$2AE6	$FFA57E			TBLWT+*	DATA _TwiddleCoeff_128
$2AE8	$FFA129			TBLWT+*	DATA _TwiddleCoeff_128
$2AEA	$FFAA0A			TBLWT+*	DATA _TwiddleCoeff_128
$2AEC	$FF9D0E			TBLWT+*	DATA _TwiddleCoeff_128
$2AEE	$FFAECC			TBLWT+*	DATA _TwiddleCoeff_128
$2AF0	$FF9930			TBLWT+*	DATA _TwiddleCoeff_128
$2AF2	$FFB3C0			TBLWT+*	DATA _TwiddleCoeff_128
$2AF4	$FF9592			TBLWT+*	DATA _TwiddleCoeff_128
$2AF6	$FFB8E3			TBLWT+*	DATA _TwiddleCoeff_128
$2AF8	$FF9236			TBLWT+*	DATA _TwiddleCoeff_128
$2AFA	$FFBE32			TBLWT+*	DATA _TwiddleCoeff_128
$2AFC	$FF8F1D			TBLWT+*	DATA _TwiddleCoeff_128
$2AFE	$FFC3A9			TBLWT+*	DATA _TwiddleCoeff_128
$2B00	$FF8C4A			TBLWT+*	DATA _TwiddleCoeff_128
$2B02	$FFC946			TBLWT+*	DATA _TwiddleCoeff_128
$2B04	$FF89BE			TBLWT+*	DATA _TwiddleCoeff_128
$2B06	$FFCF04			TBLWT+*	DATA _TwiddleCoeff_128
$2B08	$FF877B			TBLWT+*	DATA _TwiddleCoeff_128
$2B0A	$FFD4E1			TBLWT+*	DATA _TwiddleCoeff_128
$2B0C	$FF8583			TBLWT+*	DATA _TwiddleCoeff_128
$2B0E	$FFDAD8			TBLWT+*	DATA _TwiddleCoeff_128
$2B10	$FF83D6			TBLWT+*	DATA _TwiddleCoeff_128
$2B12	$FFE0E6			TBLWT+*	DATA _TwiddleCoeff_128
$2B14	$FF8276			TBLWT+*	DATA _TwiddleCoeff_128
$2B16	$FFE707			TBLWT+*	DATA _TwiddleCoeff_128
$2B18	$FF8163			TBLWT+*	DATA _TwiddleCoeff_128
$2B1A	$FFED38			TBLWT+*	DATA _TwiddleCoeff_128
$2B1C	$FF809E			TBLWT+*	DATA _TwiddleCoeff_128
$2B1E	$FFF374			TBLWT+*	DATA _TwiddleCoeff_128
$2B20	$FF8027			TBLWT+*	DATA _TwiddleCoeff_128
$2B22	$FFF9B8			TBLWT+*	DATA _TwiddleCoeff_128
$2B24	$FF644E			TBLWT+*	DATA ?ICSlstr29_audme21
$2B26	$FF3A52			TBLWT+*	DATA ?ICSlstr29_audme21
$2B28	$FF0020			TBLWT+*	DATA ?ICSlstr29_audme21
$2B2A	$FF4952			TBLWT+*	DATA ?ICSlstr23_audme21
$2B2C	$FF7463			TBLWT+*	DATA ?ICSlstr23_audme21
$2B2E	$FF6C72			TBLWT+*	DATA ?ICSlstr23_audme21
$2B30	$FF203A			TBLWT+*	DATA ?ICSlstr23_audme21
$2B32	$FF6400			TBLWT+*	DATA
$2B34	$FF6354			TBLWT+*	DATA ?ICSlstr24_audme21
$2B36	$FF7274			TBLWT+*	DATA ?ICSlstr24_audme21
$2B38	$FF3A6C			TBLWT+*	DATA ?ICSlstr24_audme21
$2B3A	$FF0020			TBLWT+*	DATA ?ICSlstr24_audme21
$2B3C	$FF644E			TBLWT+*	DATA ?ICSlstr25_audme21
$2B3E	$FF6552			TBLWT+*	DATA ?ICSlstr25_audme21
$2B40	$FF3A67			TBLWT+*	DATA ?ICSlstr25_audme21
$2B42	$FF0020			TBLWT+*	DATA ?ICSlstr25_audme21
$2B44	$FF7266			TBLWT+*	DATA ?ICSlstr26_audme21
$2B46	$FF7165			TBLWT+*	DATA ?ICSlstr26_audme21
$2B48	$FF203A			TBLWT+*	DATA ?ICSlstr26_audme21
$2B4A	$FF5200			TBLWT+*	DATA
$2B4C	$FF2049			TBLWT+*	DATA ?ICSlstr27_audme21
$2B4E	$FF2020			TBLWT+*	DATA ?ICSlstr27_audme21
$2B50	$FF3A20			TBLWT+*	DATA ?ICSlstr27_audme21
$2B52	$FF6400			TBLWT+*	DATA
$2B54	$FF2054			TBLWT+*	DATA ?ICSlstr28_audme21
$2B56	$FF2020			TBLWT+*	DATA ?ICSlstr28_audme21
$2B58	$FF3A20			TBLWT+*	DATA ?ICSlstr28_audme21
$2B5A	$FF4900			TBLWT+*	DATA
$2B5C	$FF696E			TBLWT+*	DATA ?ICSlstr1_audme21
$2B5E	$FF6963			TBLWT+*	DATA ?ICSlstr1_audme21
$2B60	$FF6E61			TBLWT+*	DATA ?ICSlstr1_audme21
$2B62	$FF6F64			TBLWT+*	DATA ?ICSlstr1_audme21
$2B64	$FF4100			TBLWT+*	DATA
$2B66	$FF6475			TBLWT+*	DATA ?ICSlstr2_audme21
$2B68	$FF656D			TBLWT+*	DATA ?ICSlstr2_audme21
$2B6A	$FF3220			TBLWT+*	DATA ?ICSlstr2_audme21
$2B6C	$FF312E			TBLWT+*	DATA ?ICSlstr2_audme21
$2B6E	$FF4900			TBLWT+*	DATA
$2B70	$FF696E			TBLWT+*	DATA ?ICSlstr3_audme21
$2B72	$FF6963			TBLWT+*	DATA ?ICSlstr3_audme21
$2B74	$FF7261			TBLWT+*	DATA ?ICSlstr3_audme21
$2B76	$FF2020			TBLWT+*	DATA ?ICSlstr3_audme21
$2B78	$FF2020			TBLWT+*	DATA ?ICSlstr3_audme21
$2B7A	$FF2020			TBLWT+*	DATA ?ICSlstr3_audme21
$2B7C	$FF0020			TBLWT+*	DATA ?ICSlstr3_audme21
$2B7E	$FF7250			TBLWT+*	DATA ?ICSlstr4_audme21
$2B80	$FF7365			TBLWT+*	DATA ?ICSlstr4_audme21
$2B82	$FF6F69			TBLWT+*	DATA ?ICSlstr4_audme21
$2B84	$FF656E			TBLWT+*	DATA ?ICSlstr4_audme21
$2B86	$FF4520			TBLWT+*	DATA ?ICSlstr4_audme21
$2B88	$FF746E			TBLWT+*	DATA ?ICSlstr4_audme21
$2B8A	$FF7265			TBLWT+*	DATA ?ICSlstr4_audme21
$2B8C	$FF4900			TBLWT+*	DATA
$2B8E	$FF696E			TBLWT+*	DATA ?ICSlstr5_audme21
$2B90	$FF6963			TBLWT+*	DATA ?ICSlstr5_audme21
$2B92	$FF7261			TBLWT+*	DATA ?ICSlstr5_audme21
$2B94	$FF2020			TBLWT+*	DATA ?ICSlstr5_audme21
$2B96	$FF2020			TBLWT+*	DATA ?ICSlstr5_audme21
$2B98	$FF2020			TBLWT+*	DATA ?ICSlstr5_audme21
$2B9A	$FF0020			TBLWT+*	DATA ?ICSlstr5_audme21
$2B9C	$FF6F46			TBLWT+*	DATA ?ICSlstr6_audme21
$2B9E	$FF6D72			TBLWT+*	DATA ?ICSlstr6_audme21
$2BA0	$FF7461			TBLWT+*	DATA ?ICSlstr6_audme21
$2BA2	$FF6165			TBLWT+*	DATA ?ICSlstr6_audme21
$2BA4	$FF2072			TBLWT+*	DATA ?ICSlstr6_audme21
$2BA6	$FF2020			TBLWT+*	DATA ?ICSlstr6_audme21
$2BA8	$FF2020			TBLWT+*	DATA ?ICSlstr6_audme21
$2BAA	$FF4500			TBLWT+*	DATA
$2BAC	$FF766E			TBLWT+*	DATA ?ICSlstr7_audme21
$2BAE	$FF6169			TBLWT+*	DATA ?ICSlstr7_audme21
$2BB0	$FF2072			TBLWT+*	DATA ?ICSlstr7_audme21
$2BB2	$FF6144			TBLWT+*	DATA ?ICSlstr7_audme21
$2BB4	$FF6F74			TBLWT+*	DATA ?ICSlstr7_audme21
$2BB6	$FF2073			TBLWT+*	DATA ?ICSlstr7_audme21
$2BB8	$FF0020			TBLWT+*	DATA ?ICSlstr7_audme21
$2BBA	$FF6143			TBLWT+*	DATA ?ICSlstr8_audme21
$2BBC	$FF6772			TBLWT+*	DATA ?ICSlstr8_audme21
$2BBE	$FF6E61			TBLWT+*	DATA ?ICSlstr8_audme21
$2BC0	$FF6F64			TBLWT+*	DATA ?ICSlstr8_audme21
$2BC2	$FF6420			TBLWT+*	DATA ?ICSlstr8_audme21
$2BC4	$FF7461			TBLWT+*	DATA ?ICSlstr8_audme21
$2BC6	$FF736F			TBLWT+*	DATA ?ICSlstr8_audme21
$2BC8	$FF4E00			TBLWT+*	DATA
$2BCA	$FF206F			TBLWT+*	DATA ?ICSlstr9_audme21
$2BCC	$FF6573			TBLWT+*	DATA ?ICSlstr9_audme21
$2BCE	$FF6520			TBLWT+*	DATA ?ICSlstr9_audme21
$2BD0	$FF636E			TBLWT+*	DATA ?ICSlstr9_audme21
$2BD2	$FF6575			TBLWT+*	DATA ?ICSlstr9_audme21
$2BD4	$FF746E			TBLWT+*	DATA ?ICSlstr9_audme21
$2BD6	$FF6172			TBLWT+*	DATA ?ICSlstr9_audme21
$2BD8	$FF6C20			TBLWT+*	DATA ?ICSlstr9_audme21
$2BDA	$FF0061			TBLWT+*	DATA ?ICSlstr9_audme21
$2BDC	$FF6573			TBLWT+*	DATA ?ICSlstr10_audme21
$2BDE	$FF616E			TBLWT+*	DATA ?ICSlstr10_audme21
$2BE0	$FF2E6C			TBLWT+*	DATA ?ICSlstr10_audme21
$2BE2	$FF4500			TBLWT+*	DATA
$2BE4	$FF7272			TBLWT+*	DATA ?ICSlstr11_audme21
$2BE6	$FF726F			TBLWT+*	DATA ?ICSlstr11_audme21
$2BE8	$FF3620			TBLWT+*	DATA ?ICSlstr11_audme21
$2BEA	$FF0039			TBLWT+*	DATA ?ICSlstr11_audme21
$2BEC	$FF7542			TBLWT+*	DATA ?ICSlstr12_audme21
$2BEE	$FF6373			TBLWT+*	DATA ?ICSlstr12_audme21
$2BF0	$FF6E61			TBLWT+*	DATA ?ICSlstr12_audme21
$2BF2	$FF6F64			TBLWT+*	DATA ?ICSlstr12_audme21
$2BF4	$FF7320			TBLWT+*	DATA ?ICSlstr12_audme21
$2BF6	$FF6E65			TBLWT+*	DATA ?ICSlstr12_audme21
$2BF8	$FF6C61			TBLWT+*	DATA ?ICSlstr12_audme21
$2BFA	$FF4400			TBLWT+*	DATA
$2BFC	$FF7461			TBLWT+*	DATA ?ICSlstr13_audme21
$2BFE	$FF736F			TBLWT+*	DATA ?ICSlstr13_audme21
$2C00	$FF6E20			TBLWT+*	DATA ?ICSlstr13_audme21
$2C02	$FF6575			TBLWT+*	DATA ?ICSlstr13_audme21
$2C04	$FF6F76			TBLWT+*	DATA ?ICSlstr13_audme21
$2C06	$FF0073			TBLWT+*	DATA ?ICSlstr13_audme21
$2C08	$FF2D2D			TBLWT+*	DATA ?ICSlstr14_audme21
$2C0A	$FF6420			TBLWT+*	DATA ?ICSlstr14_audme21
$2C0C	$FF6E6F			TBLWT+*	DATA ?ICSlstr14_audme21
$2C0E	$FF2065			TBLWT+*	DATA ?ICSlstr14_audme21
$2C10	$FF2D2D			TBLWT+*	DATA ?ICSlstr14_audme21
$2C12	$FF3300			TBLWT+*	DATA
$2C14	$FF2E2E			TBLWT+*	DATA ?ICSlstr15_audme21
$2C16	$FF002E			TBLWT+*	DATA ?ICSlstr15_audme21
$2C18	$FF2E32			TBLWT+*	DATA ?ICSlstr16_audme21
$2C1A	$FF2E2E			TBLWT+*	DATA ?ICSlstr16_audme21
$2C1C	$FF3100			TBLWT+*	DATA
$2C1E	$FF2E2E			TBLWT+*	DATA ?ICSlstr17_audme21
$2C20	$FF002E			TBLWT+*	DATA ?ICSlstr17_audme21
$2C22	$FF6F50			TBLWT+*	DATA ?ICSlstr18_audme21
$2C24	$FF7473			TBLWT+*	DATA ?ICSlstr18_audme21
$2C26	$FF4F20			TBLWT+*	DATA ?ICSlstr18_audme21
$2C28	$FF6C63			TBLWT+*	DATA ?ICSlstr18_audme21
$2C2A	$FF7375			TBLWT+*	DATA ?ICSlstr18_audme21
$2C2C	$FF6F69			TBLWT+*	DATA ?ICSlstr18_audme21
$2C2E	$FF006E			TBLWT+*	DATA ?ICSlstr18_audme21
$2C30	$FF7250			TBLWT+*	DATA ?ICSlstr19_audme21
$2C32	$FF636F			TBLWT+*	DATA ?ICSlstr19_audme21
$2C34	$FF7365			TBLWT+*	DATA ?ICSlstr19_audme21
$2C36	$FF6E61			TBLWT+*	DATA ?ICSlstr19_audme21
$2C38	$FF6F64			TBLWT+*	DATA ?ICSlstr19_audme21
$2C3A	$FF2020			TBLWT+*	DATA ?ICSlstr19_audme21
$2C3C	$FF2020			TBLWT+*	DATA ?ICSlstr19_audme21
$2C3E	$FF2020			TBLWT+*	DATA ?ICSlstr19_audme21
$2C40	$FF4600			TBLWT+*	DATA
$2C42	$FF6E69			TBLWT+*	DATA ?ICSlstr20_audme21
$2C44	$FF6C61			TBLWT+*	DATA ?ICSlstr20_audme21
$2C46	$FF7A69			TBLWT+*	DATA ?ICSlstr20_audme21
$2C48	$FF6461			TBLWT+*	DATA ?ICSlstr20_audme21
$2C4A	$FF006F			TBLWT+*	DATA ?ICSlstr20_audme21
$2C4C	$FF6153			TBLWT+*	DATA ?ICSlstr21_audme21
$2C4E	$FF696C			TBLWT+*	DATA ?ICSlstr21_audme21
$2C50	$FF3F72			TBLWT+*	DATA ?ICSlstr21_audme21
$2C52	$FF5300			TBLWT+*	DATA
$2C54	$FF2069			TBLWT+*	DATA ?ICSlstr22_audme21
$2C56	$FF3E2D			TBLWT+*	DATA ?ICSlstr22_audme21
$2C58	$FF5320			TBLWT+*	DATA ?ICSlstr22_audme21
$2C5A	$FF6174			TBLWT+*	DATA ?ICSlstr22_audme21
$2C5C	$FF7472			TBLWT+*	DATA ?ICSlstr22_audme21
$2C5E	$FFFF00			TBLWT+*	DATA
$2C60	$FFFF00			TBLWT+*	DATA
$2C62	$FF0000			TBLWT+*	DATA ?ICS_Adrr
